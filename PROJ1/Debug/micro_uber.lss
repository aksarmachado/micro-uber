
micro_uber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800200  0000210e  000021a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000210e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800372  00800372  00002314  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c67  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001269  00000000  00000000  000051cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000157f  00000000  00000000  00006438  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  000079b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aff  00000000  00000000  00007e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e20  00000000  00000000  0000896b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000978b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	80 c0       	rjmp	.+256    	; 0x102 <__ctors_end>
       2:	00 00       	nop
       4:	9f c0       	rjmp	.+318    	; 0x144 <__bad_interrupt>
       6:	00 00       	nop
       8:	9d c0       	rjmp	.+314    	; 0x144 <__bad_interrupt>
       a:	00 00       	nop
       c:	9b c0       	rjmp	.+310    	; 0x144 <__bad_interrupt>
       e:	00 00       	nop
      10:	99 c0       	rjmp	.+306    	; 0x144 <__bad_interrupt>
      12:	00 00       	nop
      14:	97 c0       	rjmp	.+302    	; 0x144 <__bad_interrupt>
      16:	00 00       	nop
      18:	95 c0       	rjmp	.+298    	; 0x144 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	93 c0       	rjmp	.+294    	; 0x144 <__bad_interrupt>
      1e:	00 00       	nop
      20:	91 c0       	rjmp	.+290    	; 0x144 <__bad_interrupt>
      22:	00 00       	nop
      24:	8f c0       	rjmp	.+286    	; 0x144 <__bad_interrupt>
      26:	00 00       	nop
      28:	8d c0       	rjmp	.+282    	; 0x144 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8b c0       	rjmp	.+278    	; 0x144 <__bad_interrupt>
      2e:	00 00       	nop
      30:	89 c0       	rjmp	.+274    	; 0x144 <__bad_interrupt>
      32:	00 00       	nop
      34:	87 c0       	rjmp	.+270    	; 0x144 <__bad_interrupt>
      36:	00 00       	nop
      38:	85 c0       	rjmp	.+266    	; 0x144 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_15>
      40:	81 c0       	rjmp	.+258    	; 0x144 <__bad_interrupt>
      42:	00 00       	nop
      44:	7f c0       	rjmp	.+254    	; 0x144 <__bad_interrupt>
      46:	00 00       	nop
      48:	7d c0       	rjmp	.+250    	; 0x144 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7b c0       	rjmp	.+246    	; 0x144 <__bad_interrupt>
      4e:	00 00       	nop
      50:	79 c0       	rjmp	.+242    	; 0x144 <__bad_interrupt>
      52:	00 00       	nop
      54:	77 c0       	rjmp	.+238    	; 0x144 <__bad_interrupt>
      56:	00 00       	nop
      58:	75 c0       	rjmp	.+234    	; 0x144 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	73 c0       	rjmp	.+230    	; 0x144 <__bad_interrupt>
      5e:	00 00       	nop
      60:	71 c0       	rjmp	.+226    	; 0x144 <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c6       	rjmp	.+3144   	; 0xcae <__vector_25>
      66:	00 00       	nop
      68:	6d c0       	rjmp	.+218    	; 0x144 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6b c0       	rjmp	.+214    	; 0x144 <__bad_interrupt>
      6e:	00 00       	nop
      70:	69 c0       	rjmp	.+210    	; 0x144 <__bad_interrupt>
      72:	00 00       	nop
      74:	67 c0       	rjmp	.+206    	; 0x144 <__bad_interrupt>
      76:	00 00       	nop
      78:	65 c0       	rjmp	.+202    	; 0x144 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	63 c0       	rjmp	.+198    	; 0x144 <__bad_interrupt>
      7e:	00 00       	nop
      80:	61 c0       	rjmp	.+194    	; 0x144 <__bad_interrupt>
      82:	00 00       	nop
      84:	5f c0       	rjmp	.+190    	; 0x144 <__bad_interrupt>
      86:	00 00       	nop
      88:	5d c0       	rjmp	.+186    	; 0x144 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5b c0       	rjmp	.+182    	; 0x144 <__bad_interrupt>
      8e:	00 00       	nop
      90:	59 c0       	rjmp	.+178    	; 0x144 <__bad_interrupt>
      92:	00 00       	nop
      94:	57 c0       	rjmp	.+174    	; 0x144 <__bad_interrupt>
      96:	00 00       	nop
      98:	55 c0       	rjmp	.+170    	; 0x144 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	53 c0       	rjmp	.+166    	; 0x144 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	51 c0       	rjmp	.+162    	; 0x144 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4f c0       	rjmp	.+158    	; 0x144 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4d c0       	rjmp	.+154    	; 0x144 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4b c0       	rjmp	.+150    	; 0x144 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	49 c0       	rjmp	.+146    	; 0x144 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	47 c0       	rjmp	.+142    	; 0x144 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	45 c0       	rjmp	.+138    	; 0x144 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	43 c0       	rjmp	.+134    	; 0x144 <__bad_interrupt>
      be:	00 00       	nop
      c0:	41 c0       	rjmp	.+130    	; 0x144 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3f c0       	rjmp	.+126    	; 0x144 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3d c0       	rjmp	.+122    	; 0x144 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3b c0       	rjmp	.+118    	; 0x144 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	39 c0       	rjmp	.+114    	; 0x144 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	37 c0       	rjmp	.+110    	; 0x144 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	35 c0       	rjmp	.+106    	; 0x144 <__bad_interrupt>
      da:	00 00       	nop
      dc:	33 c0       	rjmp	.+102    	; 0x144 <__bad_interrupt>
      de:	00 00       	nop
      e0:	31 c0       	rjmp	.+98     	; 0x144 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 03       	mulsu	r20, r23
      e6:	78 03       	fmul	r23, r16
      e8:	a9 03       	fmulsu	r18, r17
      ea:	da 03       	fmulsu	r21, r18
      ec:	0b 04       	cpc	r0, r11
      ee:	3c 04       	cpc	r3, r12
      f0:	6d 04       	cpc	r6, r13
      f2:	9e 04       	cpc	r9, r14
      f4:	79 06       	cpc	r7, r25
      f6:	80 06       	cpc	r8, r16
      f8:	d4 06       	cpc	r13, r20
      fa:	f2 06       	cpc	r15, r18
      fc:	10 07       	cpc	r17, r16
      fe:	19 07       	cpc	r17, r25
     100:	31 07       	cpc	r19, r17

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d1 e2       	ldi	r29, 0x21	; 33
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0c bf       	out	0x3c, r16	; 60

00000112 <__do_copy_data>:
     112:	13 e0       	ldi	r17, 0x03	; 3
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	ee e0       	ldi	r30, 0x0E	; 14
     11a:	f1 e2       	ldi	r31, 0x21	; 33
     11c:	00 e0       	ldi	r16, 0x00	; 0
     11e:	0b bf       	out	0x3b, r16	; 59
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x14>
     122:	07 90       	elpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	a2 37       	cpi	r26, 0x72	; 114
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0x10>

0000012c <__do_clear_bss>:
     12c:	23 e0       	ldi	r18, 0x03	; 3
     12e:	a2 e7       	ldi	r26, 0x72	; 114
     130:	b3 e0       	ldi	r27, 0x03	; 3
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	a3 3d       	cpi	r26, 0xD3	; 211
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	0e 94 c8 09 	call	0x1390	; 0x1390 <main>
     140:	0c 94 85 10 	jmp	0x210a	; 0x210a <_exit>

00000144 <__bad_interrupt>:
     144:	5d cf       	rjmp	.-326    	; 0x0 <__vectors>

00000146 <indiceMaisProximo>:
  // if (meia_volta)     printf("D� meia volta\n");
  // if (virar_esquerda) printf("Vire � esquerda\n");
  // if (virar_direita)  printf("Vire � direita\n");

  return direcao_motoqueiro;
}
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	2a 97       	sbiw	r28, 0x0a	; 10
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
     17a:	1c 01       	movw	r2, r24
     17c:	3b 01       	movw	r6, r22
     17e:	e0 e0       	ldi	r30, 0x00	; 0
     180:	f2 e0       	ldi	r31, 0x02	; 2
     182:	80 81       	ld	r24, Z
     184:	91 81       	ldd	r25, Z+1	; 0x01
     186:	b1 01       	movw	r22, r2
     188:	68 1b       	sub	r22, r24
     18a:	79 0b       	sbc	r23, r25
     18c:	07 2e       	mov	r0, r23
     18e:	00 0c       	add	r0, r0
     190:	88 0b       	sbc	r24, r24
     192:	99 0b       	sbc	r25, r25
     194:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     198:	6b 01       	movw	r12, r22
     19a:	7c 01       	movw	r14, r24
     19c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     1a0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     1a4:	b3 01       	movw	r22, r6
     1a6:	68 1b       	sub	r22, r24
     1a8:	79 0b       	sbc	r23, r25
     1aa:	07 2e       	mov	r0, r23
     1ac:	00 0c       	add	r0, r0
     1ae:	88 0b       	sbc	r24, r24
     1b0:	99 0b       	sbc	r25, r25
     1b2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     1b6:	4b 01       	movw	r8, r22
     1b8:	5c 01       	movw	r10, r24
     1ba:	9b 01       	movw	r18, r22
     1bc:	ac 01       	movw	r20, r24
     1be:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     1c2:	69 83       	std	Y+1, r22	; 0x01
     1c4:	7a 83       	std	Y+2, r23	; 0x02
     1c6:	8b 83       	std	Y+3, r24	; 0x03
     1c8:	9c 83       	std	Y+4, r25	; 0x04
     1ca:	a5 01       	movw	r20, r10
     1cc:	94 01       	movw	r18, r8
     1ce:	c5 01       	movw	r24, r10
     1d0:	b4 01       	movw	r22, r8
     1d2:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     1d6:	4b 01       	movw	r8, r22
     1d8:	5c 01       	movw	r10, r24
     1da:	a7 01       	movw	r20, r14
     1dc:	96 01       	movw	r18, r12
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     1e6:	9b 01       	movw	r18, r22
     1e8:	ac 01       	movw	r20, r24
     1ea:	c5 01       	movw	r24, r10
     1ec:	b4 01       	movw	r22, r8
     1ee:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__addsf3>
     1f2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <sqrt>
     1f6:	6d 83       	std	Y+5, r22	; 0x05
     1f8:	7e 83       	std	Y+6, r23	; 0x06
     1fa:	48 2e       	mov	r4, r24
     1fc:	59 2e       	mov	r5, r25
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	92 e0       	ldi	r25, 0x02	; 2
     202:	01 e0       	ldi	r16, 0x01	; 1
     204:	10 e0       	ldi	r17, 0x00	; 0
     206:	1f 82       	std	Y+7, r1	; 0x07
     208:	18 86       	std	Y+8, r1	; 0x08
     20a:	9a 87       	std	Y+10, r25	; 0x0a
     20c:	89 87       	std	Y+9, r24	; 0x09
     20e:	e9 85       	ldd	r30, Y+9	; 0x09
     210:	fa 85       	ldd	r31, Y+10	; 0x0a
     212:	84 81       	ldd	r24, Z+4	; 0x04
     214:	95 81       	ldd	r25, Z+5	; 0x05
     216:	b1 01       	movw	r22, r2
     218:	68 1b       	sub	r22, r24
     21a:	79 0b       	sbc	r23, r25
     21c:	07 2e       	mov	r0, r23
     21e:	00 0c       	add	r0, r0
     220:	88 0b       	sbc	r24, r24
     222:	99 0b       	sbc	r25, r25
     224:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     228:	6b 01       	movw	r12, r22
     22a:	7c 01       	movw	r14, r24
     22c:	e9 85       	ldd	r30, Y+9	; 0x09
     22e:	fa 85       	ldd	r31, Y+10	; 0x0a
     230:	86 81       	ldd	r24, Z+6	; 0x06
     232:	97 81       	ldd	r25, Z+7	; 0x07
     234:	b3 01       	movw	r22, r6
     236:	68 1b       	sub	r22, r24
     238:	79 0b       	sbc	r23, r25
     23a:	07 2e       	mov	r0, r23
     23c:	00 0c       	add	r0, r0
     23e:	88 0b       	sbc	r24, r24
     240:	99 0b       	sbc	r25, r25
     242:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     246:	4b 01       	movw	r8, r22
     248:	5c 01       	movw	r10, r24
     24a:	9b 01       	movw	r18, r22
     24c:	ac 01       	movw	r20, r24
     24e:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     252:	69 83       	std	Y+1, r22	; 0x01
     254:	7a 83       	std	Y+2, r23	; 0x02
     256:	8b 83       	std	Y+3, r24	; 0x03
     258:	9c 83       	std	Y+4, r25	; 0x04
     25a:	a5 01       	movw	r20, r10
     25c:	94 01       	movw	r18, r8
     25e:	c5 01       	movw	r24, r10
     260:	b4 01       	movw	r22, r8
     262:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     266:	4b 01       	movw	r8, r22
     268:	5c 01       	movw	r10, r24
     26a:	a7 01       	movw	r20, r14
     26c:	96 01       	movw	r18, r12
     26e:	c7 01       	movw	r24, r14
     270:	b6 01       	movw	r22, r12
     272:	0e 94 df 0c 	call	0x19be	; 0x19be <__mulsf3>
     276:	9b 01       	movw	r18, r22
     278:	ac 01       	movw	r20, r24
     27a:	c5 01       	movw	r24, r10
     27c:	b4 01       	movw	r22, r8
     27e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__addsf3>
     282:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <sqrt>
     286:	c6 2e       	mov	r12, r22
     288:	d7 2e       	mov	r13, r23
     28a:	e8 2e       	mov	r14, r24
     28c:	f9 2e       	mov	r15, r25
     28e:	2d 81       	ldd	r18, Y+5	; 0x05
     290:	3e 81       	ldd	r19, Y+6	; 0x06
     292:	44 2d       	mov	r20, r4
     294:	55 2d       	mov	r21, r5
     296:	0e 94 bd 0b 	call	0x177a	; 0x177a <__cmpsf2>
     29a:	88 23       	and	r24, r24
     29c:	34 f4       	brge	.+12     	; 0x2aa <indiceMaisProximo+0x164>
     29e:	cd 82       	std	Y+5, r12	; 0x05
     2a0:	de 82       	std	Y+6, r13	; 0x06
     2a2:	4e 2c       	mov	r4, r14
     2a4:	5f 2c       	mov	r5, r15
     2a6:	0f 83       	std	Y+7, r16	; 0x07
     2a8:	18 87       	std	Y+8, r17	; 0x08
     2aa:	0f 5f       	subi	r16, 0xFF	; 255
     2ac:	1f 4f       	sbci	r17, 0xFF	; 255
     2ae:	89 85       	ldd	r24, Y+9	; 0x09
     2b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     2b2:	04 96       	adiw	r24, 0x04	; 4
     2b4:	9a 87       	std	Y+10, r25	; 0x0a
     2b6:	89 87       	std	Y+9, r24	; 0x09
     2b8:	09 30       	cpi	r16, 0x09	; 9
     2ba:	11 05       	cpc	r17, r1
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <indiceMaisProximo+0x17a>
     2be:	a7 cf       	rjmp	.-178    	; 0x20e <indiceMaisProximo+0xc8>
     2c0:	8f 81       	ldd	r24, Y+7	; 0x07
     2c2:	98 85       	ldd	r25, Y+8	; 0x08
     2c4:	2a 96       	adiw	r28, 0x0a	; 10
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	ff 90       	pop	r15
     2da:	ef 90       	pop	r14
     2dc:	df 90       	pop	r13
     2de:	cf 90       	pop	r12
     2e0:	bf 90       	pop	r11
     2e2:	af 90       	pop	r10
     2e4:	9f 90       	pop	r9
     2e6:	8f 90       	pop	r8
     2e8:	7f 90       	pop	r7
     2ea:	6f 90       	pop	r6
     2ec:	5f 90       	pop	r5
     2ee:	4f 90       	pop	r4
     2f0:	3f 90       	pop	r3
     2f2:	2f 90       	pop	r2
     2f4:	08 95       	ret

000002f6 <envia2bytes>:

int difx = 0, dify = 0;

void envia2bytes(char a, char b) {
  // Envia o primeiro byte
  UDR0 = a;
     2f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     2fa:	e0 ec       	ldi	r30, 0xC0	; 192
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 81       	ld	r24, Z
     300:	86 ff       	sbrs	r24, 6
     302:	fd cf       	rjmp	.-6      	; 0x2fe <envia2bytes+0x8>
  UCSR0A |= (1 << TXC0);               // Limpa o flag de transmiss�o
     304:	e0 ec       	ldi	r30, 0xC0	; 192
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	80 64       	ori	r24, 0x40	; 64
     30c:	80 83       	st	Z, r24

  // Envia o segundo byte
  UDR0 = b;
     30e:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     312:	80 81       	ld	r24, Z
     314:	86 ff       	sbrs	r24, 6
     316:	fd cf       	rjmp	.-6      	; 0x312 <envia2bytes+0x1c>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     318:	e0 ec       	ldi	r30, 0xC0	; 192
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 83       	st	Z, r24
     322:	08 95       	ret

00000324 <envia3bytes>:
}

void envia3bytes(char a, char b, char c) {
  // Envia o primeiro byte
  UDR0 = a;
     324:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     328:	e0 ec       	ldi	r30, 0xC0	; 192
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	86 ff       	sbrs	r24, 6
     330:	fd cf       	rjmp	.-6      	; 0x32c <envia3bytes+0x8>
  UCSR0A |= (1 << TXC0);               // Limpa o flag de transmiss�o
     332:	e0 ec       	ldi	r30, 0xC0	; 192
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	80 64       	ori	r24, 0x40	; 64
     33a:	80 83       	st	Z, r24

  // Envia o segundo byte
  UDR0 = b;
     33c:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     340:	80 81       	ld	r24, Z
     342:	86 ff       	sbrs	r24, 6
     344:	fd cf       	rjmp	.-6      	; 0x340 <envia3bytes+0x1c>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     346:	e0 ec       	ldi	r30, 0xC0	; 192
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 81       	ld	r24, Z
     34c:	80 64       	ori	r24, 0x40	; 64
     34e:	80 83       	st	Z, r24

  // Envia o segundo byte
  UDR0 = c;
     350:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     354:	80 81       	ld	r24, Z
     356:	86 ff       	sbrs	r24, 6
     358:	fd cf       	rjmp	.-6      	; 0x354 <envia3bytes+0x30>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     35a:	e0 ec       	ldi	r30, 0xC0	; 192
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	80 64       	ori	r24, 0x40	; 64
     362:	80 83       	st	Z, r24
     364:	08 95       	ret

00000366 <enviamov>:
}

void enviamov(int a) {
  // Envia o primeiro byte
  UDR0 = 'U';
     366:	95 e5       	ldi	r25, 0x55	; 85
     368:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     36c:	e0 ec       	ldi	r30, 0xC0	; 192
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	90 81       	ld	r25, Z
     372:	96 ff       	sbrs	r25, 6
     374:	fd cf       	rjmp	.-6      	; 0x370 <enviamov+0xa>
  UCSR0A |= (1 << TXC0);               // Limpa o flag de transmiss�o
     376:	e0 ec       	ldi	r30, 0xC0	; 192
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	90 81       	ld	r25, Z
     37c:	90 64       	ori	r25, 0x40	; 64
     37e:	90 83       	st	Z, r25

  // Envia o segundo byte
  UDR0 = 'M';
     380:	9d e4       	ldi	r25, 0x4D	; 77
     382:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     386:	90 81       	ld	r25, Z
     388:	96 ff       	sbrs	r25, 6
     38a:	fd cf       	rjmp	.-6      	; 0x386 <enviamov+0x20>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     38c:	e0 ec       	ldi	r30, 0xC0	; 192
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	90 81       	ld	r25, Z
     392:	90 64       	ori	r25, 0x40	; 64
     394:	90 83       	st	Z, r25

  UDR0 = a;
     396:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     39a:	80 81       	ld	r24, Z
     39c:	86 ff       	sbrs	r24, 6
     39e:	fd cf       	rjmp	.-6      	; 0x39a <enviamov+0x34>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     3a0:	e0 ec       	ldi	r30, 0xC0	; 192
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	80 64       	ori	r24, 0x40	; 64
     3a8:	80 83       	st	Z, r24
     3aa:	08 95       	ret

000003ac <uart_init>:
}

void uart_init() {
  // Configura UART para 19200 bps, 8N1 @ 16 MHz
  UBRR0H = 0;
     3ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
  UBRR0L = 51;
     3b0:	83 e3       	ldi	r24, 0x33	; 51
     3b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); // RX, TX e interrup��o RX habilitados
     3b6:	88 e9       	ldi	r24, 0x98	; 152
     3b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     3bc:	86 e0       	ldi	r24, 0x06	; 6
     3be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     3c2:	08 95       	ret

000003c4 <pos_x_y>:
}

void pos_x_y() {
  x = ((unsigned int)posx_entregador[0] << 8) | posx_entregador[1];
     3c4:	ed eb       	ldi	r30, 0xBD	; 189
     3c6:	f3 e0       	ldi	r31, 0x03	; 3
     3c8:	80 81       	ld	r24, Z
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	98 2f       	mov	r25, r24
     3ce:	88 27       	eor	r24, r24
     3d0:	21 81       	ldd	r18, Z+1	; 0x01
     3d2:	82 2b       	or	r24, r18
     3d4:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <x+0x1>
     3d8:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <x>
  y = ((unsigned int)posy_entregador[0] << 8) | posy_entregador[1];
     3dc:	e0 ed       	ldi	r30, 0xD0	; 208
     3de:	f3 e0       	ldi	r31, 0x03	; 3
     3e0:	20 81       	ld	r18, Z
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	32 2f       	mov	r19, r18
     3e6:	22 27       	eor	r18, r18
     3e8:	41 81       	ldd	r20, Z+1	; 0x01
     3ea:	24 2b       	or	r18, r20
     3ec:	30 93 a4 03 	sts	0x03A4, r19	; 0x8003a4 <y+0x1>
     3f0:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <y>

  x_coleta = ((unsigned int)posx_coleta[0] << 8) | posx_coleta[1];
     3f4:	ea ec       	ldi	r30, 0xCA	; 202
     3f6:	f3 e0       	ldi	r31, 0x03	; 3
     3f8:	40 81       	ld	r20, Z
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	54 2f       	mov	r21, r20
     3fe:	44 27       	eor	r20, r20
     400:	61 81       	ldd	r22, Z+1	; 0x01
     402:	46 2b       	or	r20, r22
     404:	50 93 a2 03 	sts	0x03A2, r21	; 0x8003a2 <x_coleta+0x1>
     408:	40 93 a1 03 	sts	0x03A1, r20	; 0x8003a1 <x_coleta>
  y_coleta = ((unsigned int)posy_coleta[0] << 8) | posy_coleta[1];
     40c:	e8 ec       	ldi	r30, 0xC8	; 200
     40e:	f3 e0       	ldi	r31, 0x03	; 3
     410:	60 81       	ld	r22, Z
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	76 2f       	mov	r23, r22
     416:	66 27       	eor	r22, r22
     418:	e1 81       	ldd	r30, Z+1	; 0x01
     41a:	6e 2b       	or	r22, r30
     41c:	70 93 a0 03 	sts	0x03A0, r23	; 0x8003a0 <y_coleta+0x1>
     420:	60 93 9f 03 	sts	0x039F, r22	; 0x80039f <y_coleta>

  x_entrega = ((unsigned int)posx_entrega[0] << 8) | posx_entrega[1];
     424:	a4 ec       	ldi	r26, 0xC4	; 196
     426:	b3 e0       	ldi	r27, 0x03	; 3
     428:	ec 91       	ld	r30, X
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	fe 2f       	mov	r31, r30
     42e:	ee 27       	eor	r30, r30
     430:	11 96       	adiw	r26, 0x01	; 1
     432:	ac 91       	ld	r26, X
     434:	ea 2b       	or	r30, r26
     436:	f0 93 9e 03 	sts	0x039E, r31	; 0x80039e <x_entrega+0x1>
     43a:	e0 93 9d 03 	sts	0x039D, r30	; 0x80039d <x_entrega>
  y_entrega = ((unsigned int)posy_entrega[0] << 8) | posy_entrega[1];
     43e:	a9 eb       	ldi	r26, 0xB9	; 185
     440:	b3 e0       	ldi	r27, 0x03	; 3
     442:	ec 91       	ld	r30, X
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	fe 2f       	mov	r31, r30
     448:	ee 27       	eor	r30, r30
     44a:	11 96       	adiw	r26, 0x01	; 1
     44c:	ac 91       	ld	r26, X
     44e:	ea 2b       	or	r30, r26
     450:	f0 93 9c 03 	sts	0x039C, r31	; 0x80039c <y_entrega+0x1>
     454:	e0 93 9b 03 	sts	0x039B, r30	; 0x80039b <y_entrega>

  if (((x - x_coleta) <= 80) && ((y - y_coleta) <= 80) && entra_uma_vez_1) { // entra_uma_vez regula a entrada no offset
     458:	84 1b       	sub	r24, r20
     45a:	95 0b       	sbc	r25, r21
     45c:	81 35       	cpi	r24, 0x51	; 81
     45e:	91 05       	cpc	r25, r1
     460:	d8 f4       	brcc	.+54     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     462:	26 1b       	sub	r18, r22
     464:	37 0b       	sbc	r19, r23
     466:	21 35       	cpi	r18, 0x51	; 81
     468:	31 05       	cpc	r19, r1
     46a:	b0 f4       	brcc	.+44     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     46c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <entra_uma_vez_1>
     470:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <entra_uma_vez_1+0x1>
     474:	89 2b       	or	r24, r25
     476:	81 f0       	breq	.+32     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
    envia3bytes('U', 'I', id_cliente);
     478:	40 91 a8 03 	lds	r20, 0x03A8	; 0x8003a8 <id_cliente>
     47c:	69 e4       	ldi	r22, 0x49	; 73
     47e:	85 e5       	ldi	r24, 0x55	; 85
     480:	51 df       	rcall	.-350    	; 0x324 <envia3bytes>
    pedido_coletado = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <pedido_coletado+0x1>
     48a:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <pedido_coletado>
    entra_uma_vez_1 = 0;
     48e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <entra_uma_vez_1+0x1>
     492:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <entra_uma_vez_1>
    enviamov(1);
     496:	67 df       	rcall	.-306    	; 0x366 <enviamov>
  }

  if (((x - x_entrega) <= 100) && ((y - y_entrega) <= 100) &&
     498:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <x>
     49c:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <x+0x1>
     4a0:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <x_entrega>
     4a4:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <x_entrega+0x1>
     4a8:	82 1b       	sub	r24, r18
     4aa:	93 0b       	sbc	r25, r19
     4ac:	85 36       	cpi	r24, 0x65	; 101
     4ae:	91 05       	cpc	r25, r1
     4b0:	18 f5       	brcc	.+70     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4b2:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     4b6:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     4ba:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <y_entrega>
     4be:	30 91 9c 03 	lds	r19, 0x039C	; 0x80039c <y_entrega+0x1>
     4c2:	82 1b       	sub	r24, r18
     4c4:	93 0b       	sbc	r25, r19
     4c6:	85 36       	cpi	r24, 0x65	; 101
     4c8:	91 05       	cpc	r25, r1
     4ca:	b0 f4       	brcc	.+44     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4cc:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <pedido_coletado_1>
     4d0:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <pedido_coletado_1+0x1>
     4d4:	89 2b       	or	r24, r25
     4d6:	81 f0       	breq	.+32     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
      pedido_coletado_1) { // colocar flag de finaliza��o para evitar loops
    envia3bytes('U', 'F', id_cliente);
     4d8:	40 91 a8 03 	lds	r20, 0x03A8	; 0x8003a8 <id_cliente>
     4dc:	66 e4       	ldi	r22, 0x46	; 70
     4de:	85 e5       	ldi	r24, 0x55	; 85
     4e0:	21 df       	rcall	.-446    	; 0x324 <envia3bytes>
    pedido_coletado_1 = 0;
     4e2:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <pedido_coletado_1+0x1>
     4e6:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <pedido_coletado_1>
    pedido_entregue = 1;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <pedido_entregue+0x1>
     4f2:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <pedido_entregue>
    enviamov(1);
     4f6:	37 cf       	rjmp	.-402    	; 0x366 <enviamov>
     4f8:	08 95       	ret

000004fa <esq_proxima>:
  }
}

void esq_proxima() {
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
  pos_x_y();
     4fe:	62 df       	rcall	.-316    	; 0x3c4 <pos_x_y>

  indice = indiceMaisProximo(x, y);
     500:	c0 91 a5 03 	lds	r28, 0x03A5	; 0x8003a5 <x>
     504:	d0 91 a6 03 	lds	r29, 0x03A6	; 0x8003a6 <x+0x1>
     508:	60 91 a3 03 	lds	r22, 0x03A3	; 0x8003a3 <y>
     50c:	70 91 a4 03 	lds	r23, 0x03A4	; 0x8003a4 <y+0x1>
     510:	ce 01       	movw	r24, r28
     512:	19 de       	rcall	.-974    	; 0x146 <indiceMaisProximo>
     514:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <indice+0x1>
     518:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <indice>
  dif_x_entregador = abs(esquinas[indice][0] - x);
     51c:	fc 01       	movw	r30, r24
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	e0 50       	subi	r30, 0x00	; 0
     528:	fe 4f       	sbci	r31, 0xFE	; 254
     52a:	40 81       	ld	r20, Z
     52c:	51 81       	ldd	r21, Z+1	; 0x01
     52e:	ba 01       	movw	r22, r20
     530:	6c 1b       	sub	r22, r28
     532:	7d 0b       	sbc	r23, r29
     534:	9b 01       	movw	r18, r22
     536:	22 f4       	brpl	.+8      	; 0x540 <esq_proxima+0x46>
     538:	22 27       	eor	r18, r18
     53a:	33 27       	eor	r19, r19
     53c:	26 1b       	sub	r18, r22
     53e:	37 0b       	sbc	r19, r23
     540:	30 93 98 03 	sts	0x0398, r19	; 0x800398 <dif_x_entregador+0x1>
     544:	20 93 97 03 	sts	0x0397, r18	; 0x800397 <dif_x_entregador>
  // dif_y_entregador = abs (esquinas[indice][1] - y);
  esq_x_entregador = esquinas[indice][0];
     548:	50 93 92 03 	sts	0x0392, r21	; 0x800392 <esq_x_entregador+0x1>
     54c:	40 93 91 03 	sts	0x0391, r20	; 0x800391 <esq_x_entregador>
  esq_y_entregador = esquinas[indice][1];
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	fc 01       	movw	r30, r24
     55a:	e0 50       	subi	r30, 0x00	; 0
     55c:	fe 4f       	sbci	r31, 0xFE	; 254
     55e:	82 81       	ldd	r24, Z+2	; 0x02
     560:	93 81       	ldd	r25, Z+3	; 0x03
     562:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <esq_y_entregador+0x1>
     566:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <esq_y_entregador>

  indice = indiceMaisProximo(x_coleta, y_coleta);
     56a:	c0 91 a1 03 	lds	r28, 0x03A1	; 0x8003a1 <x_coleta>
     56e:	d0 91 a2 03 	lds	r29, 0x03A2	; 0x8003a2 <x_coleta+0x1>
     572:	60 91 9f 03 	lds	r22, 0x039F	; 0x80039f <y_coleta>
     576:	70 91 a0 03 	lds	r23, 0x03A0	; 0x8003a0 <y_coleta+0x1>
     57a:	ce 01       	movw	r24, r28
     57c:	e4 dd       	rcall	.-1080   	; 0x146 <indiceMaisProximo>
     57e:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <indice+0x1>
     582:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <indice>
  dif_x_coleta = abs(esquinas[indice][0] - x_coleta);
     586:	fc 01       	movw	r30, r24
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	e0 50       	subi	r30, 0x00	; 0
     592:	fe 4f       	sbci	r31, 0xFE	; 254
     594:	40 81       	ld	r20, Z
     596:	51 81       	ldd	r21, Z+1	; 0x01
     598:	ba 01       	movw	r22, r20
     59a:	6c 1b       	sub	r22, r28
     59c:	7d 0b       	sbc	r23, r29
     59e:	9b 01       	movw	r18, r22
     5a0:	22 f4       	brpl	.+8      	; 0x5aa <esq_proxima+0xb0>
     5a2:	22 27       	eor	r18, r18
     5a4:	33 27       	eor	r19, r19
     5a6:	26 1b       	sub	r18, r22
     5a8:	37 0b       	sbc	r19, r23
     5aa:	30 93 96 03 	sts	0x0396, r19	; 0x800396 <dif_x_coleta+0x1>
     5ae:	20 93 95 03 	sts	0x0395, r18	; 0x800395 <dif_x_coleta>
  // dif_y_coleta = abs (esquinas[indice][1] - y_coleta);
  esq_x_coleta = esquinas[indice][0];
     5b2:	50 93 8e 03 	sts	0x038E, r21	; 0x80038e <esq_x_coleta+0x1>
     5b6:	40 93 8d 03 	sts	0x038D, r20	; 0x80038d <esq_x_coleta>
  esq_y_coleta = esquinas[indice][1];
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	fc 01       	movw	r30, r24
     5c4:	e0 50       	subi	r30, 0x00	; 0
     5c6:	fe 4f       	sbci	r31, 0xFE	; 254
     5c8:	82 81       	ldd	r24, Z+2	; 0x02
     5ca:	93 81       	ldd	r25, Z+3	; 0x03
     5cc:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <esq_y_coleta+0x1>
     5d0:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <esq_y_coleta>

  indice = indiceMaisProximo(x_entrega, y_entrega);
     5d4:	c0 91 9d 03 	lds	r28, 0x039D	; 0x80039d <x_entrega>
     5d8:	d0 91 9e 03 	lds	r29, 0x039E	; 0x80039e <x_entrega+0x1>
     5dc:	60 91 9b 03 	lds	r22, 0x039B	; 0x80039b <y_entrega>
     5e0:	70 91 9c 03 	lds	r23, 0x039C	; 0x80039c <y_entrega+0x1>
     5e4:	ce 01       	movw	r24, r28
     5e6:	af dd       	rcall	.-1186   	; 0x146 <indiceMaisProximo>
     5e8:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <indice+0x1>
     5ec:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <indice>
  dif_x_entrega = abs(esquinas[indice][0] - x_entrega);
     5f0:	fc 01       	movw	r30, r24
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	ee 0f       	add	r30, r30
     5f8:	ff 1f       	adc	r31, r31
     5fa:	e0 50       	subi	r30, 0x00	; 0
     5fc:	fe 4f       	sbci	r31, 0xFE	; 254
     5fe:	40 81       	ld	r20, Z
     600:	51 81       	ldd	r21, Z+1	; 0x01
     602:	ba 01       	movw	r22, r20
     604:	6c 1b       	sub	r22, r28
     606:	7d 0b       	sbc	r23, r29
     608:	9b 01       	movw	r18, r22
     60a:	22 f4       	brpl	.+8      	; 0x614 <esq_proxima+0x11a>
     60c:	22 27       	eor	r18, r18
     60e:	33 27       	eor	r19, r19
     610:	26 1b       	sub	r18, r22
     612:	37 0b       	sbc	r19, r23
     614:	30 93 94 03 	sts	0x0394, r19	; 0x800394 <dif_x_entrega+0x1>
     618:	20 93 93 03 	sts	0x0393, r18	; 0x800393 <dif_x_entrega>
  // dif_y_entrega = abs (esquinas[indice][1] - y_entrega);
  esq_x_entrega = esquinas[indice][0];
     61c:	50 93 8a 03 	sts	0x038A, r21	; 0x80038a <esq_x_entrega+0x1>
     620:	40 93 89 03 	sts	0x0389, r20	; 0x800389 <esq_x_entrega>
  esq_y_entrega = esquinas[indice][1];
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	fc 01       	movw	r30, r24
     62e:	e0 50       	subi	r30, 0x00	; 0
     630:	fe 4f       	sbci	r31, 0xFE	; 254
     632:	82 81       	ldd	r24, Z+2	; 0x02
     634:	93 81       	ldd	r25, Z+3	; 0x03
     636:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <esq_y_entrega+0x1>
     63a:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <esq_y_entrega>
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <direcoes>:

void direcoes(int a, int b) { // Calculo das distancias envolvidas e dire��o do motoqueiro
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	00 d0       	rcall	.+0      	; 0x64e <direcoes+0xa>
     64e:	1f 92       	push	r1
     650:	1f 92       	push	r1
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	8b 01       	movw	r16, r22
  habilita_dir_teclado = 1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <habilita_dir_teclado+0x1>
     660:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <habilita_dir_teclado>
  char disty[5];

  pos_x_y();
     664:	af de       	rcall	.-674    	; 0x3c4 <pos_x_y>
  esq_proxima();
     666:	49 df       	rcall	.-366    	; 0x4fa <esq_proxima>
     668:	01 2b       	or	r16, r17

  if (b) {
     66a:	09 f4       	brne	.+2      	; 0x66e <direcoes+0x2a>
     66c:	97 c1       	rjmp	.+814    	; 0x99c <direcoes+0x358>
     66e:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <estados_1>
    switch (estados_1) {
     672:	8e 2f       	mov	r24, r30
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	fc 01       	movw	r30, r24
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	e8 30       	cpi	r30, 0x08	; 8
     67c:	f1 05       	cpc	r31, r1
     67e:	08 f0       	brcs	.+2      	; 0x682 <direcoes+0x3e>
     680:	8d c1       	rjmp	.+794    	; 0x99c <direcoes+0x358>
     682:	88 27       	eor	r24, r24
     684:	ee 58       	subi	r30, 0x8E	; 142
     686:	ff 4f       	sbci	r31, 0xFF	; 255
     688:	8f 4f       	sbci	r24, 0xFF	; 255
     68a:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__tablejump2__>
    case 1:
      LCD_Clear();
     68e:	53 d5       	rcall	.+2726   	; 0x1136 <LCD_Clear>
      LCD_String("Siga reto por:");
     690:	8c e4       	ldi	r24, 0x4C	; 76
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	29 d5       	rcall	.+2642   	; 0x10e8 <LCD_String>
      LCD_Command(0xC0);
     696:	80 ec       	ldi	r24, 0xC0	; 192
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	02 d5       	rcall	.+2564   	; 0x10a0 <LCD_Command>
     69c:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <esq_y_coleta>
      sprintf(disty, "%d", abs(esq_y_coleta - y));
     6a0:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <esq_y_coleta+0x1>
     6a4:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     6a8:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     6ac:	28 1b       	sub	r18, r24
     6ae:	39 0b       	sbc	r19, r25
     6b0:	c9 01       	movw	r24, r18
     6b2:	99 23       	and	r25, r25
     6b4:	24 f4       	brge	.+8      	; 0x6be <direcoes+0x7a>
     6b6:	88 27       	eor	r24, r24
     6b8:	99 27       	eor	r25, r25
     6ba:	82 1b       	sub	r24, r18
     6bc:	93 0b       	sbc	r25, r19
     6be:	9f 93       	push	r25
     6c0:	8f 93       	push	r24
     6c2:	8b e5       	ldi	r24, 0x5B	; 91
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	9f 93       	push	r25
     6c8:	8f 93       	push	r24
     6ca:	8e 01       	movw	r16, r28
     6cc:	0f 5f       	subi	r16, 0xFF	; 255
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	1f 93       	push	r17
     6d2:	0f 93       	push	r16
     6d4:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <sprintf>
      LCD_String(disty);
     6d8:	c8 01       	movw	r24, r16
     6da:	06 d5       	rcall	.+2572   	; 0x10e8 <LCD_String>
     6dc:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String("m");
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	03 d5       	rcall	.+2566   	; 0x10e8 <LCD_String>
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
      break;
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	56 c1       	rjmp	.+684    	; 0x99c <direcoes+0x358>

    case 2:
      LCD_Clear();
     6f0:	22 d5       	rcall	.+2628   	; 0x1136 <LCD_Clear>
     6f2:	8c e4       	ldi	r24, 0x4C	; 76
      LCD_String("Siga reto por:");
     6f4:	92 e0       	ldi	r25, 0x02	; 2
     6f6:	f8 d4       	rcall	.+2544   	; 0x10e8 <LCD_String>
     6f8:	80 ec       	ldi	r24, 0xC0	; 192
     6fa:	90 e0       	ldi	r25, 0x00	; 0
      LCD_Command(0xC0);
     6fc:	d1 d4       	rcall	.+2466   	; 0x10a0 <LCD_Command>
     6fe:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <esq_x_coleta>
     702:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <esq_x_coleta+0x1>
      sprintf(disty, "%d", (abs(esq_x_coleta - x)));
     706:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <x>
     70a:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <x+0x1>
     70e:	28 1b       	sub	r18, r24
     710:	39 0b       	sbc	r19, r25
     712:	c9 01       	movw	r24, r18
     714:	99 23       	and	r25, r25
     716:	24 f4       	brge	.+8      	; 0x720 <direcoes+0xdc>
     718:	88 27       	eor	r24, r24
     71a:	99 27       	eor	r25, r25
     71c:	82 1b       	sub	r24, r18
     71e:	93 0b       	sbc	r25, r19
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	8b e5       	ldi	r24, 0x5B	; 91
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	8e 01       	movw	r16, r28
     72e:	0f 5f       	subi	r16, 0xFF	; 255
     730:	1f 4f       	sbci	r17, 0xFF	; 255
     732:	1f 93       	push	r17
     734:	0f 93       	push	r16
     736:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <sprintf>
     73a:	c8 01       	movw	r24, r16
      LCD_String(disty);
     73c:	d5 d4       	rcall	.+2474   	; 0x10e8 <LCD_String>
     73e:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String("m");
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	d2 d4       	rcall	.+2468   	; 0x10e8 <LCD_String>
     744:	0f 90       	pop	r0
      break;
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	25 c1       	rjmp	.+586    	; 0x99c <direcoes+0x358>

    case 3:
      LCD_Clear();
     752:	f1 d4       	rcall	.+2530   	; 0x1136 <LCD_Clear>
     754:	8c e4       	ldi	r24, 0x4C	; 76
      LCD_String("Siga reto por:");
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	c7 d4       	rcall	.+2446   	; 0x10e8 <LCD_String>
     75a:	80 ec       	ldi	r24, 0xC0	; 192
     75c:	90 e0       	ldi	r25, 0x00	; 0
      LCD_Command(0xC0);
     75e:	a0 d4       	rcall	.+2368   	; 0x10a0 <LCD_Command>
     760:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <esq_y_entrega>
     764:	30 91 88 03 	lds	r19, 0x0388	; 0x800388 <esq_y_entrega+0x1>
      sprintf(disty, "%d", abs(esq_y_entrega - y));
     768:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     76c:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     770:	28 1b       	sub	r18, r24
     772:	39 0b       	sbc	r19, r25
     774:	c9 01       	movw	r24, r18
     776:	99 23       	and	r25, r25
     778:	24 f4       	brge	.+8      	; 0x782 <direcoes+0x13e>
     77a:	88 27       	eor	r24, r24
     77c:	99 27       	eor	r25, r25
     77e:	82 1b       	sub	r24, r18
     780:	93 0b       	sbc	r25, r19
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	8b e5       	ldi	r24, 0x5B	; 91
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	8e 01       	movw	r16, r28
     790:	0f 5f       	subi	r16, 0xFF	; 255
     792:	1f 4f       	sbci	r17, 0xFF	; 255
     794:	1f 93       	push	r17
     796:	0f 93       	push	r16
     798:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <sprintf>
      LCD_String(disty);
     79c:	c8 01       	movw	r24, r16
     79e:	a4 d4       	rcall	.+2376   	; 0x10e8 <LCD_String>
      LCD_String("m");
     7a0:	8e e5       	ldi	r24, 0x5E	; 94
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	a1 d4       	rcall	.+2370   	; 0x10e8 <LCD_String>
      break;
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	f4 c0       	rjmp	.+488    	; 0x99c <direcoes+0x358>

    case 4:
      LCD_Clear();
     7b4:	c0 d4       	rcall	.+2432   	; 0x1136 <LCD_Clear>
     7b6:	8c e4       	ldi	r24, 0x4C	; 76
      LCD_String("Siga reto por:");
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	96 d4       	rcall	.+2348   	; 0x10e8 <LCD_String>
     7bc:	80 ec       	ldi	r24, 0xC0	; 192
     7be:	90 e0       	ldi	r25, 0x00	; 0
      LCD_Command(0xC0);
     7c0:	6f d4       	rcall	.+2270   	; 0x10a0 <LCD_Command>
     7c2:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <esq_x_entrega>
     7c6:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <esq_x_entrega+0x1>
      sprintf(disty, "%d", (abs(esq_x_entrega - x)));
     7ca:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <x>
     7ce:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <x+0x1>
     7d2:	28 1b       	sub	r18, r24
     7d4:	39 0b       	sbc	r19, r25
     7d6:	c9 01       	movw	r24, r18
     7d8:	99 23       	and	r25, r25
     7da:	24 f4       	brge	.+8      	; 0x7e4 <direcoes+0x1a0>
     7dc:	88 27       	eor	r24, r24
     7de:	99 27       	eor	r25, r25
     7e0:	82 1b       	sub	r24, r18
     7e2:	93 0b       	sbc	r25, r19
     7e4:	9f 93       	push	r25
     7e6:	8f 93       	push	r24
     7e8:	8b e5       	ldi	r24, 0x5B	; 91
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	9f 93       	push	r25
     7ee:	8f 93       	push	r24
     7f0:	8e 01       	movw	r16, r28
     7f2:	0f 5f       	subi	r16, 0xFF	; 255
     7f4:	1f 4f       	sbci	r17, 0xFF	; 255
     7f6:	1f 93       	push	r17
     7f8:	0f 93       	push	r16
     7fa:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <sprintf>
      LCD_String(disty);
     7fe:	c8 01       	movw	r24, r16
     800:	73 d4       	rcall	.+2278   	; 0x10e8 <LCD_String>
      LCD_String("m");
     802:	8e e5       	ldi	r24, 0x5E	; 94
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	70 d4       	rcall	.+2272   	; 0x10e8 <LCD_String>
     808:	0f 90       	pop	r0
      break;
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	c3 c0       	rjmp	.+390    	; 0x99c <direcoes+0x358>
     816:	8f d4       	rcall	.+2334   	; 0x1136 <LCD_Clear>

    case 5:
      LCD_Clear();
     818:	8c e4       	ldi	r24, 0x4C	; 76
     81a:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Siga reto por:");
     81c:	65 d4       	rcall	.+2250   	; 0x10e8 <LCD_String>
     81e:	80 ec       	ldi	r24, 0xC0	; 192
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	3e d4       	rcall	.+2172   	; 0x10a0 <LCD_Command>
      LCD_Command(0xC0);
     824:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <x_entrega>
     828:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <x_entrega+0x1>
      sprintf(disty, "%d", abs(x_entrega - x));
     82c:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <x>
     830:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <x+0x1>
     834:	28 1b       	sub	r18, r24
     836:	39 0b       	sbc	r19, r25
     838:	c9 01       	movw	r24, r18
     83a:	99 23       	and	r25, r25
     83c:	24 f4       	brge	.+8      	; 0x846 <direcoes+0x202>
     83e:	88 27       	eor	r24, r24
     840:	99 27       	eor	r25, r25
     842:	82 1b       	sub	r24, r18
     844:	93 0b       	sbc	r25, r19
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	8b e5       	ldi	r24, 0x5B	; 91
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	8e 01       	movw	r16, r28
     854:	0f 5f       	subi	r16, 0xFF	; 255
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	1f 93       	push	r17
     85a:	0f 93       	push	r16
     85c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <sprintf>
      LCD_String(disty);
     860:	c8 01       	movw	r24, r16
     862:	42 d4       	rcall	.+2180   	; 0x10e8 <LCD_String>
      LCD_String("m");
     864:	8e e5       	ldi	r24, 0x5E	; 94
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	3f d4       	rcall	.+2174   	; 0x10e8 <LCD_String>
     86a:	0f 90       	pop	r0
      break;
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	92 c0       	rjmp	.+292    	; 0x99c <direcoes+0x358>
     878:	5e d4       	rcall	.+2236   	; 0x1136 <LCD_Clear>

    case 6:
      LCD_Clear();
     87a:	8c e4       	ldi	r24, 0x4C	; 76
     87c:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Siga reto por:");
     87e:	34 d4       	rcall	.+2152   	; 0x10e8 <LCD_String>
     880:	80 ec       	ldi	r24, 0xC0	; 192
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0d d4       	rcall	.+2074   	; 0x10a0 <LCD_Command>
      LCD_Command(0xC0);
     886:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <y_entrega>
     88a:	30 91 9c 03 	lds	r19, 0x039C	; 0x80039c <y_entrega+0x1>
      sprintf(disty, "%d", (abs(y_entrega - y)));
     88e:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     892:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     896:	28 1b       	sub	r18, r24
     898:	39 0b       	sbc	r19, r25
     89a:	c9 01       	movw	r24, r18
     89c:	99 23       	and	r25, r25
     89e:	24 f4       	brge	.+8      	; 0x8a8 <direcoes+0x264>
     8a0:	88 27       	eor	r24, r24
     8a2:	99 27       	eor	r25, r25
     8a4:	82 1b       	sub	r24, r18
     8a6:	93 0b       	sbc	r25, r19
     8a8:	9f 93       	push	r25
     8aa:	8f 93       	push	r24
     8ac:	8b e5       	ldi	r24, 0x5B	; 91
     8ae:	92 e0       	ldi	r25, 0x02	; 2
     8b0:	9f 93       	push	r25
     8b2:	8f 93       	push	r24
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5f       	subi	r16, 0xFF	; 255
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	1f 93       	push	r17
     8bc:	0f 93       	push	r16
     8be:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <sprintf>
      LCD_String(disty);
     8c2:	c8 01       	movw	r24, r16
     8c4:	11 d4       	rcall	.+2082   	; 0x10e8 <LCD_String>
      LCD_String("m");
     8c6:	8e e5       	ldi	r24, 0x5E	; 94
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	0e d4       	rcall	.+2076   	; 0x10e8 <LCD_String>
     8cc:	0f 90       	pop	r0
      break;
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	61 c0       	rjmp	.+194    	; 0x99c <direcoes+0x358>
     8da:	2d d4       	rcall	.+2138   	; 0x1136 <LCD_Clear>

    case 7:
      LCD_Clear();
     8dc:	8c e4       	ldi	r24, 0x4C	; 76
     8de:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Siga reto por:");
     8e0:	03 d4       	rcall	.+2054   	; 0x10e8 <LCD_String>
     8e2:	80 ec       	ldi	r24, 0xC0	; 192
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	dc d3       	rcall	.+1976   	; 0x10a0 <LCD_Command>
      LCD_Command(0xC0);
     8e8:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <x_coleta>
     8ec:	30 91 a2 03 	lds	r19, 0x03A2	; 0x8003a2 <x_coleta+0x1>
      sprintf(disty, "%d", abs(x_coleta - x));
     8f0:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <x>
     8f4:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <x+0x1>
     8f8:	28 1b       	sub	r18, r24
     8fa:	39 0b       	sbc	r19, r25
     8fc:	c9 01       	movw	r24, r18
     8fe:	99 23       	and	r25, r25
     900:	24 f4       	brge	.+8      	; 0x90a <direcoes+0x2c6>
     902:	88 27       	eor	r24, r24
     904:	99 27       	eor	r25, r25
     906:	82 1b       	sub	r24, r18
     908:	93 0b       	sbc	r25, r19
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	8b e5       	ldi	r24, 0x5B	; 91
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	9f 93       	push	r25
     914:	8f 93       	push	r24
     916:	8e 01       	movw	r16, r28
     918:	0f 5f       	subi	r16, 0xFF	; 255
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
     91c:	1f 93       	push	r17
     91e:	0f 93       	push	r16
     920:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <sprintf>
      LCD_String(disty);
     924:	c8 01       	movw	r24, r16
     926:	e0 d3       	rcall	.+1984   	; 0x10e8 <LCD_String>
     928:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String("m");
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	dd d3       	rcall	.+1978   	; 0x10e8 <LCD_String>
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
      break;
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	30 c0       	rjmp	.+96     	; 0x99c <direcoes+0x358>
     93c:	fc d3       	rcall	.+2040   	; 0x1136 <LCD_Clear>
     93e:	8c e4       	ldi	r24, 0x4C	; 76

    case 8:
      LCD_Clear();
     940:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Siga reto por:");
     942:	d2 d3       	rcall	.+1956   	; 0x10e8 <LCD_String>
     944:	80 ec       	ldi	r24, 0xC0	; 192
     946:	90 e0       	ldi	r25, 0x00	; 0
      LCD_Command(0xC0);
     948:	ab d3       	rcall	.+1878   	; 0x10a0 <LCD_Command>
     94a:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <y_coleta>
     94e:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <y_coleta+0x1>
      sprintf(disty, "%d", (abs(y_coleta - y)));
     952:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     956:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     95a:	28 1b       	sub	r18, r24
     95c:	39 0b       	sbc	r19, r25
     95e:	c9 01       	movw	r24, r18
     960:	99 23       	and	r25, r25
     962:	24 f4       	brge	.+8      	; 0x96c <direcoes+0x328>
     964:	88 27       	eor	r24, r24
     966:	99 27       	eor	r25, r25
     968:	82 1b       	sub	r24, r18
     96a:	93 0b       	sbc	r25, r19
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	8b e5       	ldi	r24, 0x5B	; 91
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	9f 93       	push	r25
     976:	8f 93       	push	r24
     978:	8e 01       	movw	r16, r28
     97a:	0f 5f       	subi	r16, 0xFF	; 255
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	1f 93       	push	r17
     980:	0f 93       	push	r16
     982:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <sprintf>
     986:	c8 01       	movw	r24, r16
     988:	af d3       	rcall	.+1886   	; 0x10e8 <LCD_String>
     98a:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String(disty);
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	ac d3       	rcall	.+1880   	; 0x10e8 <LCD_String>
     990:	0f 90       	pop	r0
      LCD_String("m");
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
      break;
     99a:	0f 90       	pop	r0
     99c:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <y>
     9a0:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <y+0x1>
     9a4:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <esq_y_coleta>
    }
  }

  if ((abs(esq_y_coleta - y) <= 30) && !pedido_coletado && (abs(x - x_coleta) >= 50)) {
     9a8:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <esq_y_coleta+0x1>
     9ac:	82 1b       	sub	r24, r18
     9ae:	93 0b       	sbc	r25, r19
     9b0:	82 3e       	cpi	r24, 0xE2	; 226
     9b2:	4f ef       	ldi	r20, 0xFF	; 255
     9b4:	94 07       	cpc	r25, r20
     9b6:	a4 f1       	brlt	.+104    	; 0xa20 <direcoes+0x3dc>
     9b8:	4f 97       	sbiw	r24, 0x1f	; 31
     9ba:	94 f5       	brge	.+100    	; 0xa20 <direcoes+0x3dc>
     9bc:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <pedido_coletado>
     9c0:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <pedido_coletado+0x1>
     9c4:	89 2b       	or	r24, r25
     9c6:	61 f5       	brne	.+88     	; 0xa20 <direcoes+0x3dc>
     9c8:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <x>
     9cc:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <x+0x1>
     9d0:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <x_coleta>
     9d4:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <x_coleta+0x1>
     9d8:	84 1b       	sub	r24, r20
     9da:	95 0b       	sbc	r25, r21
     9dc:	ac 01       	movw	r20, r24
     9de:	22 f4       	brpl	.+8      	; 0x9e8 <direcoes+0x3a4>
     9e0:	44 27       	eor	r20, r20
     9e2:	55 27       	eor	r21, r21
     9e4:	48 1b       	sub	r20, r24
     9e6:	59 0b       	sbc	r21, r25
     9e8:	42 33       	cpi	r20, 0x32	; 50
     9ea:	51 05       	cpc	r21, r1
     9ec:	cc f0       	brlt	.+50     	; 0xa20 <direcoes+0x3dc>
     9ee:	87 e0       	ldi	r24, 0x07	; 7
    estados_1 = 7;
     9f0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <estados_1>
     9f4:	a0 d3       	rcall	.+1856   	; 0x1136 <LCD_Clear>

    LCD_Clear();
     9f6:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <x_coleta>
    if (x_coleta < x) {
     9fa:	30 91 a2 03 	lds	r19, 0x03A2	; 0x8003a2 <x_coleta+0x1>
     9fe:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <x>
     a02:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <x+0x1>
     a06:	28 17       	cp	r18, r24
     a08:	39 07       	cpc	r19, r25
     a0a:	20 f4       	brcc	.+8      	; 0xa14 <direcoes+0x3d0>
     a0c:	80 e6       	ldi	r24, 0x60	; 96
     a0e:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Vire a esquerda");
     a10:	6b d3       	rcall	.+1750   	; 0x10e8 <LCD_String>
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <direcoes+0x3d6>
     a14:	80 e7       	ldi	r24, 0x70	; 112
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	67 d3       	rcall	.+1742   	; 0x10e8 <LCD_String>
    } else {
      LCD_String("Vire a direita");
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	b2 d5       	rcall	.+2916   	; 0x1582 <Timer1>
     a1e:	c0 c0       	rjmp	.+384    	; 0xba0 <direcoes+0x55c>
    }

    Timer1(2);
     a20:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <esq_y_entrega>
     a24:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <esq_y_entrega+0x1>
  //
  // else if ((abs(esq_x_coleta - x) >= 50) && !pedido_coletado && (abs(y - y_coleta) >= 50)) {
  // estados_1 = 1; //caso esteja perdido, vai ate a esquina mais proxima, e ai cai num caso conhecido
  //}

  else if ((abs(esq_y_entrega - y) <= 30) && pedido_coletado_1 && (abs(x - x_entrega) >= 50)) {
     a28:	82 1b       	sub	r24, r18
     a2a:	93 0b       	sbc	r25, r19
     a2c:	82 3e       	cpi	r24, 0xE2	; 226
     a2e:	4f ef       	ldi	r20, 0xFF	; 255
     a30:	94 07       	cpc	r25, r20
     a32:	a4 f1       	brlt	.+104    	; 0xa9c <direcoes+0x458>
     a34:	4f 97       	sbiw	r24, 0x1f	; 31
     a36:	94 f5       	brge	.+100    	; 0xa9c <direcoes+0x458>
     a38:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <pedido_coletado_1>
     a3c:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <pedido_coletado_1+0x1>
     a40:	89 2b       	or	r24, r25
     a42:	61 f1       	breq	.+88     	; 0xa9c <direcoes+0x458>
     a44:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <x>
     a48:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <x+0x1>
     a4c:	40 91 9d 03 	lds	r20, 0x039D	; 0x80039d <x_entrega>
     a50:	50 91 9e 03 	lds	r21, 0x039E	; 0x80039e <x_entrega+0x1>
     a54:	84 1b       	sub	r24, r20
     a56:	95 0b       	sbc	r25, r21
     a58:	ac 01       	movw	r20, r24
     a5a:	22 f4       	brpl	.+8      	; 0xa64 <direcoes+0x420>
     a5c:	44 27       	eor	r20, r20
     a5e:	55 27       	eor	r21, r21
     a60:	48 1b       	sub	r20, r24
     a62:	59 0b       	sbc	r21, r25
     a64:	42 33       	cpi	r20, 0x32	; 50
     a66:	51 05       	cpc	r21, r1
     a68:	cc f0       	brlt	.+50     	; 0xa9c <direcoes+0x458>
     a6a:	85 e0       	ldi	r24, 0x05	; 5
    estados_1 = 5;
     a6c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <estados_1>
     a70:	62 d3       	rcall	.+1732   	; 0x1136 <LCD_Clear>

    LCD_Clear();
     a72:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <x_entrega>
    if (x_entrega < x) {
     a76:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <x_entrega+0x1>
     a7a:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <x>
     a7e:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <x+0x1>
     a82:	28 17       	cp	r18, r24
     a84:	39 07       	cpc	r19, r25
     a86:	20 f4       	brcc	.+8      	; 0xa90 <direcoes+0x44c>
     a88:	80 e6       	ldi	r24, 0x60	; 96
     a8a:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Vire a esquerda");
     a8c:	2d d3       	rcall	.+1626   	; 0x10e8 <LCD_String>
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <direcoes+0x452>
     a90:	80 e7       	ldi	r24, 0x70	; 112
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	29 d3       	rcall	.+1618   	; 0x10e8 <LCD_String>
    } else {
      LCD_String("Vire a direita");
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	74 d5       	rcall	.+2792   	; 0x1582 <Timer1>
     a9a:	82 c0       	rjmp	.+260    	; 0xba0 <direcoes+0x55c>
    }
    Timer1(2);
     a9c:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <esq_x_entrega>
     aa0:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <esq_x_entrega+0x1>
  } else if ((abs(esq_x_entrega - x) <= 30) && pedido_coletado_1 && (abs(y - y_entrega) >= 50)) {
     aa4:	40 91 a5 03 	lds	r20, 0x03A5	; 0x8003a5 <x>
     aa8:	50 91 a6 03 	lds	r21, 0x03A6	; 0x8003a6 <x+0x1>
     aac:	84 1b       	sub	r24, r20
     aae:	95 0b       	sbc	r25, r21
     ab0:	82 3e       	cpi	r24, 0xE2	; 226
     ab2:	4f ef       	ldi	r20, 0xFF	; 255
     ab4:	94 07       	cpc	r25, r20
     ab6:	9c f1       	brlt	.+102    	; 0xb1e <direcoes+0x4da>
     ab8:	8f 31       	cpi	r24, 0x1F	; 31
     aba:	91 05       	cpc	r25, r1
     abc:	84 f5       	brge	.+96     	; 0xb1e <direcoes+0x4da>
     abe:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <pedido_coletado_1>
     ac2:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <pedido_coletado_1+0x1>
     ac6:	89 2b       	or	r24, r25
     ac8:	09 f4       	brne	.+2      	; 0xacc <direcoes+0x488>
     aca:	6a c0       	rjmp	.+212    	; 0xba0 <direcoes+0x55c>
     acc:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <y_entrega>
     ad0:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <y_entrega+0x1>
     ad4:	28 1b       	sub	r18, r24
     ad6:	39 0b       	sbc	r19, r25
     ad8:	c9 01       	movw	r24, r18
     ada:	99 23       	and	r25, r25
     adc:	24 f4       	brge	.+8      	; 0xae6 <direcoes+0x4a2>
     ade:	88 27       	eor	r24, r24
     ae0:	99 27       	eor	r25, r25
     ae2:	82 1b       	sub	r24, r18
     ae4:	93 0b       	sbc	r25, r19
     ae6:	c2 97       	sbiw	r24, 0x32	; 50
     ae8:	0c f4       	brge	.+2      	; 0xaec <direcoes+0x4a8>
     aea:	5a c0       	rjmp	.+180    	; 0xba0 <direcoes+0x55c>
     aec:	86 e0       	ldi	r24, 0x06	; 6
     aee:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <estados_1>
    estados_1 = 6;
     af2:	21 d3       	rcall	.+1602   	; 0x1136 <LCD_Clear>
     af4:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <y_entrega>

    LCD_Clear();
     af8:	30 91 9c 03 	lds	r19, 0x039C	; 0x80039c <y_entrega+0x1>
    if (y_entrega > y) {
     afc:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     b00:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     b04:	82 17       	cp	r24, r18
     b06:	93 07       	cpc	r25, r19
     b08:	20 f4       	brcc	.+8      	; 0xb12 <direcoes+0x4ce>
     b0a:	80 e6       	ldi	r24, 0x60	; 96
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	ec d2       	rcall	.+1496   	; 0x10e8 <LCD_String>
      LCD_String("Vire a esquerda");
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <direcoes+0x4d4>
     b12:	80 e7       	ldi	r24, 0x70	; 112
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	e8 d2       	rcall	.+1488   	; 0x10e8 <LCD_String>
    } else {
      LCD_String("Vire a direita");
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	33 d5       	rcall	.+2662   	; 0x1582 <Timer1>
     b1c:	41 c0       	rjmp	.+130    	; 0xba0 <direcoes+0x55c>
     b1e:	ac 01       	movw	r20, r24
    }
    Timer1(2);
     b20:	99 23       	and	r25, r25
     b22:	24 f4       	brge	.+8      	; 0xb2c <direcoes+0x4e8>
     b24:	44 27       	eor	r20, r20
      LCD_String("Vire a esquerda");
    } else {
      LCD_String("Vire a direita");
    }
    Timer1(2);
  } else if ((abs(esq_x_entrega - x) <= 30) && pedido_coletado_1 && (abs(y - y_entrega) >= 50)) {
     b26:	55 27       	eor	r21, r21
      LCD_String("Vire a direita");
    }
    Timer1(2);
  }

  else if ((abs(esq_x_entrega - x) >= 50) && pedido_coletado_1 && (abs(y - y_entrega) >= 50)) {
     b28:	48 1b       	sub	r20, r24
     b2a:	59 0b       	sbc	r21, r25
     b2c:	42 33       	cpi	r20, 0x32	; 50
     b2e:	51 05       	cpc	r21, r1
     b30:	bc f1       	brlt	.+110    	; 0xba0 <direcoes+0x55c>
     b32:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <pedido_coletado_1>
     b36:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <pedido_coletado_1+0x1>
     b3a:	89 2b       	or	r24, r25
     b3c:	89 f1       	breq	.+98     	; 0xba0 <direcoes+0x55c>
     b3e:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <y_entrega>
     b42:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <y_entrega+0x1>
     b46:	28 1b       	sub	r18, r24
     b48:	39 0b       	sbc	r19, r25
     b4a:	c9 01       	movw	r24, r18
     b4c:	99 23       	and	r25, r25
     b4e:	24 f4       	brge	.+8      	; 0xb58 <direcoes+0x514>
     b50:	88 27       	eor	r24, r24
     b52:	99 27       	eor	r25, r25
     b54:	82 1b       	sub	r24, r18
     b56:	93 0b       	sbc	r25, r19
     b58:	c2 97       	sbiw	r24, 0x32	; 50
    estados_1 = 3;
     b5a:	14 f1       	brlt	.+68     	; 0xba0 <direcoes+0x55c>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <estados_1>

    if (entra_uma_vez_2) {
     b62:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <entra_uma_vez_2>
     b66:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <entra_uma_vez_2+0x1>
     b6a:	89 2b       	or	r24, r25
      entra_uma_vez_2 = 0;
     b6c:	c9 f0       	breq	.+50     	; 0xba0 <direcoes+0x55c>
     b6e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <entra_uma_vez_2+0x1>
      LCD_Clear();
     b72:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <entra_uma_vez_2>
      if (y_entrega > y) {
     b76:	df d2       	rcall	.+1470   	; 0x1136 <LCD_Clear>
     b78:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <y_entrega>
     b7c:	30 91 9c 03 	lds	r19, 0x039C	; 0x80039c <y_entrega+0x1>
     b80:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     b84:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     b88:	82 17       	cp	r24, r18
        LCD_String("Vire a esquerda");
     b8a:	93 07       	cpc	r25, r19
     b8c:	20 f4       	brcc	.+8      	; 0xb96 <direcoes+0x552>
     b8e:	80 e6       	ldi	r24, 0x60	; 96
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	aa d2       	rcall	.+1364   	; 0x10e8 <LCD_String>
      } else {
        LCD_String("Vire a direita");
     b94:	03 c0       	rjmp	.+6      	; 0xb9c <direcoes+0x558>
     b96:	80 e7       	ldi	r24, 0x70	; 112
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	a6 d2       	rcall	.+1356   	; 0x10e8 <LCD_String>
      }
      Timer1(2);
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	f1 d4       	rcall	.+2530   	; 0x1582 <Timer1>
     ba0:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <pedido_coletado>
    }
  }

  if (pedido_coletado) {
     ba4:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <pedido_coletado+0x1>
     ba8:	89 2b       	or	r24, r25
     baa:	71 f0       	breq	.+28     	; 0xbc8 <direcoes+0x584>
     bac:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <pedido_coletado+0x1>
    pedido_coletado = 0;
     bb0:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <pedido_coletado>
     bb4:	c0 d2       	rcall	.+1408   	; 0x1136 <LCD_Clear>

    LCD_Clear();
     bb6:	8f e7       	ldi	r24, 0x7F	; 127
     bb8:	92 e0       	ldi	r25, 0x02	; 2
    LCD_String("Pedido coletado!");
     bba:	96 d2       	rcall	.+1324   	; 0x10e8 <LCD_String>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	d2 db       	rcall	.-2140   	; 0x366 <enviamov>
    enviamov(1);
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	de d4       	rcall	.+2492   	; 0x1582 <Timer1>
     bc6:	0e c0       	rjmp	.+28     	; 0xbe4 <direcoes+0x5a0>
     bc8:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <pedido_entregue>
    Timer1(1);
     bcc:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <pedido_entregue+0x1>
     bd0:	89 2b       	or	r24, r25
  } else if (pedido_entregue) {
     bd2:	41 f0       	breq	.+16     	; 0xbe4 <direcoes+0x5a0>
     bd4:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <pedido_entregue+0x1>
     bd8:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <pedido_entregue>
     bdc:	ac d2       	rcall	.+1368   	; 0x1136 <LCD_Clear>
    pedido_entregue = 0;
     bde:	80 e9       	ldi	r24, 0x90	; 144
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	82 d2       	rcall	.+1284   	; 0x10e8 <LCD_String>
     be4:	0f 90       	pop	r0

    LCD_Clear();
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
    LCD_String("Pedido entregue!");
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
    // while(pedido_finalizado); //Retirar ou nao, eis a questao //retirado, respondida a questao
  }
}
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <valida_coleta>:
     bf8:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <aceita_pedido>
     bfc:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <aceita_pedido+0x1>
     c00:	89 2b       	or	r24, r25
     c02:	a1 f0       	breq	.+40     	; 0xc2c <valida_coleta+0x34>
     c04:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <aceita_pedido+0x1>

void valida_coleta() {
  if (aceita_pedido) {
    aceita_pedido = 0;
     c08:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <aceita_pedido>

    LCD_Clear();
     c0c:	94 d2       	rcall	.+1320   	; 0x1136 <LCD_Clear>
    LCD_String("Realize a coleta");
     c0e:	81 ea       	ldi	r24, 0xA1	; 161
     c10:	92 e0       	ldi	r25, 0x02	; 2

    pos_x_y();
     c12:	6a d2       	rcall	.+1236   	; 0x10e8 <LCD_String>

    Timer1(1);
     c14:	d7 db       	rcall	.-2130   	; 0x3c4 <pos_x_y>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	b4 d4       	rcall	.+2408   	; 0x1582 <Timer1>
    direcoes(y, y_coleta);
     c1a:	60 91 9f 03 	lds	r22, 0x039F	; 0x80039f <y_coleta>
     c1e:	70 91 a0 03 	lds	r23, 0x03A0	; 0x8003a0 <y_coleta+0x1>
     c22:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     c26:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     c2a:	0c cd       	rjmp	.-1512   	; 0x644 <direcoes>
     c2c:	08 95       	ret

00000c2e <negar_coleta>:
  }
}

void negar_coleta() {
  if (aceita_pedido) {
     c2e:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <aceita_pedido>
     c32:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <aceita_pedido+0x1>
     c36:	89 2b       	or	r24, r25
     c38:	21 f0       	breq	.+8      	; 0xc42 <negar_coleta+0x14>
    LCD_Clear();
     c3a:	7d d2       	rcall	.+1274   	; 0x1136 <LCD_Clear>
    LCD_String("Sem sucesso");
     c3c:	82 eb       	ldi	r24, 0xB2	; 178
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	53 c2       	rjmp	.+1190   	; 0x10e8 <LCD_String>
     c42:	08 95       	ret

00000c44 <cliente_novo>:
  }
}

void cliente_novo() {
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
  envia2bytes('U', 'E');
     c48:	65 e4       	ldi	r22, 0x45	; 69
     c4a:	85 e5       	ldi	r24, 0x55	; 85
     c4c:	54 db       	rcall	.-2392   	; 0x2f6 <envia2bytes>

  LCD_Clear();
     c4e:	73 d2       	rcall	.+1254   	; 0x1136 <LCD_Clear>
     c50:	8e eb       	ldi	r24, 0xBE	; 190

  LCD_String("Novo pedido: ");
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	49 d2       	rcall	.+1170   	; 0x10e8 <LCD_String>
     c56:	80 ec       	ldi	r24, 0xC0	; 192
  LCD_Command(0xC0);
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	22 d2       	rcall	.+1092   	; 0x10a0 <LCD_Command>
     c5c:	8c ec       	ldi	r24, 0xCC	; 204
  LCD_String("Aceitar 1-S  2-N");
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	43 d2       	rcall	.+1158   	; 0x10e8 <LCD_String>
     c62:	c1 e0       	ldi	r28, 0x01	; 1
  while ((tecla_pressionada != '1') && (tecla_pressionada != '2')) {
    tecla_pressionada = tecla();

    if (tecla_pressionada == '1') {
      envia3bytes('U', 'A', id_cliente);
      aceita_pedido = 1;
     c64:	d0 e0       	ldi	r29, 0x00	; 0
     c66:	19 c0       	rjmp	.+50     	; 0xc9a <cliente_novo+0x56>

  LCD_String("Novo pedido: ");
  LCD_Command(0xC0);
  LCD_String("Aceitar 1-S  2-N");

  while ((tecla_pressionada != '1') && (tecla_pressionada != '2')) {
     c68:	f5 d3       	rcall	.+2026   	; 0x1454 <tecla>
    tecla_pressionada = tecla();
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <tecla_pressionada+0x1>
     c70:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <tecla_pressionada>
     c74:	81 33       	cpi	r24, 0x31	; 49
     c76:	91 05       	cpc	r25, r1

    if (tecla_pressionada == '1') {
     c78:	51 f4       	brne	.+20     	; 0xc8e <cliente_novo+0x4a>
     c7a:	40 91 a8 03 	lds	r20, 0x03A8	; 0x8003a8 <id_cliente>
      envia3bytes('U', 'A', id_cliente);
     c7e:	61 e4       	ldi	r22, 0x41	; 65
     c80:	85 e5       	ldi	r24, 0x55	; 85
     c82:	50 db       	rcall	.-2400   	; 0x324 <envia3bytes>
     c84:	d0 93 75 03 	sts	0x0375, r29	; 0x800375 <aceita_pedido+0x1>
      aceita_pedido = 1;
     c88:	c0 93 74 03 	sts	0x0374, r28	; 0x800374 <aceita_pedido>
     c8c:	06 c0       	rjmp	.+12     	; 0xc9a <cliente_novo+0x56>
    } else if (tecla_pressionada == '2') {
     c8e:	c2 97       	sbiw	r24, 0x32	; 50
     c90:	21 f4       	brne	.+8      	; 0xc9a <cliente_novo+0x56>
      LCD_Clear();
     c92:	51 d2       	rcall	.+1186   	; 0x1136 <LCD_Clear>
     c94:	8d ed       	ldi	r24, 0xDD	; 221
      LCD_String("Pedido rejeitado");
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	27 d2       	rcall	.+1102   	; 0x10e8 <LCD_String>
     c9a:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <tecla_pressionada>

  LCD_String("Novo pedido: ");
  LCD_Command(0xC0);
  LCD_String("Aceitar 1-S  2-N");

  while ((tecla_pressionada != '1') && (tecla_pressionada != '2')) {
     c9e:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <tecla_pressionada+0x1>
     ca2:	c1 97       	sbiw	r24, 0x31	; 49
     ca4:	02 97       	sbiw	r24, 0x02	; 2
     ca6:	00 f7       	brcc	.-64     	; 0xc68 <cliente_novo+0x24>
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
    } else if (tecla_pressionada == '2') {
      LCD_Clear();
      LCD_String("Pedido rejeitado");
    }
  }
}
     cac:	08 95       	ret

00000cae <__vector_25>:
     cae:	1f 92       	push	r1
     cb0:	0f 92       	push	r0

// ISR de recep��o serial
ISR(USART0_RX_vect) {
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	0f 92       	push	r0
     cb6:	11 24       	eor	r1, r1
     cb8:	0b b6       	in	r0, 0x3b	; 59
     cba:	0f 92       	push	r0
     cbc:	2f 93       	push	r18
     cbe:	3f 93       	push	r19
     cc0:	4f 93       	push	r20
     cc2:	5f 93       	push	r21
     cc4:	6f 93       	push	r22
     cc6:	7f 93       	push	r23
     cc8:	8f 93       	push	r24
     cca:	9f 93       	push	r25
     ccc:	af 93       	push	r26
     cce:	bf 93       	push	r27
     cd0:	ef 93       	push	r30
     cd2:	ff 93       	push	r31
  unsigned char dado = UDR0;
     cd4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

  switch (estado) {
     cd8:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <estado>
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	87 30       	cpi	r24, 0x07	; 7
     ce0:	91 05       	cpc	r25, r1
     ce2:	08 f0       	brcs	.+2      	; 0xce6 <__vector_25+0x38>
     ce4:	d5 c0       	rjmp	.+426    	; 0xe90 <__vector_25+0x1e2>
     ce6:	fc 01       	movw	r30, r24
     ce8:	88 27       	eor	r24, r24
     cea:	e6 58       	subi	r30, 0x86	; 134
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	8f 4f       	sbci	r24, 0xFF	; 255
     cf0:	20 c7       	rjmp	.+3648   	; 0x1b32 <__tablejump2__>
  case 0: // Espera 'S'
    if (dado == 'S') {
     cf2:	23 35       	cpi	r18, 0x53	; 83
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <__vector_25+0x4a>
     cf6:	ce c0       	rjmp	.+412    	; 0xe94 <__vector_25+0x1e6>
      estado = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <estado>
     cfe:	ca c0       	rjmp	.+404    	; 0xe94 <__vector_25+0x1e6>
    }
    break;

  case 1: // Espera 'P'
    if (dado == 'P') {
     d00:	20 35       	cpi	r18, 0x50	; 80
     d02:	51 f4       	brne	.+20     	; 0xd18 <__vector_25+0x6a>
      pedido_finalizado = 0;
     d04:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <pedido_finalizado+0x1>
     d08:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <pedido_finalizado>
      estado = 2;
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <estado>
      contador = 0;
     d12:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <contador>
     d16:	be c0       	rjmp	.+380    	; 0xe94 <__vector_25+0x1e6>
    } else if (dado == 'H') {
     d18:	28 34       	cpi	r18, 0x48	; 72
     d1a:	31 f4       	brne	.+12     	; 0xd28 <__vector_25+0x7a>
      estado = 3;
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <estado>
      contador_d = 0;
     d22:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <contador_d>
     d26:	b6 c0       	rjmp	.+364    	; 0xe94 <__vector_25+0x1e6>
    } else if (dado == 'E') {
     d28:	25 34       	cpi	r18, 0x45	; 69
     d2a:	41 f4       	brne	.+16     	; 0xd3c <__vector_25+0x8e>
      estado = 4;
     d2c:	84 e0       	ldi	r24, 0x04	; 4
     d2e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <estado>
      contador_c = 0;
     d32:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <contador_c>
      contador_e = 0;
     d36:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <contador_e>
     d3a:	ac c0       	rjmp	.+344    	; 0xe94 <__vector_25+0x1e6>
    } else if (dado == 'A') {
     d3c:	21 34       	cpi	r18, 0x41	; 65
     d3e:	21 f4       	brne	.+8      	; 0xd48 <__vector_25+0x9a>
      estado = 0;
     d40:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <estado>
      valida_coleta();
     d44:	59 df       	rcall	.-334    	; 0xbf8 <valida_coleta>
     d46:	a6 c0       	rjmp	.+332    	; 0xe94 <__vector_25+0x1e6>
    } else if (dado == 'N') {
     d48:	2e 34       	cpi	r18, 0x4E	; 78
     d4a:	21 f4       	brne	.+8      	; 0xd54 <__vector_25+0xa6>
      estado = 0;
     d4c:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <estado>
      negar_coleta();
     d50:	6e df       	rcall	.-292    	; 0xc2e <negar_coleta>
     d52:	a0 c0       	rjmp	.+320    	; 0xe94 <__vector_25+0x1e6>
    } else if (dado == 'M') {
     d54:	2d 34       	cpi	r18, 0x4D	; 77
     d56:	49 f4       	brne	.+18     	; 0xd6a <__vector_25+0xbc>
      estado = 0;
     d58:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <estado>
      valida_posicao = 1;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <__data_end+0x1>
     d64:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
     d68:	95 c0       	rjmp	.+298    	; 0xe94 <__vector_25+0x1e6>
    } else if (dado == 'I') {
     d6a:	29 34       	cpi	r18, 0x49	; 73
     d6c:	49 f4       	brne	.+18     	; 0xd80 <__vector_25+0xd2>
      estado = 0;
     d6e:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <estado>
      pedido_coletado_1 = 1;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <pedido_coletado_1+0x1>
     d7a:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <pedido_coletado_1>
     d7e:	8a c0       	rjmp	.+276    	; 0xe94 <__vector_25+0x1e6>
    } else if (dado == 'F') {
     d80:	26 34       	cpi	r18, 0x46	; 70
     d82:	79 f4       	brne	.+30     	; 0xda2 <__vector_25+0xf4>
      pedido_finalizado = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <pedido_finalizado+0x1>
     d8c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <pedido_finalizado>
      entra_uma_vez_1 = 1;
     d90:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <entra_uma_vez_1+0x1>
     d94:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <entra_uma_vez_1>
      entra_uma_vez_2 = 1;
     d98:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <entra_uma_vez_2+0x1>
     d9c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <entra_uma_vez_2>
     da0:	79 c0       	rjmp	.+242    	; 0xe94 <__vector_25+0x1e6>
    } else {
      estado = 0;
     da2:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <estado>
     da6:	76 c0       	rjmp	.+236    	; 0xe94 <__vector_25+0x1e6>
    }
    break;

  case 2: // Lendo 4 bytes de dados
    if (contador < 2) {
     da8:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <contador>
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	30 f4       	brcc	.+12     	; 0xdbc <__vector_25+0x10e>
      posx_entregador[contador] = dado;
     db0:	e8 2f       	mov	r30, r24
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	e3 54       	subi	r30, 0x43	; 67
     db6:	fc 4f       	sbci	r31, 0xFC	; 252
     db8:	20 83       	st	Z, r18
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <__vector_25+0x118>
    } else {
      posy_entregador[contador - 2] = dado;
     dbc:	e8 2f       	mov	r30, r24
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	e2 53       	subi	r30, 0x32	; 50
     dc2:	fc 4f       	sbci	r31, 0xFC	; 252
     dc4:	20 83       	st	Z, r18
    }
    contador++;
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <contador>

    if (contador >= 4) {
     dcc:	84 30       	cpi	r24, 0x04	; 4
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <__vector_25+0x124>
     dd0:	61 c0       	rjmp	.+194    	; 0xe94 <__vector_25+0x1e6>
      msg_pronta = 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <msg_pronta+0x1>
     dda:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <msg_pronta>
      estado = 0; // volta a procurar nova mensagem
     dde:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <estado>
     de2:	58 c0       	rjmp	.+176    	; 0xe94 <__vector_25+0x1e6>
    }
    break;

  case 3: // Lendo data e hora
    if (contador_d < 2) {
     de4:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <contador_d>
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	30 f4       	brcc	.+12     	; 0xdf8 <__vector_25+0x14a>
      data[contador_d] = dado;
     dec:	e8 2f       	mov	r30, r24
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	ea 53       	subi	r30, 0x3A	; 58
     df2:	fc 4f       	sbci	r31, 0xFC	; 252
     df4:	20 83       	st	Z, r18
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <__vector_25+0x154>
    } else {
      hora[contador_d - 2] = dado;
     df8:	e8 2f       	mov	r30, r24
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	e7 54       	subi	r30, 0x47	; 71
     dfe:	fc 4f       	sbci	r31, 0xFC	; 252
     e00:	20 83       	st	Z, r18
    }
    contador_d++;
     e02:	8f 5f       	subi	r24, 0xFF	; 255
     e04:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <contador_d>

    if (contador_d >= 4) {
     e08:	84 30       	cpi	r24, 0x04	; 4
     e0a:	08 f4       	brcc	.+2      	; 0xe0e <__vector_25+0x160>
     e0c:	43 c0       	rjmp	.+134    	; 0xe94 <__vector_25+0x1e6>
      msg_data_hora = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <msg_data_hora+0x1>
     e16:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <msg_data_hora>
      estado = 0; // volta a procurar nova mensagem
     e1a:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <estado>
     e1e:	3a c0       	rjmp	.+116    	; 0xe94 <__vector_25+0x1e6>
    }
    break;

  case 4: // Lendo id
    novo_cliente = 1;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <novo_cliente>
    id_cliente = dado;
     e26:	20 93 a8 03 	sts	0x03A8, r18	; 0x8003a8 <id_cliente>
    estado = 5;
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <estado>
    break;
     e30:	31 c0       	rjmp	.+98     	; 0xe94 <__vector_25+0x1e6>

  case 5: // Lendo posx, posy entrega
    if (contador_e < 2) {
     e32:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <contador_e>
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	30 f4       	brcc	.+12     	; 0xe46 <__vector_25+0x198>
      posx_entrega[contador_e] = dado;
     e3a:	e8 2f       	mov	r30, r24
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	ec 53       	subi	r30, 0x3C	; 60
     e40:	fc 4f       	sbci	r31, 0xFC	; 252
     e42:	20 83       	st	Z, r18
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <__vector_25+0x1a2>
    } else {
      posy_entrega[contador_e - 2] = dado;
     e46:	e8 2f       	mov	r30, r24
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	e9 54       	subi	r30, 0x49	; 73
     e4c:	fc 4f       	sbci	r31, 0xFC	; 252
     e4e:	20 83       	st	Z, r18
    }
    contador_e++;
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <contador_e>

    if (contador_e >= 4) {
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	e8 f0       	brcs	.+58     	; 0xe94 <__vector_25+0x1e6>
      estado = 6; // volta a procurar nova mensagem
     e5a:	86 e0       	ldi	r24, 0x06	; 6
     e5c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <estado>
     e60:	19 c0       	rjmp	.+50     	; 0xe94 <__vector_25+0x1e6>
    }
    break;

  case 6: // Lendo posx, posy coleta
    if (contador_c < 2) {
     e62:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <contador_c>
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	30 f4       	brcc	.+12     	; 0xe76 <__vector_25+0x1c8>
      posx_coleta[contador_c] = dado;
     e6a:	e8 2f       	mov	r30, r24
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	e6 53       	subi	r30, 0x36	; 54
     e70:	fc 4f       	sbci	r31, 0xFC	; 252
     e72:	20 83       	st	Z, r18
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <__vector_25+0x1d2>
    } else {
      posy_coleta[contador_c - 2] = dado;
     e76:	e8 2f       	mov	r30, r24
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	ea 53       	subi	r30, 0x3A	; 58
     e7c:	fc 4f       	sbci	r31, 0xFC	; 252
     e7e:	20 83       	st	Z, r18
    }
    contador_c++;
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <contador_c>

    if (contador_c >= 4) {
     e86:	84 30       	cpi	r24, 0x04	; 4
     e88:	28 f0       	brcs	.+10     	; 0xe94 <__vector_25+0x1e6>
      estado = 0;
     e8a:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <estado>
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <__vector_25+0x1e6>
    }
    break;

  default:
    estado = 0;
     e90:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <estado>
  }
}
     e94:	ff 91       	pop	r31
     e96:	ef 91       	pop	r30
     e98:	bf 91       	pop	r27
     e9a:	af 91       	pop	r26
     e9c:	9f 91       	pop	r25
     e9e:	8f 91       	pop	r24
     ea0:	7f 91       	pop	r23
     ea2:	6f 91       	pop	r22
     ea4:	5f 91       	pop	r21
     ea6:	4f 91       	pop	r20
     ea8:	3f 91       	pop	r19
     eaa:	2f 91       	pop	r18
     eac:	0f 90       	pop	r0
     eae:	0b be       	out	0x3b, r0	; 59
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti

00000eba <operacao_loop>:

int operacao_loop() {
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	2a 97       	sbiw	r28, 0x0a	; 10
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
  char texto_1[10]; // buffer para armazenar o n�mero convertido

  //   sei(); // Habilita interrup��es globais // JA HABILITADO NA MAIN

  uart_init();
     ece:	6e da       	rcall	.-2852   	; 0x3ac <uart_init>
      msg_data_hora = 0;

      envia2bytes('U', 'H');

      LCD_Command(0xC0);
      sprintf(texto_1, "%d", data[0]);
     ed0:	0f 2e       	mov	r0, r31
     ed2:	f6 ec       	ldi	r31, 0xC6	; 198
     ed4:	af 2e       	mov	r10, r31
     ed6:	f3 e0       	ldi	r31, 0x03	; 3
     ed8:	bf 2e       	mov	r11, r31
     eda:	f0 2d       	mov	r31, r0
     edc:	0b e5       	ldi	r16, 0x5B	; 91
     ede:	12 e0       	ldi	r17, 0x02	; 2
     ee0:	ce 01       	movw	r24, r28
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	7c 01       	movw	r14, r24
      LCD_String(texto_1);
      LCD_String("/");
      sprintf(texto_1, "%d", data[1]);
      LCD_String(texto_1);
      LCD_String("   ");
      sprintf(texto_1, "%d", hora[0]);
     ee6:	0f 2e       	mov	r0, r31
     ee8:	fb eb       	ldi	r31, 0xBB	; 187
     eea:	cf 2e       	mov	r12, r31
     eec:	f3 e0       	ldi	r31, 0x03	; 3
     eee:	df 2e       	mov	r13, r31
     ef0:	f0 2d       	mov	r31, r0
      msg_data_hora = 0;

      envia2bytes('U', 'H');

      LCD_Command(0xC0);
      sprintf(texto_1, "%d", data[0]);
     ef2:	88 2e       	mov	r8, r24
     ef4:	9f 2c       	mov	r9, r15

  // LCD_String("Digite a senha:");

  while (1) {

    if (novo_cliente) {
     ef6:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <novo_cliente>
     efa:	88 23       	and	r24, r24
     efc:	19 f0       	breq	.+6      	; 0xf04 <operacao_loop+0x4a>
      novo_cliente = 0;
     efe:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <novo_cliente>
      cliente_novo();
     f02:	a0 de       	rcall	.-704    	; 0xc44 <cliente_novo>
    }

    if (msg_pronta) {
     f04:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <msg_pronta>
     f08:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <msg_pronta+0x1>
     f0c:	89 2b       	or	r24, r25
     f0e:	c1 f1       	breq	.+112    	; 0xf80 <operacao_loop+0xc6>
      msg_pronta = 0;
     f10:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <msg_pronta+0x1>
     f14:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <msg_pronta>

      envia2bytes('U', 'P');
     f18:	60 e5       	ldi	r22, 0x50	; 80
     f1a:	85 e5       	ldi	r24, 0x55	; 85

      pos_x_y();
     f1c:	ec d9       	rcall	.-3112   	; 0x2f6 <envia2bytes>
     f1e:	52 da       	rcall	.-2908   	; 0x3c4 <pos_x_y>

      if (!pedido_coletado && !pedido_finalizado)
     f20:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <pedido_coletado>
     f24:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <pedido_coletado+0x1>
     f28:	89 2b       	or	r24, r25
     f2a:	79 f4       	brne	.+30     	; 0xf4a <operacao_loop+0x90>
     f2c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <pedido_finalizado>
     f30:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <pedido_finalizado+0x1>
     f34:	89 2b       	or	r24, r25
     f36:	49 f4       	brne	.+18     	; 0xf4a <operacao_loop+0x90>
        direcoes(y, y_coleta);
     f38:	60 91 9f 03 	lds	r22, 0x039F	; 0x80039f <y_coleta>
     f3c:	70 91 a0 03 	lds	r23, 0x03A0	; 0x8003a0 <y_coleta+0x1>
     f40:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     f44:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     f48:	7d db       	rcall	.-2310   	; 0x644 <direcoes>
      if (!entra_uma_vez_1 && !pedido_entregue && !pedido_finalizado)
     f4a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <entra_uma_vez_1>
     f4e:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <entra_uma_vez_1+0x1>
     f52:	89 2b       	or	r24, r25
     f54:	a9 f4       	brne	.+42     	; 0xf80 <operacao_loop+0xc6>
     f56:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <pedido_entregue>
     f5a:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <pedido_entregue+0x1>
     f5e:	89 2b       	or	r24, r25
     f60:	79 f4       	brne	.+30     	; 0xf80 <operacao_loop+0xc6>
     f62:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <pedido_finalizado>
     f66:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <pedido_finalizado+0x1>
     f6a:	89 2b       	or	r24, r25
     f6c:	49 f4       	brne	.+18     	; 0xf80 <operacao_loop+0xc6>
        direcoes(y, y_entrega);
     f6e:	60 91 9b 03 	lds	r22, 0x039B	; 0x80039b <y_entrega>
     f72:	70 91 9c 03 	lds	r23, 0x039C	; 0x80039c <y_entrega+0x1>
     f76:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <y>
     f7a:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <y+0x1>
     f7e:	62 db       	rcall	.-2364   	; 0x644 <direcoes>
    }

    if (msg_data_hora) {
     f80:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <msg_data_hora>
     f84:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <msg_data_hora+0x1>
     f88:	89 2b       	or	r24, r25
     f8a:	09 f4       	brne	.+2      	; 0xf8e <operacao_loop+0xd4>
     f8c:	48 c0       	rjmp	.+144    	; 0x101e <operacao_loop+0x164>
      msg_data_hora = 0;
     f8e:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <msg_data_hora+0x1>
     f92:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <msg_data_hora>

      envia2bytes('U', 'H');
     f96:	68 e4       	ldi	r22, 0x48	; 72
     f98:	85 e5       	ldi	r24, 0x55	; 85
     f9a:	ad d9       	rcall	.-3238   	; 0x2f6 <envia2bytes>

      LCD_Command(0xC0);
     f9c:	80 ec       	ldi	r24, 0xC0	; 192
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	7f d0       	rcall	.+254    	; 0x10a0 <LCD_Command>
     fa2:	f5 01       	movw	r30, r10
      sprintf(texto_1, "%d", data[0]);
     fa4:	80 81       	ld	r24, Z
     fa6:	1f 92       	push	r1
     fa8:	8f 93       	push	r24
     faa:	1f 93       	push	r17
     fac:	0f 93       	push	r16
     fae:	ff 92       	push	r15
     fb0:	ef 92       	push	r14
      LCD_String(texto_1);
     fb2:	d0 d5       	rcall	.+2976   	; 0x1b54 <sprintf>
     fb4:	88 2d       	mov	r24, r8
     fb6:	99 2d       	mov	r25, r9
     fb8:	97 d0       	rcall	.+302    	; 0x10e8 <LCD_String>
      LCD_String("/");
     fba:	8e ee       	ldi	r24, 0xEE	; 238
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	94 d0       	rcall	.+296    	; 0x10e8 <LCD_String>
      sprintf(texto_1, "%d", data[1]);
     fc0:	f5 01       	movw	r30, r10
     fc2:	81 81       	ldd	r24, Z+1	; 0x01
     fc4:	1f 92       	push	r1
     fc6:	8f 93       	push	r24
     fc8:	1f 93       	push	r17
     fca:	0f 93       	push	r16
     fcc:	ff 92       	push	r15
     fce:	ef 92       	push	r14
      LCD_String(texto_1);
     fd0:	c1 d5       	rcall	.+2946   	; 0x1b54 <sprintf>
     fd2:	88 2d       	mov	r24, r8
     fd4:	99 2d       	mov	r25, r9
      LCD_String("   ");
     fd6:	88 d0       	rcall	.+272    	; 0x10e8 <LCD_String>
     fd8:	80 ef       	ldi	r24, 0xF0	; 240
     fda:	92 e0       	ldi	r25, 0x02	; 2
      sprintf(texto_1, "%d", hora[0]);
     fdc:	85 d0       	rcall	.+266    	; 0x10e8 <LCD_String>
     fde:	f6 01       	movw	r30, r12
     fe0:	80 81       	ld	r24, Z
     fe2:	1f 92       	push	r1
     fe4:	8f 93       	push	r24
     fe6:	1f 93       	push	r17
     fe8:	0f 93       	push	r16
     fea:	ff 92       	push	r15
     fec:	ef 92       	push	r14
      LCD_String(texto_1);
     fee:	b2 d5       	rcall	.+2916   	; 0x1b54 <sprintf>
     ff0:	88 2d       	mov	r24, r8
     ff2:	99 2d       	mov	r25, r9
      LCD_String(":");
     ff4:	79 d0       	rcall	.+242    	; 0x10e8 <LCD_String>
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	93 e0       	ldi	r25, 0x03	; 3
     ffa:	76 d0       	rcall	.+236    	; 0x10e8 <LCD_String>
      sprintf(texto_1, "%d", hora[1]);
     ffc:	f6 01       	movw	r30, r12
     ffe:	81 81       	ldd	r24, Z+1	; 0x01
    1000:	1f 92       	push	r1
    1002:	8f 93       	push	r24
    1004:	1f 93       	push	r17
    1006:	0f 93       	push	r16
    1008:	ff 92       	push	r15
    100a:	ef 92       	push	r14
    100c:	a3 d5       	rcall	.+2886   	; 0x1b54 <sprintf>
      LCD_String(texto_1);
    100e:	88 2d       	mov	r24, r8
    1010:	99 2d       	mov	r25, r9
    1012:	6a d0       	rcall	.+212    	; 0x10e8 <LCD_String>
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    }

    tecla_pressionada = tecla();
    101e:	1a d2       	rcall	.+1076   	; 0x1454 <tecla>
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <tecla_pressionada+0x1>
    1026:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <tecla_pressionada>
    102a:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <habilita_dir_teclado>

    if (habilita_dir_teclado) {
    102e:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <habilita_dir_teclado+0x1>
    1032:	89 2b       	or	r24, r25
    1034:	09 f4       	brne	.+2      	; 0x1038 <operacao_loop+0x17e>
    1036:	5f cf       	rjmp	.-322    	; 0xef6 <operacao_loop+0x3c>
    1038:	0d d2       	rcall	.+1050   	; 0x1454 <tecla>
      tecla_pressionada = tecla();
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	30 93 cd 03 	sts	0x03CD, r19	; 0x8003cd <tecla_pressionada+0x1>
    1042:	20 93 cc 03 	sts	0x03CC, r18	; 0x8003cc <tecla_pressionada>
    1046:	84 33       	cpi	r24, 0x34	; 52

      switch (tecla_pressionada) {
    1048:	09 f1       	breq	.+66     	; 0x108c <operacao_loop+0x1d2>
    104a:	18 f4       	brcc	.+6      	; 0x1052 <operacao_loop+0x198>
    104c:	82 33       	cpi	r24, 0x32	; 50
    104e:	31 f0       	breq	.+12     	; 0x105c <operacao_loop+0x1a2>
    1050:	52 cf       	rjmp	.-348    	; 0xef6 <operacao_loop+0x3c>
    1052:	85 33       	cpi	r24, 0x35	; 53
    1054:	69 f0       	breq	.+26     	; 0x1070 <operacao_loop+0x1b6>
    1056:	86 33       	cpi	r24, 0x36	; 54
    1058:	79 f0       	breq	.+30     	; 0x1078 <operacao_loop+0x1be>
      case '2':
        enviamov(2);
    105a:	4d cf       	rjmp	.-358    	; 0xef6 <operacao_loop+0x3c>
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	82 d9       	rcall	.-3324   	; 0x366 <enviamov>
        direcao_motoqueiro = 1;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <direcao_motoqueiro+0x1>
    106a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <direcao_motoqueiro>
        break;
      case '5':
        enviamov(1);
    106e:	43 cf       	rjmp	.-378    	; 0xef6 <operacao_loop+0x3c>
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	78 d9       	rcall	.-3344   	; 0x366 <enviamov>
        break;
    1076:	3f cf       	rjmp	.-386    	; 0xef6 <operacao_loop+0x3c>
      case '6':
        enviamov(3);
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	74 d9       	rcall	.-3352   	; 0x366 <enviamov>
    107e:	83 e0       	ldi	r24, 0x03	; 3
        direcao_motoqueiro = 3;
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <direcao_motoqueiro+0x1>
    1086:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <direcao_motoqueiro>
    108a:	35 cf       	rjmp	.-406    	; 0xef6 <operacao_loop+0x3c>
        break;
    108c:	84 e0       	ldi	r24, 0x04	; 4
      case '4':
        enviamov(4);
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	6a d9       	rcall	.-3372   	; 0x366 <enviamov>
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	90 e0       	ldi	r25, 0x00	; 0
        direcao_motoqueiro = 4;
    1096:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <direcao_motoqueiro+0x1>
    109a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <direcao_motoqueiro>
    109e:	2b cf       	rjmp	.-426    	; 0xef6 <operacao_loop+0x3c>

000010a0 <LCD_Command>:
#define EN PF3                 /* Define Enable signal pin */

#include <avr/interrupt.h>

void LCD_Command(unsigned char cmnd) {
  LCD_Data_Port = cmnd;
    10a0:	82 b9       	out	0x02, r24	; 2
  LCD_Command_Port &= ~(1 << RS); /* RS=0 command reg. */
    10a2:	8a 98       	cbi	0x11, 2	; 17
  LCD_Command_Port &= ~(1 << RW); /* RW=0 Write operation */
    10a4:	89 98       	cbi	0x11, 1	; 17
  LCD_Command_Port |= (1 << EN);  /* Enable pulse */
    10a6:	8b 9a       	sbi	0x11, 3	; 17
  //_delay_us(1);
  Timer1_us(1);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	47 d2       	rcall	.+1166   	; 0x153a <Timer1_us>
  LCD_Command_Port &= ~(1 << EN);
    10ac:	8b 98       	cbi	0x11, 3	; 17
  //_delay_ms(3);
  Timer1_ms(3);
    10ae:	83 e0       	ldi	r24, 0x03	; 3
    10b0:	56 c2       	rjmp	.+1196   	; 0x155e <Timer1_ms>
    10b2:	08 95       	ret

000010b4 <LCD_Char>:
}

void LCD_Char(unsigned char char_data) /* LCD data write function */
{
  LCD_Data_Port = char_data;
    10b4:	82 b9       	out	0x02, r24	; 2
  LCD_Command_Port |= (1 << RS);  /* RS=1 Data reg. */
    10b6:	8a 9a       	sbi	0x11, 2	; 17
  LCD_Command_Port &= ~(1 << RW); /* RW=0 write operation */
    10b8:	89 98       	cbi	0x11, 1	; 17
  LCD_Command_Port |= (1 << EN);  /* Enable Pulse */
    10ba:	8b 9a       	sbi	0x11, 3	; 17
  //_delay_us(1);
  Timer1_us(1);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	3d d2       	rcall	.+1146   	; 0x153a <Timer1_us>
  LCD_Command_Port &= ~(1 << EN);
    10c0:	8b 98       	cbi	0x11, 3	; 17
  //_delay_ms(1);
  Timer1_ms(1);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	4c c2       	rjmp	.+1176   	; 0x155e <Timer1_ms>
    10c6:	08 95       	ret

000010c8 <LCD_Init>:
}

void LCD_Init(void) /* LCD Initialize function */
{
  LCD_Command_Dir = 0xFF; /* Make LCD command port direction as o/p */
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	80 bb       	out	0x10, r24	; 16
  LCD_Data_Dir = 0xFF;    /* Make LCD data port direction as o/p */
    10cc:	81 b9       	out	0x01, r24	; 1
  //_delay_ms(20);			/* LCD Power ON delay always >15ms */
  Timer1_ms(20);
    10ce:	84 e1       	ldi	r24, 0x14	; 20
    10d0:	46 d2       	rcall	.+1164   	; 0x155e <Timer1_ms>

  LCD_Command(0x38); /* Initialization of 16X2 LCD in 8bit mode */
    10d2:	88 e3       	ldi	r24, 0x38	; 56
    10d4:	e5 df       	rcall	.-54     	; 0x10a0 <LCD_Command>
  LCD_Command(0x0C); /* Display ON Cursor OFF */
    10d6:	8c e0       	ldi	r24, 0x0C	; 12
    10d8:	e3 df       	rcall	.-58     	; 0x10a0 <LCD_Command>
  LCD_Command(0x06); /* Auto Increment cursor */
    10da:	86 e0       	ldi	r24, 0x06	; 6
    10dc:	e1 df       	rcall	.-62     	; 0x10a0 <LCD_Command>
  LCD_Command(0x01); /* Clear display */
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	df df       	rcall	.-66     	; 0x10a0 <LCD_Command>
    10e2:	80 e8       	ldi	r24, 0x80	; 128
  LCD_Command(0x80); /* Cursor at home position */
    10e4:	dd cf       	rjmp	.-70     	; 0x10a0 <LCD_Command>
    10e6:	08 95       	ret

000010e8 <LCD_String>:
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
}

void LCD_String(char *str) /* Send string to LCD function */
{
    10ec:	ec 01       	movw	r28, r24
  int i;
  for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
    10ee:	88 81       	ld	r24, Y
    10f0:	88 23       	and	r24, r24
    10f2:	29 f0       	breq	.+10     	; 0x10fe <LCD_String+0x16>
    10f4:	21 96       	adiw	r28, 0x01	; 1
  {
    LCD_Char(str[i]);
    10f6:	de df       	rcall	.-68     	; 0x10b4 <LCD_Char>
}

void LCD_String(char *str) /* Send string to LCD function */
{
  int i;
  for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
    10f8:	89 91       	ld	r24, Y+
    10fa:	81 11       	cpse	r24, r1
    10fc:	fc cf       	rjmp	.-8      	; 0x10f6 <LCD_String+0xe>
  {
    LCD_Char(str[i]);
  }
}
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str) /* Send string to LCD with xy position */
{
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	ea 01       	movw	r28, r20
  if (row == 0 && pos < 16)
    110a:	81 11       	cpse	r24, r1
    110c:	07 c0       	rjmp	.+14     	; 0x111c <LCD_String_xy+0x18>
    110e:	60 31       	cpi	r22, 0x10	; 16
    1110:	68 f4       	brcc	.+26     	; 0x112c <LCD_String_xy+0x28>
    LCD_Command((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    1112:	86 2f       	mov	r24, r22
    1114:	8f 70       	andi	r24, 0x0F	; 15
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	c3 df       	rcall	.-122    	; 0x10a0 <LCD_Command>
    111a:	08 c0       	rjmp	.+16     	; 0x112c <LCD_String_xy+0x28>
  else if (row == 1 && pos < 16)
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	31 f4       	brne	.+12     	; 0x112c <LCD_String_xy+0x28>
    1120:	60 31       	cpi	r22, 0x10	; 16
    1122:	20 f4       	brcc	.+8      	; 0x112c <LCD_String_xy+0x28>
    LCD_Command((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    1124:	86 2f       	mov	r24, r22
    1126:	8f 70       	andi	r24, 0x0F	; 15
    1128:	80 6c       	ori	r24, 0xC0	; 192
    112a:	ba df       	rcall	.-140    	; 0x10a0 <LCD_Command>
  LCD_String(str);                    /* Call LCD string function */
    112c:	ce 01       	movw	r24, r28
    112e:	dc df       	rcall	.-72     	; 0x10e8 <LCD_String>
    1130:	df 91       	pop	r29
}
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <LCD_Clear>:
    1136:	81 e0       	ldi	r24, 0x01	; 1

void LCD_Clear() {
  LCD_Command(0x01); /* clear display */
    1138:	b3 df       	rcall	.-154    	; 0x10a0 <LCD_Command>
  LCD_Command(0x80); /* cursor at home position */
    113a:	80 e8       	ldi	r24, 0x80	; 128
    113c:	b1 cf       	rjmp	.-158    	; 0x10a0 <LCD_Command>
    113e:	08 95       	ret

00001140 <desligado_loop>:
char senha_op2[5] = "8741";                          // Senha do operador 2
char operador_atual = 0; // Variável para armazenar qual operador está logado (0 - nenhum, 1 - op1, 2 - op2)

void desligado_loop() {
  static float inicio = 0;
  if (teclaPressionada == '#') {
    1140:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <teclaPressionada>
    1144:	83 32       	cpi	r24, 0x23	; 35
    1146:	a1 f5       	brne	.+104    	; 0x11b0 <desligado_loop+0x70>
    if (inicio == 0) {
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <inicio.1772>
    1152:	70 91 b0 03 	lds	r23, 0x03B0	; 0x8003b0 <inicio.1772+0x1>
    1156:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <inicio.1772+0x2>
    115a:	90 91 b2 03 	lds	r25, 0x03B2	; 0x8003b2 <inicio.1772+0x3>
    115e:	0d d3       	rcall	.+1562   	; 0x177a <__cmpsf2>
    1160:	81 11       	cpse	r24, r1
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <desligado_loop+0x36>
      // Começa a contar o tempo no primeiro instante da pressão
      inicio = get_elapsed_time_ms();
    1164:	6a d2       	rcall	.+1236   	; 0x163a <get_elapsed_time_ms>
    1166:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <inicio.1772>
    116a:	70 93 b0 03 	sts	0x03B0, r23	; 0x8003b0 <inicio.1772+0x1>
    116e:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <inicio.1772+0x2>
    1172:	90 93 b2 03 	sts	0x03B2, r25	; 0x8003b2 <inicio.1772+0x3>
    }

    // Verifica há quanto tempo está pressionada
    float tempoPressionado = get_elapsed_time_ms() - inicio;
    1176:	61 d2       	rcall	.+1218   	; 0x163a <get_elapsed_time_ms>
    1178:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <inicio.1772>
    if (tempoPressionado >= 3000) {
    117c:	30 91 b0 03 	lds	r19, 0x03B0	; 0x8003b0 <inicio.1772+0x1>
    1180:	40 91 b1 03 	lds	r20, 0x03B1	; 0x8003b1 <inicio.1772+0x2>
    1184:	50 91 b2 03 	lds	r21, 0x03B2	; 0x8003b2 <inicio.1772+0x3>
    1188:	93 d2       	rcall	.+1318   	; 0x16b0 <__subsf3>
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e8       	ldi	r19, 0x80	; 128
    118e:	4b e3       	ldi	r20, 0x3B	; 59
    1190:	55 e4       	ldi	r21, 0x45	; 69
    1192:	11 d4       	rcall	.+2082   	; 0x19b6 <__gesf2>
    1194:	88 23       	and	r24, r24
    1196:	a4 f0       	brlt	.+40     	; 0x11c0 <desligado_loop+0x80>
    1198:	81 e0       	ldi	r24, 0x01	; 1
      estadoAtual = bloqueado;
    119a:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <estadoAtual>
    119e:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <inicio.1772>
      inicio = 0; // Reseta o contador
    11a2:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <inicio.1772+0x1>
    11a6:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <inicio.1772+0x2>
    11aa:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <inicio.1772+0x3>
    11ae:	08 95       	ret
    11b0:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <inicio.1772>
    }

  } else {
    // Soltou a tecla: reseta o contador
    inicio = 0;
    11b4:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <inicio.1772+0x1>
    11b8:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <inicio.1772+0x2>
    11bc:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <inicio.1772+0x3>
    11c0:	08 95       	ret

000011c2 <bloqueado_loop>:
    11c2:	cf 93       	push	r28
  }
}

void bloqueado_loop() {
    11c4:	df 93       	push	r29
  // Senha operador1: “3258” pode mudar configurações do sistema
  // Senha operador2: “8741”
  static int digitos = 0;

  LCD_Clear();
    11c6:	b7 df       	rcall	.-146    	; 0x1136 <LCD_Clear>
  LCD_String("Digite a senha:");
    11c8:	84 ef       	ldi	r24, 0xF4	; 244
    11ca:	92 e0       	ldi	r25, 0x02	; 2
    11cc:	8d df       	rcall	.-230    	; 0x10e8 <LCD_String>
  for (int i = 0; i < digitos; i++) {
    11ce:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <digitos.1776>
    11d2:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <digitos.1776+0x1>
    11d6:	18 16       	cp	r1, r24
    11d8:	19 06       	cpc	r1, r25
    11da:	7c f4       	brge	.+30     	; 0x11fa <bloqueado_loop+0x38>
    11dc:	c0 e0       	ldi	r28, 0x00	; 0
    11de:	d0 e0       	ldi	r29, 0x00	; 0
    LCD_String_xy(1, i, "*"); // Para cada dígito, mascara com * na tela
    11e0:	44 e0       	ldi	r20, 0x04	; 4
    11e2:	53 e0       	ldi	r21, 0x03	; 3
    11e4:	6c 2f       	mov	r22, r28
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	8d df       	rcall	.-230    	; 0x1104 <LCD_String_xy>
  // Senha operador2: “8741”
  static int digitos = 0;

  LCD_Clear();
  LCD_String("Digite a senha:");
  for (int i = 0; i < digitos; i++) {
    11ea:	21 96       	adiw	r28, 0x01	; 1
    11ec:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <digitos.1776>
    11f0:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <digitos.1776+0x1>
    11f4:	c8 17       	cp	r28, r24
    11f6:	d9 07       	cpc	r29, r25
    11f8:	9c f3       	brlt	.-26     	; 0x11e0 <bloqueado_loop+0x1e>
    LCD_String_xy(1, i, "*"); // Para cada dígito, mascara com * na tela
  }

  // Laço for para inserir a senha; a senha digitada é armazenada até terminar os 4 dígitos
  if (teclaPressionada != 'f' && teclaPressionada != '#' && teclaPressionada != '*' && digitos < 4) {
    11fa:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <teclaPressionada>
    11fe:	26 36       	cpi	r18, 0x66	; 102
    1200:	91 f0       	breq	.+36     	; 0x1226 <bloqueado_loop+0x64>
    1202:	23 32       	cpi	r18, 0x23	; 35
    1204:	81 f0       	breq	.+32     	; 0x1226 <bloqueado_loop+0x64>
    1206:	2a 32       	cpi	r18, 0x2A	; 42
    1208:	71 f0       	breq	.+28     	; 0x1226 <bloqueado_loop+0x64>
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	91 05       	cpc	r25, r1
    120e:	5c f4       	brge	.+22     	; 0x1226 <bloqueado_loop+0x64>
    senha_digitada[digitos] = teclaPressionada;
    1210:	fc 01       	movw	r30, r24
    1212:	eb 5c       	subi	r30, 0xCB	; 203
    1214:	fd 4f       	sbci	r31, 0xFD	; 253
    1216:	20 83       	st	Z, r18
    digitos++;
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <digitos.1776+0x1>
    121e:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <digitos.1776>
    Timer1_ms(100);
    1222:	84 e6       	ldi	r24, 0x64	; 100
    1224:	9c d1       	rcall	.+824    	; 0x155e <Timer1_ms>
  }

  // Faz a verificação dos digitos, retorna se ainda não foram digitados os 4 dígitos
  if (digitos < 4) {
    1226:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <digitos.1776>
    122a:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <digitos.1776+0x1>
    122e:	04 97       	sbiw	r24, 0x04	; 4
    1230:	0c f4       	brge	.+2      	; 0x1234 <bloqueado_loop+0x72>
    return;
  }

  LCD_Clear();
    1232:	62 c0       	rjmp	.+196    	; 0x12f8 <bloqueado_loop+0x136>
  if (strcmp(senha_digitada, senha_op1) == 0) // Verifica se a senha digitada é a senha do operador 1
    1234:	80 df       	rcall	.-256    	; 0x1136 <LCD_Clear>
    1236:	60 e3       	ldi	r22, 0x30	; 48
    1238:	72 e0       	ldi	r23, 0x02	; 2
    123a:	85 e3       	ldi	r24, 0x35	; 53
    123c:	92 e0       	ldi	r25, 0x02	; 2
    123e:	81 d4       	rcall	.+2306   	; 0x1b42 <strcmp>
    1240:	89 2b       	or	r24, r25
  {
    operador_atual = 1; // Atualiza para operador 1
    1242:	49 f4       	brne	.+18     	; 0x1256 <bloqueado_loop+0x94>
    1244:	81 e0       	ldi	r24, 0x01	; 1
    LCD_String("Operador 1");
    1246:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <operador_atual>
    124a:	86 e0       	ldi	r24, 0x06	; 6
    124c:	93 e0       	ldi	r25, 0x03	; 3
    Timer1_ms(3000);
    124e:	4c df       	rcall	.-360    	; 0x10e8 <LCD_String>
    1250:	88 eb       	ldi	r24, 0xB8	; 184
    1252:	85 d1       	rcall	.+778    	; 0x155e <Timer1_ms>
  } else if (strcmp(senha_digitada, senha_op2) == 0) // Verifica se a senha digitada é a senha do operador 2
    1254:	2a c0       	rjmp	.+84     	; 0x12aa <bloqueado_loop+0xe8>
    1256:	6b e2       	ldi	r22, 0x2B	; 43
    1258:	72 e0       	ldi	r23, 0x02	; 2
    125a:	85 e3       	ldi	r24, 0x35	; 53
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	71 d4       	rcall	.+2274   	; 0x1b42 <strcmp>
  {
    operador_atual = 2; // Atualiza para operador 2
    1260:	89 2b       	or	r24, r25
    1262:	49 f4       	brne	.+18     	; 0x1276 <bloqueado_loop+0xb4>
    LCD_String("Operador 2");
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <operador_atual>
    Timer1_ms(3000);
    126a:	81 e1       	ldi	r24, 0x11	; 17
    126c:	93 e0       	ldi	r25, 0x03	; 3
  } else {
    LCD_Clear();
    126e:	3c df       	rcall	.-392    	; 0x10e8 <LCD_String>
    LCD_String("Acesso invalido");
    1270:	88 eb       	ldi	r24, 0xB8	; 184
    1272:	75 d1       	rcall	.+746    	; 0x155e <Timer1_ms>
    1274:	1a c0       	rjmp	.+52     	; 0x12aa <bloqueado_loop+0xe8>
    1276:	5f df       	rcall	.-322    	; 0x1136 <LCD_Clear>
    Timer1_ms(2000);
    1278:	8c e1       	ldi	r24, 0x1C	; 28
    127a:	93 e0       	ldi	r25, 0x03	; 3
    127c:	35 df       	rcall	.-406    	; 0x10e8 <LCD_String>
    LCD_Clear();
    127e:	80 ed       	ldi	r24, 0xD0	; 208
    1280:	6e d1       	rcall	.+732    	; 0x155e <Timer1_ms>
    LCD_String("Tente novamente");
    1282:	59 df       	rcall	.-334    	; 0x1136 <LCD_Clear>
    1284:	8c e2       	ldi	r24, 0x2C	; 44
    1286:	93 e0       	ldi	r25, 0x03	; 3
    1288:	2f df       	rcall	.-418    	; 0x10e8 <LCD_String>
    Timer1_ms(2000);
    128a:	80 ed       	ldi	r24, 0xD0	; 208
    128c:	68 d1       	rcall	.+720    	; 0x155e <Timer1_ms>
    LCD_Clear();
    128e:	53 df       	rcall	.-346    	; 0x1136 <LCD_Clear>

    digitos = 0; // Reseta o contador de dígitos para nova tentativa
    1290:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <digitos.1776+0x1>
    // Limpa o vetor de senha digitada para uma que possa ser inserida uma senha válida
    senha_digitada[0] = 'F';
    1294:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <digitos.1776>
    senha_digitada[1] = 'F';
    1298:	e5 e3       	ldi	r30, 0x35	; 53
    senha_digitada[2] = 'F';
    129a:	f2 e0       	ldi	r31, 0x02	; 2
    senha_digitada[3] = 'F';
    senha_digitada[4] = '\0';
    129c:	86 e4       	ldi	r24, 0x46	; 70
    return;
  }

  // Se a senha estiver correta, desbloqueia o sistema
  LCD_Clear();
    129e:	80 83       	st	Z, r24
  LCD_String("Senha correta");
    12a0:	81 83       	std	Z+1, r24	; 0x01
    12a2:	82 83       	std	Z+2, r24	; 0x02
    12a4:	83 83       	std	Z+3, r24	; 0x03
    12a6:	14 82       	std	Z+4, r1	; 0x04
  Timer1_ms(1500);
    12a8:	27 c0       	rjmp	.+78     	; 0x12f8 <bloqueado_loop+0x136>
    12aa:	45 df       	rcall	.-374    	; 0x1136 <LCD_Clear>
  LCD_Clear();
    12ac:	8c e3       	ldi	r24, 0x3C	; 60
  LCD_String("Desbloqueado");
    12ae:	93 e0       	ldi	r25, 0x03	; 3
    12b0:	1b df       	rcall	.-458    	; 0x10e8 <LCD_String>
    12b2:	8c ed       	ldi	r24, 0xDC	; 220
    12b4:	54 d1       	rcall	.+680    	; 0x155e <Timer1_ms>
  Timer1_ms(1500);
    12b6:	3f df       	rcall	.-386    	; 0x1136 <LCD_Clear>
    12b8:	8a e4       	ldi	r24, 0x4A	; 74
  LCD_Clear();
    12ba:	93 e0       	ldi	r25, 0x03	; 3
    12bc:	15 df       	rcall	.-470    	; 0x10e8 <LCD_String>
  LCD_String("Uber DeLEats");
    12be:	8c ed       	ldi	r24, 0xDC	; 220
    12c0:	4e d1       	rcall	.+668    	; 0x155e <Timer1_ms>
    12c2:	39 df       	rcall	.-398    	; 0x1136 <LCD_Clear>
    12c4:	87 e5       	ldi	r24, 0x57	; 87
  Timer1_ms(1500);
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	0f df       	rcall	.-482    	; 0x10e8 <LCD_String>
    12ca:	8c ed       	ldi	r24, 0xDC	; 220
  LCD_Clear();
    12cc:	48 d1       	rcall	.+656    	; 0x155e <Timer1_ms>
    12ce:	33 df       	rcall	.-410    	; 0x1136 <LCD_Clear>

  if (operador_atual == 1) // Se for a senha do operador 1
    12d0:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <operador_atual>
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	31 f4       	brne	.+12     	; 0x12e4 <bloqueado_loop+0x122>
  {
    LCD_String("Operador 1");
    12d8:	86 e0       	ldi	r24, 0x06	; 6
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	05 df       	rcall	.-502    	; 0x10e8 <LCD_String>
    12de:	8c ed       	ldi	r24, 0xDC	; 220
    Timer1_ms(1500);
    12e0:	3e d1       	rcall	.+636    	; 0x155e <Timer1_ms>
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <bloqueado_loop+0x130>
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	29 f4       	brne	.+10     	; 0x12f2 <bloqueado_loop+0x130>
    // Transm_estado_veiculo('1'); // Transmite mensagem serial de estado do carro como disponivel (1)
  } else if (operador_atual == 2) // Se for a senha do operador 2
    12e8:	81 e1       	ldi	r24, 0x11	; 17
    12ea:	93 e0       	ldi	r25, 0x03	; 3
  {
    LCD_String("Operador 2");
    12ec:	fd de       	rcall	.-518    	; 0x10e8 <LCD_String>
    12ee:	8c ed       	ldi	r24, 0xDC	; 220
    12f0:	36 d1       	rcall	.+620    	; 0x155e <Timer1_ms>
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    Timer1_ms(1500);
    12f4:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <estadoAtual>
    12f8:	df 91       	pop	r29
    // Transm_estado_veiculo('1'); // Transmite mensagem serial de estado do carro como disponivel (1)
  }

  estadoAtual = operacao; // Atualiza para sistema desbloqueado
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <desligar_sistema>:
    12fe:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <teclaPressionada>
}
    1302:	8a 32       	cpi	r24, 0x2A	; 42
    1304:	09 f0       	breq	.+2      	; 0x1308 <desligar_sistema+0xa>

void desligar_sistema() {
  static float inicio = 0;
  if (teclaPressionada == '*') {
    1306:	3b c0       	rjmp	.+118    	; 0x137e <desligar_sistema+0x80>
    if (inicio == 0) {
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	a9 01       	movw	r20, r18
    130e:	60 91 a9 03 	lds	r22, 0x03A9	; 0x8003a9 <inicio.1783>
    1312:	70 91 aa 03 	lds	r23, 0x03AA	; 0x8003aa <inicio.1783+0x1>
    1316:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <inicio.1783+0x2>
    131a:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <inicio.1783+0x3>
    131e:	2d d2       	rcall	.+1114   	; 0x177a <__cmpsf2>
    1320:	81 11       	cpse	r24, r1
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <desligar_sistema+0x38>
      // Começa a contar o tempo no primeiro instante da pressão
      inicio = get_elapsed_time_ms();
    1324:	8a d1       	rcall	.+788    	; 0x163a <get_elapsed_time_ms>
    1326:	60 93 a9 03 	sts	0x03A9, r22	; 0x8003a9 <inicio.1783>
    132a:	70 93 aa 03 	sts	0x03AA, r23	; 0x8003aa <inicio.1783+0x1>
    132e:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <inicio.1783+0x2>
    1332:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <inicio.1783+0x3>
    }

    // Verifica há quanto tempo está pressionada
    float tempoPressionado = get_elapsed_time_ms() - inicio;
    1336:	81 d1       	rcall	.+770    	; 0x163a <get_elapsed_time_ms>
    1338:	20 91 a9 03 	lds	r18, 0x03A9	; 0x8003a9 <inicio.1783>
    if (tempoPressionado >= 4000) {
    133c:	30 91 aa 03 	lds	r19, 0x03AA	; 0x8003aa <inicio.1783+0x1>
    1340:	40 91 ab 03 	lds	r20, 0x03AB	; 0x8003ab <inicio.1783+0x2>
    1344:	50 91 ac 03 	lds	r21, 0x03AC	; 0x8003ac <inicio.1783+0x3>
    1348:	b3 d1       	rcall	.+870    	; 0x16b0 <__subsf3>
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	4a e7       	ldi	r20, 0x7A	; 122
    1350:	55 e4       	ldi	r21, 0x45	; 69
    1352:	31 d3       	rcall	.+1634   	; 0x19b6 <__gesf2>
    1354:	88 23       	and	r24, r24
    1356:	dc f0       	brlt	.+54     	; 0x138e <desligar_sistema+0x90>
    1358:	44 e6       	ldi	r20, 0x64	; 100
      LCD_String_xy(1, 0, "Desligando...");
    135a:	53 e0       	ldi	r21, 0x03	; 3
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	d1 de       	rcall	.-606    	; 0x1104 <LCD_String_xy>
      Timer1_ms(2000);
    1362:	80 ed       	ldi	r24, 0xD0	; 208
    1364:	fc d0       	rcall	.+504    	; 0x155e <Timer1_ms>
    1366:	e7 de       	rcall	.-562    	; 0x1136 <LCD_Clear>
      LCD_Clear();
    1368:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <estadoAtual>
      estadoAtual = desligado;
    136c:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <inicio.1783>
      // desligar o DISPLAY
      inicio = 0; // Reseta o contador
    1370:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <inicio.1783+0x1>
    1374:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <inicio.1783+0x2>
    1378:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <inicio.1783+0x3>
    137c:	08 95       	ret
    137e:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <inicio.1783>
    }

  } else {
    // Soltou a tecla: reseta o contador
    inicio = 0;
    1382:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <inicio.1783+0x1>
    1386:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <inicio.1783+0x2>
    138a:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <inicio.1783+0x3>
    138e:	08 95       	ret

00001390 <main>:
    1390:	1c d0       	rcall	.+56     	; 0x13ca <teclado_init>
    1392:	0c d1       	rcall	.+536    	; 0x15ac <timer2_init>
}

int main() {
  teclado_init();
  timer2_init();
  LCD_Init();
    1394:	99 de       	rcall	.-718    	; 0x10c8 <LCD_Init>
    1396:	5e d0       	rcall	.+188    	; 0x1454 <tecla>

  int fora_de_operacao = 1;
  while (fora_de_operacao) {
    teclaPressionada = tecla();
    1398:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <teclaPressionada>
    139c:	b0 df       	rcall	.-160    	; 0x12fe <desligar_sistema>
    desligar_sistema();
    139e:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <estadoAtual>

    switch (estadoAtual) {
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <main+0x22>
    13a6:	18 f0       	brcs	.+6      	; 0x13ae <main+0x1e>
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	39 f0       	breq	.+14     	; 0x13ba <main+0x2a>
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <main+0x26>
    case desligado:
      desligado_loop();
    13ae:	c8 de       	rcall	.-624    	; 0x1140 <desligado_loop>
      break;
    13b0:	f2 cf       	rjmp	.-28     	; 0x1396 <main+0x6>
    case bloqueado:
      bloqueado_loop();
    13b2:	07 df       	rcall	.-498    	; 0x11c2 <bloqueado_loop>
    13b4:	f0 cf       	rjmp	.-32     	; 0x1396 <main+0x6>
      break;
    13b6:	c4 de       	rcall	.-632    	; 0x1140 <desligado_loop>
    case operacao:
      fora_de_operacao = 0;
      break;
    default:
      desligado_loop();
    13b8:	ee cf       	rjmp	.-36     	; 0x1396 <main+0x6>
    13ba:	7f cd       	rjmp	.-1282   	; 0xeba <operacao_loop>
    13bc:	08 95       	ret

000013be <atraso_debounce>:
#include <stdlib.h>

int BOUNCE = 2; // número de leituras estáveis para considerar a tecla pressionada

void atraso_debounce() {
  while ((TIFR0 & (1 << 0)) == 0); // enquanto a flag de interrup��o do timer 0 n�o for 1
    13be:	a8 9b       	sbis	0x15, 0	; 21
    13c0:	fe cf       	rjmp	.-4      	; 0x13be <atraso_debounce>
  TCNT0 = 31;
    13c2:	8f e1       	ldi	r24, 0x1F	; 31
    13c4:	86 bd       	out	0x26, r24	; 38
  TIFR0 |= (1 << 0); // zera a flag
    13c6:	a8 9a       	sbi	0x15, 0	; 21
    13c8:	08 95       	ret

000013ca <teclado_init>:
}

// Inicializar teclado
void teclado_init() {
  TCCR0A = 0; // configur���o do timer zero para debounce
    13ca:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 4;
    13cc:	84 e0       	ldi	r24, 0x04	; 4
    13ce:	85 bd       	out	0x25, r24	; 37
  TCNT0 = 31;
    13d0:	8f e1       	ldi	r24, 0x1F	; 31
    13d2:	86 bd       	out	0x26, r24	; 38

  DDRK &= ~(1 << 7 | 1 << 6 | 1 << 5 | 1 << 4); // define PORTK como metade entrada (colunas)
    13d4:	e7 e0       	ldi	r30, 0x07	; 7
    13d6:	f1 e0       	ldi	r31, 0x01	; 1
    13d8:	80 81       	ld	r24, Z
    13da:	8f 70       	andi	r24, 0x0F	; 15
    13dc:	80 83       	st	Z, r24
  DDRK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);  // define PORTK como sa�da (linhas)
    13de:	80 81       	ld	r24, Z
    13e0:	8f 60       	ori	r24, 0x0F	; 15
    13e2:	80 83       	st	Z, r24
  PORTK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
    13e4:	e8 e0       	ldi	r30, 0x08	; 8
    13e6:	f1 e0       	ldi	r31, 0x01	; 1
    13e8:	80 81       	ld	r24, Z
    13ea:	8f 60       	ori	r24, 0x0F	; 15
    13ec:	80 83       	st	Z, r24

  PINK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3); // habilita pull-up nos pinos
    13ee:	e6 e0       	ldi	r30, 0x06	; 6
    13f0:	f1 e0       	ldi	r31, 0x01	; 1
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 60       	ori	r24, 0x0F	; 15
    13f6:	80 83       	st	Z, r24
    13f8:	08 95       	ret

000013fa <le_coluna>:
}

// Fun��o de debounce para leitura do teclado, a fun��o recebe como argumento a
// coluna da matriz de contato
char le_coluna(char pino) {
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
    1404:	8c 5f       	subi	r24, 0xFC	; 252
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	f9 2e       	mov	r15, r25
    140a:	01 c0       	rjmp	.+2      	; 0x140e <le_coluna+0x14>
    140c:	ff 0c       	add	r15, r15
    140e:	8a 95       	dec	r24
    1410:	ea f7       	brpl	.-6      	; 0x140c <le_coluna+0x12>
}

// Fun��o de debounce para leitura do teclado, a fun��o recebe como argumento a
// coluna da matriz de contato
char le_coluna(char pino) {
  char count = 0, key_last = 0, key_now = 0;
    1412:	d0 e0       	ldi	r29, 0x00	; 0
    1414:	c0 e0       	ldi	r28, 0x00	; 0

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
    1416:	06 e0       	ldi	r16, 0x06	; 6
    1418:	11 e0       	ldi	r17, 0x01	; 1
// coluna da matriz de contato
char le_coluna(char pino) {
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();
    141a:	d1 df       	rcall	.-94     	; 0x13be <atraso_debounce>

    key_now = PINK & (1 << (pino + 4));
    141c:	f8 01       	movw	r30, r16
    141e:	90 81       	ld	r25, Z
    1420:	9f 21       	and	r25, r15

    if (key_now == key_last) {
    1422:	d9 13       	cpse	r29, r25
    1424:	02 c0       	rjmp	.+4      	; 0x142a <le_coluna+0x30>
      count = count + 1;
    1426:	cf 5f       	subi	r28, 0xFF	; 255
    1428:	01 c0       	rjmp	.+2      	; 0x142c <le_coluna+0x32>
    } else {
      count = 0;
    142a:	c0 e0       	ldi	r28, 0x00	; 0
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
    142c:	d9 2f       	mov	r29, r25
      count = count + 1;
    } else {
      count = 0;
    }

    if (count == BOUNCE) {
    142e:	2c 2f       	mov	r18, r28
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <BOUNCE>
    1436:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <BOUNCE+0x1>
    143a:	24 17       	cp	r18, r20
    143c:	35 07       	cpc	r19, r21
    143e:	69 f7       	brne	.-38     	; 0x141a <le_coluna+0x20>
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	91 11       	cpse	r25, r1
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <le_coluna+0x4e>
    1446:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    } else {
      key_last = key_now;
    }
  }
}
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	08 95       	ret

00001454 <tecla>:

// Retorna tecla pressionada
char tecla() {
    1454:	af 92       	push	r10
    1456:	bf 92       	push	r11
    1458:	cf 92       	push	r12
    145a:	df 92       	push	r13
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	60 97       	sbiw	r28, 0x10	; 16
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};
    1478:	80 e1       	ldi	r24, 0x10	; 16
    147a:	ec e3       	ldi	r30, 0x3C	; 60
    147c:	f2 e0       	ldi	r31, 0x02	; 2
    147e:	de 01       	movw	r26, r28
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	01 90       	ld	r0, Z+
    1484:	0d 92       	st	X+, r0
    1486:	8a 95       	dec	r24
    1488:	e1 f7       	brne	.-8      	; 0x1482 <tecla+0x2e>

  for (linha = 0; linha < 4; linha++) {
    148a:	e1 2c       	mov	r14, r1
    148c:	f1 2c       	mov	r15, r1
    PORTK |= 0x0F;
    148e:	68 94       	set
    1490:	cc 24       	eor	r12, r12
    1492:	c3 f8       	bld	r12, 3
    1494:	dd 24       	eor	r13, r13
    1496:	d3 94       	inc	r13
    PORTK &= ~(1 << linha); // Itera as colunas do teclado
    1498:	aa 24       	eor	r10, r10
    149a:	a3 94       	inc	r10
    149c:	b1 2c       	mov	r11, r1
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};

  for (linha = 0; linha < 4; linha++) {
    PORTK |= 0x0F;
    149e:	f6 01       	movw	r30, r12
    14a0:	80 81       	ld	r24, Z
    14a2:	8f 60       	ori	r24, 0x0F	; 15
    14a4:	80 83       	st	Z, r24
    PORTK &= ~(1 << linha); // Itera as colunas do teclado
    14a6:	90 81       	ld	r25, Z
    14a8:	95 01       	movw	r18, r10
    14aa:	0e 2c       	mov	r0, r14
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <tecla+0x5e>
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <tecla+0x5a>
    14b6:	82 2f       	mov	r24, r18
    14b8:	80 95       	com	r24
    14ba:	89 23       	and	r24, r25
    14bc:	80 83       	st	Z, r24

    for (coluna = 0; coluna < 3; coluna++) {
    14be:	00 e0       	ldi	r16, 0x00	; 0
    14c0:	10 e0       	ldi	r17, 0x00	; 0
      if (!le_coluna(coluna)) {
    14c2:	80 2f       	mov	r24, r16
    14c4:	9a df       	rcall	.-204    	; 0x13fa <le_coluna>
    14c6:	81 11       	cpse	r24, r1
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <tecla+0x94>
        // while(!le_coluna(coluna));
        return teclado[linha][coluna];
    14ca:	ee 0c       	add	r14, r14
    14cc:	ff 1c       	adc	r15, r15
    14ce:	ee 0c       	add	r14, r14
    14d0:	ff 1c       	adc	r15, r15
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	8c 0f       	add	r24, r28
    14d8:	9d 1f       	adc	r25, r29
    14da:	e8 0e       	add	r14, r24
    14dc:	f9 1e       	adc	r15, r25
    14de:	f7 01       	movw	r30, r14
    14e0:	e0 0f       	add	r30, r16
    14e2:	f1 1f       	adc	r31, r17
    14e4:	80 81       	ld	r24, Z
    14e6:	0d c0       	rjmp	.+26     	; 0x1502 <tecla+0xae>

  for (linha = 0; linha < 4; linha++) {
    PORTK |= 0x0F;
    PORTK &= ~(1 << linha); // Itera as colunas do teclado

    for (coluna = 0; coluna < 3; coluna++) {
    14e8:	0f 5f       	subi	r16, 0xFF	; 255
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	03 30       	cpi	r16, 0x03	; 3
    14ee:	11 05       	cpc	r17, r1
    14f0:	41 f7       	brne	.-48     	; 0x14c2 <tecla+0x6e>
char tecla() {
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};

  for (linha = 0; linha < 4; linha++) {
    14f2:	9f ef       	ldi	r25, 0xFF	; 255
    14f4:	e9 1a       	sub	r14, r25
    14f6:	f9 0a       	sbc	r15, r25
    14f8:	e4 e0       	ldi	r30, 0x04	; 4
    14fa:	ee 16       	cp	r14, r30
    14fc:	f1 04       	cpc	r15, r1
    14fe:	79 f6       	brne	.-98     	; 0x149e <tecla+0x4a>
        // while(!le_coluna(coluna));
        return teclado[linha][coluna];
      }
    }
  }
  return 'f'; // caso nenhuma tecla seja pressionada
    1500:	86 e6       	ldi	r24, 0x66	; 102
}
    1502:	60 96       	adiw	r28, 0x10	; 16
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	bf 90       	pop	r11
    1520:	af 90       	pop	r10
    1522:	08 95       	ret

00001524 <config_timer1>:
  while ((TIFR0 & (1 << 1)) == 0); // Contagens até o flag "zerar"
  TIFR0 = (1 << 1);                // limpa flag
}

void config_timer1(unsigned char p) {
  TCCR1A = 0;       // Modo com Comparacão
    1524:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
  TCCR1B = p;       // préscaler config
    1528:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
  TCNT1 = 0;        // Tempo de inicio
    152c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1530:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
  TIFR1 = (1 << 1); // limpa flag
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	86 bb       	out	0x16, r24	; 22
    1538:	08 95       	ret

0000153a <Timer1_us>:
}

void Timer1_us(unsigned char tempo_final) {
    153a:	cf 93       	push	r28
    153c:	c8 2f       	mov	r28, r24
  config_timer1(10);
    153e:	8a e0       	ldi	r24, 0x0A	; 10
    1540:	f1 df       	rcall	.-30     	; 0x1524 <config_timer1>
  OCR1A = tempo_final * 2;         // Tempo final da contagem   *2
    1542:	8c 2f       	mov	r24, r28
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    154e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
  while ((TIFR1 & (1 << 1)) == 0); // Contagens até o flag "zerar"
    1552:	b1 9b       	sbis	0x16, 1	; 22
    1554:	fe cf       	rjmp	.-4      	; 0x1552 <Timer1_us+0x18>
  TIFR1 = (1 << 1);                // limpa flag
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	86 bb       	out	0x16, r24	; 22
}
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <Timer1_ms>:

void Timer1_ms(unsigned char tempo_final) {
    155e:	cf 93       	push	r28
    1560:	c8 2f       	mov	r28, r24
  config_timer1(12);
    1562:	8c e0       	ldi	r24, 0x0C	; 12
    1564:	df df       	rcall	.-66     	; 0x1524 <config_timer1>
  OCR1A = tempo_final * 63;        // Tempo final da contagem   *62.5
    1566:	2f e3       	ldi	r18, 0x3F	; 63
    1568:	c2 9f       	mul	r28, r18
    156a:	c0 01       	movw	r24, r0
    156c:	11 24       	eor	r1, r1
    156e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1572:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
  while ((TIFR1 & (1 << 1)) == 0); // Contagens até o flag "zerar"
    1576:	b1 9b       	sbis	0x16, 1	; 22
    1578:	fe cf       	rjmp	.-4      	; 0x1576 <Timer1_ms+0x18>
  TIFR1 = (1 << 1);                // limpa flag
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	86 bb       	out	0x16, r24	; 22
}
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

00001582 <Timer1>:
//
void Timer1(unsigned char tempo_final) {
    1582:	cf 93       	push	r28
    1584:	c8 2f       	mov	r28, r24
  config_timer1(13);
    1586:	8d e0       	ldi	r24, 0x0D	; 13
    1588:	cd df       	rcall	.-102    	; 0x1524 <config_timer1>
  OCR1A = tempo_final * 15625;     // Tempo final da contagem *15625
    158a:	29 e0       	ldi	r18, 0x09	; 9
    158c:	3d e3       	ldi	r19, 0x3D	; 61
    158e:	c2 9f       	mul	r28, r18
    1590:	c0 01       	movw	r24, r0
    1592:	c3 9f       	mul	r28, r19
    1594:	90 0d       	add	r25, r0
    1596:	11 24       	eor	r1, r1
    1598:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    159c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
  while ((TIFR1 & (1 << 1)) == 0); // Contagens até o flag "zerar"
    15a0:	b1 9b       	sbis	0x16, 1	; 22
    15a2:	fe cf       	rjmp	.-4      	; 0x15a0 <Timer1+0x1e>
  TIFR1 = (1 << 1);                // limpa flag
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	86 bb       	out	0x16, r24	; 22
}
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <timer2_init>:
#include "timer2.h"

volatile float overflow_count = 0;

void timer2_init() {
  TCCR2A = 0x00;         // Configura o Timer1 em modo normal
    15ac:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
  TCCR2B = (1 << CS12);  // Prescaler = 256
    15b0:	84 e0       	ldi	r24, 0x04	; 4
    15b2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
  TCNT2 = 0;             // Inicializa counter
    15b6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
  TIMSK2 = (1 << TOIE2); // Habilita interrupção por overflow do Timer1
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
  sei();                 // Habilita interrupções globais
    15c0:	78 94       	sei
    15c2:	08 95       	ret

000015c4 <__vector_15>:
}

ISR(TIMER2_OVF_vect) {
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	0b b6       	in	r0, 0x3b	; 59
    15d0:	0f 92       	push	r0
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
  overflow_count++; // Incrementa overflow count
    15ea:	60 91 b5 03 	lds	r22, 0x03B5	; 0x8003b5 <overflow_count>
    15ee:	70 91 b6 03 	lds	r23, 0x03B6	; 0x8003b6 <overflow_count+0x1>
    15f2:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <overflow_count+0x2>
    15f6:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <overflow_count+0x3>
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	57 d0       	rcall	.+174    	; 0x16b2 <__addsf3>
    1604:	60 93 b5 03 	sts	0x03B5, r22	; 0x8003b5 <overflow_count>
    1608:	70 93 b6 03 	sts	0x03B6, r23	; 0x8003b6 <overflow_count+0x1>
    160c:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <overflow_count+0x2>
    1610:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <overflow_count+0x3>
}
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	bf 91       	pop	r27
    161a:	af 91       	pop	r26
    161c:	9f 91       	pop	r25
    161e:	8f 91       	pop	r24
    1620:	7f 91       	pop	r23
    1622:	6f 91       	pop	r22
    1624:	5f 91       	pop	r21
    1626:	4f 91       	pop	r20
    1628:	3f 91       	pop	r19
    162a:	2f 91       	pop	r18
    162c:	0f 90       	pop	r0
    162e:	0b be       	out	0x3b, r0	; 59
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	1f 90       	pop	r1
    1638:	18 95       	reti

0000163a <get_elapsed_time_ms>:

float get_elapsed_time_ms() {
    163a:	cf 92       	push	r12
    163c:	df 92       	push	r13
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
  float total_ticks;
  float elapsed_time_ms;

  // Desabilita interrupção para leitura consistente de overflow_count e TCNT1
  int sreg = SREG;
    1646:	2f b7       	in	r18, 0x3f	; 63
  cli();
    1648:	f8 94       	cli
  total_ticks = (overflow_count * 65536UL) + TCNT1;
    164a:	60 91 b5 03 	lds	r22, 0x03B5	; 0x8003b5 <overflow_count>
    164e:	70 91 b6 03 	lds	r23, 0x03B6	; 0x8003b6 <overflow_count+0x1>
    1652:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <overflow_count+0x2>
    1656:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <overflow_count+0x3>
    165a:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    165e:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
  SREG = sreg;
    1662:	2f bf       	out	0x3f, r18	; 63

  // Converte para milissegundos
  elapsed_time_ms = (total_ticks * 1000UL * 256UL) / F_CPU;

  return elapsed_time_ms;
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	57 e4       	ldi	r21, 0x47	; 71
    166c:	a8 d1       	rcall	.+848    	; 0x19be <__mulsf3>
    166e:	6b 01       	movw	r12, r22
    1670:	7c 01       	movw	r14, r24
    1672:	be 01       	movw	r22, r28
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	ec d0       	rcall	.+472    	; 0x1852 <__floatunsisf>
    167a:	9b 01       	movw	r18, r22
    167c:	ac 01       	movw	r20, r24
    167e:	c7 01       	movw	r24, r14
    1680:	b6 01       	movw	r22, r12
    1682:	17 d0       	rcall	.+46     	; 0x16b2 <__addsf3>
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a e7       	ldi	r20, 0x7A	; 122
    168a:	54 e4       	ldi	r21, 0x44	; 68
    168c:	98 d1       	rcall	.+816    	; 0x19be <__mulsf3>
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	53 e4       	ldi	r21, 0x43	; 67
    1696:	93 d1       	rcall	.+806    	; 0x19be <__mulsf3>
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	34 e2       	ldi	r19, 0x24	; 36
    169c:	44 e7       	ldi	r20, 0x74	; 116
    169e:	5b e4       	ldi	r21, 0x4B	; 75
    16a0:	70 d0       	rcall	.+224    	; 0x1782 <__divsf3>
}
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	cf 90       	pop	r12
    16ae:	08 95       	ret

000016b0 <__subsf3>:
    16b0:	50 58       	subi	r21, 0x80	; 128

000016b2 <__addsf3>:
    16b2:	bb 27       	eor	r27, r27
    16b4:	aa 27       	eor	r26, r26
    16b6:	0e d0       	rcall	.+28     	; 0x16d4 <__addsf3x>
    16b8:	44 c1       	rjmp	.+648    	; 0x1942 <__fp_round>
    16ba:	35 d1       	rcall	.+618    	; 0x1926 <__fp_pscA>
    16bc:	30 f0       	brcs	.+12     	; 0x16ca <__addsf3+0x18>
    16be:	3a d1       	rcall	.+628    	; 0x1934 <__fp_pscB>
    16c0:	20 f0       	brcs	.+8      	; 0x16ca <__addsf3+0x18>
    16c2:	31 f4       	brne	.+12     	; 0x16d0 <__addsf3+0x1e>
    16c4:	9f 3f       	cpi	r25, 0xFF	; 255
    16c6:	11 f4       	brne	.+4      	; 0x16cc <__addsf3+0x1a>
    16c8:	1e f4       	brtc	.+6      	; 0x16d0 <__addsf3+0x1e>
    16ca:	2a c1       	rjmp	.+596    	; 0x1920 <__fp_nan>
    16cc:	0e f4       	brtc	.+2      	; 0x16d0 <__addsf3+0x1e>
    16ce:	e0 95       	com	r30
    16d0:	e7 fb       	bst	r30, 7
    16d2:	20 c1       	rjmp	.+576    	; 0x1914 <__fp_inf>

000016d4 <__addsf3x>:
    16d4:	e9 2f       	mov	r30, r25
    16d6:	46 d1       	rcall	.+652    	; 0x1964 <__fp_split3>
    16d8:	80 f3       	brcs	.-32     	; 0x16ba <__addsf3+0x8>
    16da:	ba 17       	cp	r27, r26
    16dc:	62 07       	cpc	r22, r18
    16de:	73 07       	cpc	r23, r19
    16e0:	84 07       	cpc	r24, r20
    16e2:	95 07       	cpc	r25, r21
    16e4:	18 f0       	brcs	.+6      	; 0x16ec <__addsf3x+0x18>
    16e6:	71 f4       	brne	.+28     	; 0x1704 <__addsf3x+0x30>
    16e8:	9e f5       	brtc	.+102    	; 0x1750 <__addsf3x+0x7c>
    16ea:	5e c1       	rjmp	.+700    	; 0x19a8 <__fp_zero>
    16ec:	0e f4       	brtc	.+2      	; 0x16f0 <__addsf3x+0x1c>
    16ee:	e0 95       	com	r30
    16f0:	0b 2e       	mov	r0, r27
    16f2:	ba 2f       	mov	r27, r26
    16f4:	a0 2d       	mov	r26, r0
    16f6:	0b 01       	movw	r0, r22
    16f8:	b9 01       	movw	r22, r18
    16fa:	90 01       	movw	r18, r0
    16fc:	0c 01       	movw	r0, r24
    16fe:	ca 01       	movw	r24, r20
    1700:	a0 01       	movw	r20, r0
    1702:	11 24       	eor	r1, r1
    1704:	ff 27       	eor	r31, r31
    1706:	59 1b       	sub	r21, r25
    1708:	99 f0       	breq	.+38     	; 0x1730 <__addsf3x+0x5c>
    170a:	59 3f       	cpi	r21, 0xF9	; 249
    170c:	50 f4       	brcc	.+20     	; 0x1722 <__addsf3x+0x4e>
    170e:	50 3e       	cpi	r21, 0xE0	; 224
    1710:	68 f1       	brcs	.+90     	; 0x176c <__addsf3x+0x98>
    1712:	1a 16       	cp	r1, r26
    1714:	f0 40       	sbci	r31, 0x00	; 0
    1716:	a2 2f       	mov	r26, r18
    1718:	23 2f       	mov	r18, r19
    171a:	34 2f       	mov	r19, r20
    171c:	44 27       	eor	r20, r20
    171e:	58 5f       	subi	r21, 0xF8	; 248
    1720:	f3 cf       	rjmp	.-26     	; 0x1708 <__addsf3x+0x34>
    1722:	46 95       	lsr	r20
    1724:	37 95       	ror	r19
    1726:	27 95       	ror	r18
    1728:	a7 95       	ror	r26
    172a:	f0 40       	sbci	r31, 0x00	; 0
    172c:	53 95       	inc	r21
    172e:	c9 f7       	brne	.-14     	; 0x1722 <__addsf3x+0x4e>
    1730:	7e f4       	brtc	.+30     	; 0x1750 <__addsf3x+0x7c>
    1732:	1f 16       	cp	r1, r31
    1734:	ba 0b       	sbc	r27, r26
    1736:	62 0b       	sbc	r22, r18
    1738:	73 0b       	sbc	r23, r19
    173a:	84 0b       	sbc	r24, r20
    173c:	ba f0       	brmi	.+46     	; 0x176c <__addsf3x+0x98>
    173e:	91 50       	subi	r25, 0x01	; 1
    1740:	a1 f0       	breq	.+40     	; 0x176a <__addsf3x+0x96>
    1742:	ff 0f       	add	r31, r31
    1744:	bb 1f       	adc	r27, r27
    1746:	66 1f       	adc	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	88 1f       	adc	r24, r24
    174c:	c2 f7       	brpl	.-16     	; 0x173e <__addsf3x+0x6a>
    174e:	0e c0       	rjmp	.+28     	; 0x176c <__addsf3x+0x98>
    1750:	ba 0f       	add	r27, r26
    1752:	62 1f       	adc	r22, r18
    1754:	73 1f       	adc	r23, r19
    1756:	84 1f       	adc	r24, r20
    1758:	48 f4       	brcc	.+18     	; 0x176c <__addsf3x+0x98>
    175a:	87 95       	ror	r24
    175c:	77 95       	ror	r23
    175e:	67 95       	ror	r22
    1760:	b7 95       	ror	r27
    1762:	f7 95       	ror	r31
    1764:	9e 3f       	cpi	r25, 0xFE	; 254
    1766:	08 f0       	brcs	.+2      	; 0x176a <__addsf3x+0x96>
    1768:	b3 cf       	rjmp	.-154    	; 0x16d0 <__addsf3+0x1e>
    176a:	93 95       	inc	r25
    176c:	88 0f       	add	r24, r24
    176e:	08 f0       	brcs	.+2      	; 0x1772 <__addsf3x+0x9e>
    1770:	99 27       	eor	r25, r25
    1772:	ee 0f       	add	r30, r30
    1774:	97 95       	ror	r25
    1776:	87 95       	ror	r24
    1778:	08 95       	ret

0000177a <__cmpsf2>:
    177a:	a8 d0       	rcall	.+336    	; 0x18cc <__fp_cmp>
    177c:	08 f4       	brcc	.+2      	; 0x1780 <__cmpsf2+0x6>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	08 95       	ret

00001782 <__divsf3>:
    1782:	0c d0       	rcall	.+24     	; 0x179c <__divsf3x>
    1784:	de c0       	rjmp	.+444    	; 0x1942 <__fp_round>
    1786:	d6 d0       	rcall	.+428    	; 0x1934 <__fp_pscB>
    1788:	40 f0       	brcs	.+16     	; 0x179a <__divsf3+0x18>
    178a:	cd d0       	rcall	.+410    	; 0x1926 <__fp_pscA>
    178c:	30 f0       	brcs	.+12     	; 0x179a <__divsf3+0x18>
    178e:	21 f4       	brne	.+8      	; 0x1798 <__divsf3+0x16>
    1790:	5f 3f       	cpi	r21, 0xFF	; 255
    1792:	19 f0       	breq	.+6      	; 0x179a <__divsf3+0x18>
    1794:	bf c0       	rjmp	.+382    	; 0x1914 <__fp_inf>
    1796:	51 11       	cpse	r21, r1
    1798:	08 c1       	rjmp	.+528    	; 0x19aa <__fp_szero>
    179a:	c2 c0       	rjmp	.+388    	; 0x1920 <__fp_nan>

0000179c <__divsf3x>:
    179c:	e3 d0       	rcall	.+454    	; 0x1964 <__fp_split3>
    179e:	98 f3       	brcs	.-26     	; 0x1786 <__divsf3+0x4>

000017a0 <__divsf3_pse>:
    17a0:	99 23       	and	r25, r25
    17a2:	c9 f3       	breq	.-14     	; 0x1796 <__divsf3+0x14>
    17a4:	55 23       	and	r21, r21
    17a6:	b1 f3       	breq	.-20     	; 0x1794 <__divsf3+0x12>
    17a8:	95 1b       	sub	r25, r21
    17aa:	55 0b       	sbc	r21, r21
    17ac:	bb 27       	eor	r27, r27
    17ae:	aa 27       	eor	r26, r26
    17b0:	62 17       	cp	r22, r18
    17b2:	73 07       	cpc	r23, r19
    17b4:	84 07       	cpc	r24, r20
    17b6:	38 f0       	brcs	.+14     	; 0x17c6 <__divsf3_pse+0x26>
    17b8:	9f 5f       	subi	r25, 0xFF	; 255
    17ba:	5f 4f       	sbci	r21, 0xFF	; 255
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	44 1f       	adc	r20, r20
    17c2:	aa 1f       	adc	r26, r26
    17c4:	a9 f3       	breq	.-22     	; 0x17b0 <__divsf3_pse+0x10>
    17c6:	33 d0       	rcall	.+102    	; 0x182e <__divsf3_pse+0x8e>
    17c8:	0e 2e       	mov	r0, r30
    17ca:	3a f0       	brmi	.+14     	; 0x17da <__divsf3_pse+0x3a>
    17cc:	e0 e8       	ldi	r30, 0x80	; 128
    17ce:	30 d0       	rcall	.+96     	; 0x1830 <__divsf3_pse+0x90>
    17d0:	91 50       	subi	r25, 0x01	; 1
    17d2:	50 40       	sbci	r21, 0x00	; 0
    17d4:	e6 95       	lsr	r30
    17d6:	00 1c       	adc	r0, r0
    17d8:	ca f7       	brpl	.-14     	; 0x17cc <__divsf3_pse+0x2c>
    17da:	29 d0       	rcall	.+82     	; 0x182e <__divsf3_pse+0x8e>
    17dc:	fe 2f       	mov	r31, r30
    17de:	27 d0       	rcall	.+78     	; 0x182e <__divsf3_pse+0x8e>
    17e0:	66 0f       	add	r22, r22
    17e2:	77 1f       	adc	r23, r23
    17e4:	88 1f       	adc	r24, r24
    17e6:	bb 1f       	adc	r27, r27
    17e8:	26 17       	cp	r18, r22
    17ea:	37 07       	cpc	r19, r23
    17ec:	48 07       	cpc	r20, r24
    17ee:	ab 07       	cpc	r26, r27
    17f0:	b0 e8       	ldi	r27, 0x80	; 128
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <__divsf3_pse+0x56>
    17f4:	bb 0b       	sbc	r27, r27
    17f6:	80 2d       	mov	r24, r0
    17f8:	bf 01       	movw	r22, r30
    17fa:	ff 27       	eor	r31, r31
    17fc:	93 58       	subi	r25, 0x83	; 131
    17fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1800:	2a f0       	brmi	.+10     	; 0x180c <__divsf3_pse+0x6c>
    1802:	9e 3f       	cpi	r25, 0xFE	; 254
    1804:	51 05       	cpc	r21, r1
    1806:	68 f0       	brcs	.+26     	; 0x1822 <__divsf3_pse+0x82>
    1808:	85 c0       	rjmp	.+266    	; 0x1914 <__fp_inf>
    180a:	cf c0       	rjmp	.+414    	; 0x19aa <__fp_szero>
    180c:	5f 3f       	cpi	r21, 0xFF	; 255
    180e:	ec f3       	brlt	.-6      	; 0x180a <__divsf3_pse+0x6a>
    1810:	98 3e       	cpi	r25, 0xE8	; 232
    1812:	dc f3       	brlt	.-10     	; 0x180a <__divsf3_pse+0x6a>
    1814:	86 95       	lsr	r24
    1816:	77 95       	ror	r23
    1818:	67 95       	ror	r22
    181a:	b7 95       	ror	r27
    181c:	f7 95       	ror	r31
    181e:	9f 5f       	subi	r25, 0xFF	; 255
    1820:	c9 f7       	brne	.-14     	; 0x1814 <__divsf3_pse+0x74>
    1822:	88 0f       	add	r24, r24
    1824:	91 1d       	adc	r25, r1
    1826:	96 95       	lsr	r25
    1828:	87 95       	ror	r24
    182a:	97 f9       	bld	r25, 7
    182c:	08 95       	ret
    182e:	e1 e0       	ldi	r30, 0x01	; 1
    1830:	66 0f       	add	r22, r22
    1832:	77 1f       	adc	r23, r23
    1834:	88 1f       	adc	r24, r24
    1836:	bb 1f       	adc	r27, r27
    1838:	62 17       	cp	r22, r18
    183a:	73 07       	cpc	r23, r19
    183c:	84 07       	cpc	r24, r20
    183e:	ba 07       	cpc	r27, r26
    1840:	20 f0       	brcs	.+8      	; 0x184a <__divsf3_pse+0xaa>
    1842:	62 1b       	sub	r22, r18
    1844:	73 0b       	sbc	r23, r19
    1846:	84 0b       	sbc	r24, r20
    1848:	ba 0b       	sbc	r27, r26
    184a:	ee 1f       	adc	r30, r30
    184c:	88 f7       	brcc	.-30     	; 0x1830 <__divsf3_pse+0x90>
    184e:	e0 95       	com	r30
    1850:	08 95       	ret

00001852 <__floatunsisf>:
    1852:	e8 94       	clt
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <__floatsisf+0x12>

00001856 <__floatsisf>:
    1856:	97 fb       	bst	r25, 7
    1858:	3e f4       	brtc	.+14     	; 0x1868 <__floatsisf+0x12>
    185a:	90 95       	com	r25
    185c:	80 95       	com	r24
    185e:	70 95       	com	r23
    1860:	61 95       	neg	r22
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	8f 4f       	sbci	r24, 0xFF	; 255
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	99 23       	and	r25, r25
    186a:	a9 f0       	breq	.+42     	; 0x1896 <__floatsisf+0x40>
    186c:	f9 2f       	mov	r31, r25
    186e:	96 e9       	ldi	r25, 0x96	; 150
    1870:	bb 27       	eor	r27, r27
    1872:	93 95       	inc	r25
    1874:	f6 95       	lsr	r31
    1876:	87 95       	ror	r24
    1878:	77 95       	ror	r23
    187a:	67 95       	ror	r22
    187c:	b7 95       	ror	r27
    187e:	f1 11       	cpse	r31, r1
    1880:	f8 cf       	rjmp	.-16     	; 0x1872 <__floatsisf+0x1c>
    1882:	fa f4       	brpl	.+62     	; 0x18c2 <__floatsisf+0x6c>
    1884:	bb 0f       	add	r27, r27
    1886:	11 f4       	brne	.+4      	; 0x188c <__floatsisf+0x36>
    1888:	60 ff       	sbrs	r22, 0
    188a:	1b c0       	rjmp	.+54     	; 0x18c2 <__floatsisf+0x6c>
    188c:	6f 5f       	subi	r22, 0xFF	; 255
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	8f 4f       	sbci	r24, 0xFF	; 255
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	16 c0       	rjmp	.+44     	; 0x18c2 <__floatsisf+0x6c>
    1896:	88 23       	and	r24, r24
    1898:	11 f0       	breq	.+4      	; 0x189e <__floatsisf+0x48>
    189a:	96 e9       	ldi	r25, 0x96	; 150
    189c:	11 c0       	rjmp	.+34     	; 0x18c0 <__floatsisf+0x6a>
    189e:	77 23       	and	r23, r23
    18a0:	21 f0       	breq	.+8      	; 0x18aa <__floatsisf+0x54>
    18a2:	9e e8       	ldi	r25, 0x8E	; 142
    18a4:	87 2f       	mov	r24, r23
    18a6:	76 2f       	mov	r23, r22
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <__floatsisf+0x5e>
    18aa:	66 23       	and	r22, r22
    18ac:	71 f0       	breq	.+28     	; 0x18ca <__floatsisf+0x74>
    18ae:	96 e8       	ldi	r25, 0x86	; 134
    18b0:	86 2f       	mov	r24, r22
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	2a f0       	brmi	.+10     	; 0x18c2 <__floatsisf+0x6c>
    18b8:	9a 95       	dec	r25
    18ba:	66 0f       	add	r22, r22
    18bc:	77 1f       	adc	r23, r23
    18be:	88 1f       	adc	r24, r24
    18c0:	da f7       	brpl	.-10     	; 0x18b8 <__floatsisf+0x62>
    18c2:	88 0f       	add	r24, r24
    18c4:	96 95       	lsr	r25
    18c6:	87 95       	ror	r24
    18c8:	97 f9       	bld	r25, 7
    18ca:	08 95       	ret

000018cc <__fp_cmp>:
    18cc:	99 0f       	add	r25, r25
    18ce:	00 08       	sbc	r0, r0
    18d0:	55 0f       	add	r21, r21
    18d2:	aa 0b       	sbc	r26, r26
    18d4:	e0 e8       	ldi	r30, 0x80	; 128
    18d6:	fe ef       	ldi	r31, 0xFE	; 254
    18d8:	16 16       	cp	r1, r22
    18da:	17 06       	cpc	r1, r23
    18dc:	e8 07       	cpc	r30, r24
    18de:	f9 07       	cpc	r31, r25
    18e0:	c0 f0       	brcs	.+48     	; 0x1912 <__fp_cmp+0x46>
    18e2:	12 16       	cp	r1, r18
    18e4:	13 06       	cpc	r1, r19
    18e6:	e4 07       	cpc	r30, r20
    18e8:	f5 07       	cpc	r31, r21
    18ea:	98 f0       	brcs	.+38     	; 0x1912 <__fp_cmp+0x46>
    18ec:	62 1b       	sub	r22, r18
    18ee:	73 0b       	sbc	r23, r19
    18f0:	84 0b       	sbc	r24, r20
    18f2:	95 0b       	sbc	r25, r21
    18f4:	39 f4       	brne	.+14     	; 0x1904 <__fp_cmp+0x38>
    18f6:	0a 26       	eor	r0, r26
    18f8:	61 f0       	breq	.+24     	; 0x1912 <__fp_cmp+0x46>
    18fa:	23 2b       	or	r18, r19
    18fc:	24 2b       	or	r18, r20
    18fe:	25 2b       	or	r18, r21
    1900:	21 f4       	brne	.+8      	; 0x190a <__fp_cmp+0x3e>
    1902:	08 95       	ret
    1904:	0a 26       	eor	r0, r26
    1906:	09 f4       	brne	.+2      	; 0x190a <__fp_cmp+0x3e>
    1908:	a1 40       	sbci	r26, 0x01	; 1
    190a:	a6 95       	lsr	r26
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	81 1d       	adc	r24, r1
    1910:	81 1d       	adc	r24, r1
    1912:	08 95       	ret

00001914 <__fp_inf>:
    1914:	97 f9       	bld	r25, 7
    1916:	9f 67       	ori	r25, 0x7F	; 127
    1918:	80 e8       	ldi	r24, 0x80	; 128
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	08 95       	ret

00001920 <__fp_nan>:
    1920:	9f ef       	ldi	r25, 0xFF	; 255
    1922:	80 ec       	ldi	r24, 0xC0	; 192
    1924:	08 95       	ret

00001926 <__fp_pscA>:
    1926:	00 24       	eor	r0, r0
    1928:	0a 94       	dec	r0
    192a:	16 16       	cp	r1, r22
    192c:	17 06       	cpc	r1, r23
    192e:	18 06       	cpc	r1, r24
    1930:	09 06       	cpc	r0, r25
    1932:	08 95       	ret

00001934 <__fp_pscB>:
    1934:	00 24       	eor	r0, r0
    1936:	0a 94       	dec	r0
    1938:	12 16       	cp	r1, r18
    193a:	13 06       	cpc	r1, r19
    193c:	14 06       	cpc	r1, r20
    193e:	05 06       	cpc	r0, r21
    1940:	08 95       	ret

00001942 <__fp_round>:
    1942:	09 2e       	mov	r0, r25
    1944:	03 94       	inc	r0
    1946:	00 0c       	add	r0, r0
    1948:	11 f4       	brne	.+4      	; 0x194e <__fp_round+0xc>
    194a:	88 23       	and	r24, r24
    194c:	52 f0       	brmi	.+20     	; 0x1962 <__fp_round+0x20>
    194e:	bb 0f       	add	r27, r27
    1950:	40 f4       	brcc	.+16     	; 0x1962 <__fp_round+0x20>
    1952:	bf 2b       	or	r27, r31
    1954:	11 f4       	brne	.+4      	; 0x195a <__fp_round+0x18>
    1956:	60 ff       	sbrs	r22, 0
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <__fp_round+0x20>
    195a:	6f 5f       	subi	r22, 0xFF	; 255
    195c:	7f 4f       	sbci	r23, 0xFF	; 255
    195e:	8f 4f       	sbci	r24, 0xFF	; 255
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	08 95       	ret

00001964 <__fp_split3>:
    1964:	57 fd       	sbrc	r21, 7
    1966:	90 58       	subi	r25, 0x80	; 128
    1968:	44 0f       	add	r20, r20
    196a:	55 1f       	adc	r21, r21
    196c:	59 f0       	breq	.+22     	; 0x1984 <__fp_splitA+0x10>
    196e:	5f 3f       	cpi	r21, 0xFF	; 255
    1970:	71 f0       	breq	.+28     	; 0x198e <__fp_splitA+0x1a>
    1972:	47 95       	ror	r20

00001974 <__fp_splitA>:
    1974:	88 0f       	add	r24, r24
    1976:	97 fb       	bst	r25, 7
    1978:	99 1f       	adc	r25, r25
    197a:	61 f0       	breq	.+24     	; 0x1994 <__fp_splitA+0x20>
    197c:	9f 3f       	cpi	r25, 0xFF	; 255
    197e:	79 f0       	breq	.+30     	; 0x199e <__fp_splitA+0x2a>
    1980:	87 95       	ror	r24
    1982:	08 95       	ret
    1984:	12 16       	cp	r1, r18
    1986:	13 06       	cpc	r1, r19
    1988:	14 06       	cpc	r1, r20
    198a:	55 1f       	adc	r21, r21
    198c:	f2 cf       	rjmp	.-28     	; 0x1972 <__fp_split3+0xe>
    198e:	46 95       	lsr	r20
    1990:	f1 df       	rcall	.-30     	; 0x1974 <__fp_splitA>
    1992:	08 c0       	rjmp	.+16     	; 0x19a4 <__fp_splitA+0x30>
    1994:	16 16       	cp	r1, r22
    1996:	17 06       	cpc	r1, r23
    1998:	18 06       	cpc	r1, r24
    199a:	99 1f       	adc	r25, r25
    199c:	f1 cf       	rjmp	.-30     	; 0x1980 <__fp_splitA+0xc>
    199e:	86 95       	lsr	r24
    19a0:	71 05       	cpc	r23, r1
    19a2:	61 05       	cpc	r22, r1
    19a4:	08 94       	sec
    19a6:	08 95       	ret

000019a8 <__fp_zero>:
    19a8:	e8 94       	clt

000019aa <__fp_szero>:
    19aa:	bb 27       	eor	r27, r27
    19ac:	66 27       	eor	r22, r22
    19ae:	77 27       	eor	r23, r23
    19b0:	cb 01       	movw	r24, r22
    19b2:	97 f9       	bld	r25, 7
    19b4:	08 95       	ret

000019b6 <__gesf2>:
    19b6:	8a df       	rcall	.-236    	; 0x18cc <__fp_cmp>
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <__gesf2+0x6>
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	08 95       	ret

000019be <__mulsf3>:
    19be:	0b d0       	rcall	.+22     	; 0x19d6 <__mulsf3x>
    19c0:	c0 cf       	rjmp	.-128    	; 0x1942 <__fp_round>
    19c2:	b1 df       	rcall	.-158    	; 0x1926 <__fp_pscA>
    19c4:	28 f0       	brcs	.+10     	; 0x19d0 <__mulsf3+0x12>
    19c6:	b6 df       	rcall	.-148    	; 0x1934 <__fp_pscB>
    19c8:	18 f0       	brcs	.+6      	; 0x19d0 <__mulsf3+0x12>
    19ca:	95 23       	and	r25, r21
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <__mulsf3+0x12>
    19ce:	a2 cf       	rjmp	.-188    	; 0x1914 <__fp_inf>
    19d0:	a7 cf       	rjmp	.-178    	; 0x1920 <__fp_nan>
    19d2:	11 24       	eor	r1, r1
    19d4:	ea cf       	rjmp	.-44     	; 0x19aa <__fp_szero>

000019d6 <__mulsf3x>:
    19d6:	c6 df       	rcall	.-116    	; 0x1964 <__fp_split3>
    19d8:	a0 f3       	brcs	.-24     	; 0x19c2 <__mulsf3+0x4>

000019da <__mulsf3_pse>:
    19da:	95 9f       	mul	r25, r21
    19dc:	d1 f3       	breq	.-12     	; 0x19d2 <__mulsf3+0x14>
    19de:	95 0f       	add	r25, r21
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	55 1f       	adc	r21, r21
    19e4:	62 9f       	mul	r22, r18
    19e6:	f0 01       	movw	r30, r0
    19e8:	72 9f       	mul	r23, r18
    19ea:	bb 27       	eor	r27, r27
    19ec:	f0 0d       	add	r31, r0
    19ee:	b1 1d       	adc	r27, r1
    19f0:	63 9f       	mul	r22, r19
    19f2:	aa 27       	eor	r26, r26
    19f4:	f0 0d       	add	r31, r0
    19f6:	b1 1d       	adc	r27, r1
    19f8:	aa 1f       	adc	r26, r26
    19fa:	64 9f       	mul	r22, r20
    19fc:	66 27       	eor	r22, r22
    19fe:	b0 0d       	add	r27, r0
    1a00:	a1 1d       	adc	r26, r1
    1a02:	66 1f       	adc	r22, r22
    1a04:	82 9f       	mul	r24, r18
    1a06:	22 27       	eor	r18, r18
    1a08:	b0 0d       	add	r27, r0
    1a0a:	a1 1d       	adc	r26, r1
    1a0c:	62 1f       	adc	r22, r18
    1a0e:	73 9f       	mul	r23, r19
    1a10:	b0 0d       	add	r27, r0
    1a12:	a1 1d       	adc	r26, r1
    1a14:	62 1f       	adc	r22, r18
    1a16:	83 9f       	mul	r24, r19
    1a18:	a0 0d       	add	r26, r0
    1a1a:	61 1d       	adc	r22, r1
    1a1c:	22 1f       	adc	r18, r18
    1a1e:	74 9f       	mul	r23, r20
    1a20:	33 27       	eor	r19, r19
    1a22:	a0 0d       	add	r26, r0
    1a24:	61 1d       	adc	r22, r1
    1a26:	23 1f       	adc	r18, r19
    1a28:	84 9f       	mul	r24, r20
    1a2a:	60 0d       	add	r22, r0
    1a2c:	21 1d       	adc	r18, r1
    1a2e:	82 2f       	mov	r24, r18
    1a30:	76 2f       	mov	r23, r22
    1a32:	6a 2f       	mov	r22, r26
    1a34:	11 24       	eor	r1, r1
    1a36:	9f 57       	subi	r25, 0x7F	; 127
    1a38:	50 40       	sbci	r21, 0x00	; 0
    1a3a:	8a f0       	brmi	.+34     	; 0x1a5e <__mulsf3_pse+0x84>
    1a3c:	e1 f0       	breq	.+56     	; 0x1a76 <__mulsf3_pse+0x9c>
    1a3e:	88 23       	and	r24, r24
    1a40:	4a f0       	brmi	.+18     	; 0x1a54 <__mulsf3_pse+0x7a>
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	bb 1f       	adc	r27, r27
    1a48:	66 1f       	adc	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	91 50       	subi	r25, 0x01	; 1
    1a50:	50 40       	sbci	r21, 0x00	; 0
    1a52:	a9 f7       	brne	.-22     	; 0x1a3e <__mulsf3_pse+0x64>
    1a54:	9e 3f       	cpi	r25, 0xFE	; 254
    1a56:	51 05       	cpc	r21, r1
    1a58:	70 f0       	brcs	.+28     	; 0x1a76 <__mulsf3_pse+0x9c>
    1a5a:	5c cf       	rjmp	.-328    	; 0x1914 <__fp_inf>
    1a5c:	a6 cf       	rjmp	.-180    	; 0x19aa <__fp_szero>
    1a5e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a60:	ec f3       	brlt	.-6      	; 0x1a5c <__mulsf3_pse+0x82>
    1a62:	98 3e       	cpi	r25, 0xE8	; 232
    1a64:	dc f3       	brlt	.-10     	; 0x1a5c <__mulsf3_pse+0x82>
    1a66:	86 95       	lsr	r24
    1a68:	77 95       	ror	r23
    1a6a:	67 95       	ror	r22
    1a6c:	b7 95       	ror	r27
    1a6e:	f7 95       	ror	r31
    1a70:	e7 95       	ror	r30
    1a72:	9f 5f       	subi	r25, 0xFF	; 255
    1a74:	c1 f7       	brne	.-16     	; 0x1a66 <__mulsf3_pse+0x8c>
    1a76:	fe 2b       	or	r31, r30
    1a78:	88 0f       	add	r24, r24
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	96 95       	lsr	r25
    1a7e:	87 95       	ror	r24
    1a80:	97 f9       	bld	r25, 7
    1a82:	08 95       	ret
    1a84:	11 f4       	brne	.+4      	; 0x1a8a <__mulsf3_pse+0xb0>
    1a86:	0e f4       	brtc	.+2      	; 0x1a8a <__mulsf3_pse+0xb0>
    1a88:	4b cf       	rjmp	.-362    	; 0x1920 <__fp_nan>
    1a8a:	3e c0       	rjmp	.+124    	; 0x1b08 <__fp_mpack>

00001a8c <sqrt>:
    1a8c:	73 df       	rcall	.-282    	; 0x1974 <__fp_splitA>
    1a8e:	d0 f3       	brcs	.-12     	; 0x1a84 <__mulsf3_pse+0xaa>
    1a90:	99 23       	and	r25, r25
    1a92:	d9 f3       	breq	.-10     	; 0x1a8a <__mulsf3_pse+0xb0>
    1a94:	ce f3       	brts	.-14     	; 0x1a88 <__mulsf3_pse+0xae>
    1a96:	9f 57       	subi	r25, 0x7F	; 127
    1a98:	55 0b       	sbc	r21, r21
    1a9a:	87 ff       	sbrs	r24, 7
    1a9c:	43 d0       	rcall	.+134    	; 0x1b24 <__fp_norm2>
    1a9e:	00 24       	eor	r0, r0
    1aa0:	a0 e6       	ldi	r26, 0x60	; 96
    1aa2:	40 ea       	ldi	r20, 0xA0	; 160
    1aa4:	90 01       	movw	r18, r0
    1aa6:	80 58       	subi	r24, 0x80	; 128
    1aa8:	56 95       	lsr	r21
    1aaa:	97 95       	ror	r25
    1aac:	28 f4       	brcc	.+10     	; 0x1ab8 <sqrt+0x2c>
    1aae:	80 5c       	subi	r24, 0xC0	; 192
    1ab0:	66 0f       	add	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	20 f0       	brcs	.+8      	; 0x1ac0 <sqrt+0x34>
    1ab8:	26 17       	cp	r18, r22
    1aba:	37 07       	cpc	r19, r23
    1abc:	48 07       	cpc	r20, r24
    1abe:	30 f4       	brcc	.+12     	; 0x1acc <sqrt+0x40>
    1ac0:	62 1b       	sub	r22, r18
    1ac2:	73 0b       	sbc	r23, r19
    1ac4:	84 0b       	sbc	r24, r20
    1ac6:	20 29       	or	r18, r0
    1ac8:	31 29       	or	r19, r1
    1aca:	4a 2b       	or	r20, r26
    1acc:	a6 95       	lsr	r26
    1ace:	17 94       	ror	r1
    1ad0:	07 94       	ror	r0
    1ad2:	20 25       	eor	r18, r0
    1ad4:	31 25       	eor	r19, r1
    1ad6:	4a 27       	eor	r20, r26
    1ad8:	58 f7       	brcc	.-42     	; 0x1ab0 <sqrt+0x24>
    1ada:	66 0f       	add	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	88 1f       	adc	r24, r24
    1ae0:	20 f0       	brcs	.+8      	; 0x1aea <sqrt+0x5e>
    1ae2:	26 17       	cp	r18, r22
    1ae4:	37 07       	cpc	r19, r23
    1ae6:	48 07       	cpc	r20, r24
    1ae8:	30 f4       	brcc	.+12     	; 0x1af6 <sqrt+0x6a>
    1aea:	62 0b       	sbc	r22, r18
    1aec:	73 0b       	sbc	r23, r19
    1aee:	84 0b       	sbc	r24, r20
    1af0:	20 0d       	add	r18, r0
    1af2:	31 1d       	adc	r19, r1
    1af4:	41 1d       	adc	r20, r1
    1af6:	a0 95       	com	r26
    1af8:	81 f7       	brne	.-32     	; 0x1ada <sqrt+0x4e>
    1afa:	b9 01       	movw	r22, r18
    1afc:	84 2f       	mov	r24, r20
    1afe:	91 58       	subi	r25, 0x81	; 129
    1b00:	88 0f       	add	r24, r24
    1b02:	96 95       	lsr	r25
    1b04:	87 95       	ror	r24
    1b06:	08 95       	ret

00001b08 <__fp_mpack>:
    1b08:	9f 3f       	cpi	r25, 0xFF	; 255
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <__fp_mpack_finite+0xc>

00001b0c <__fp_mpack_finite>:
    1b0c:	91 50       	subi	r25, 0x01	; 1
    1b0e:	20 f4       	brcc	.+8      	; 0x1b18 <__fp_mpack_finite+0xc>
    1b10:	87 95       	ror	r24
    1b12:	77 95       	ror	r23
    1b14:	67 95       	ror	r22
    1b16:	b7 95       	ror	r27
    1b18:	88 0f       	add	r24, r24
    1b1a:	91 1d       	adc	r25, r1
    1b1c:	96 95       	lsr	r25
    1b1e:	87 95       	ror	r24
    1b20:	97 f9       	bld	r25, 7
    1b22:	08 95       	ret

00001b24 <__fp_norm2>:
    1b24:	91 50       	subi	r25, 0x01	; 1
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	66 0f       	add	r22, r22
    1b2a:	77 1f       	adc	r23, r23
    1b2c:	88 1f       	adc	r24, r24
    1b2e:	d2 f7       	brpl	.-12     	; 0x1b24 <__fp_norm2>
    1b30:	08 95       	ret

00001b32 <__tablejump2__>:
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	88 1f       	adc	r24, r24
    1b38:	8b bf       	out	0x3b, r24	; 59
    1b3a:	07 90       	elpm	r0, Z+
    1b3c:	f6 91       	elpm	r31, Z
    1b3e:	e0 2d       	mov	r30, r0
    1b40:	19 94       	eijmp

00001b42 <strcmp>:
    1b42:	fb 01       	movw	r30, r22
    1b44:	dc 01       	movw	r26, r24
    1b46:	8d 91       	ld	r24, X+
    1b48:	01 90       	ld	r0, Z+
    1b4a:	80 19       	sub	r24, r0
    1b4c:	01 10       	cpse	r0, r1
    1b4e:	d9 f3       	breq	.-10     	; 0x1b46 <strcmp+0x4>
    1b50:	99 0b       	sbc	r25, r25
    1b52:	08 95       	ret

00001b54 <sprintf>:
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	2e 97       	sbiw	r28, 0x0e	; 14
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	0e 89       	ldd	r16, Y+22	; 0x16
    1b6e:	1f 89       	ldd	r17, Y+23	; 0x17
    1b70:	86 e0       	ldi	r24, 0x06	; 6
    1b72:	8c 83       	std	Y+4, r24	; 0x04
    1b74:	1a 83       	std	Y+2, r17	; 0x02
    1b76:	09 83       	std	Y+1, r16	; 0x01
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	9f e7       	ldi	r25, 0x7F	; 127
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	ae 01       	movw	r20, r28
    1b82:	46 5e       	subi	r20, 0xE6	; 230
    1b84:	5f 4f       	sbci	r21, 0xFF	; 255
    1b86:	68 8d       	ldd	r22, Y+24	; 0x18
    1b88:	79 8d       	ldd	r23, Y+25	; 0x19
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	10 d0       	rcall	.+32     	; 0x1bb0 <vfprintf>
    1b90:	ef 81       	ldd	r30, Y+7	; 0x07
    1b92:	f8 85       	ldd	r31, Y+8	; 0x08
    1b94:	e0 0f       	add	r30, r16
    1b96:	f1 1f       	adc	r31, r17
    1b98:	10 82       	st	Z, r1
    1b9a:	2e 96       	adiw	r28, 0x0e	; 14
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <vfprintf>:
    1bb0:	2f 92       	push	r2
    1bb2:	3f 92       	push	r3
    1bb4:	4f 92       	push	r4
    1bb6:	5f 92       	push	r5
    1bb8:	6f 92       	push	r6
    1bba:	7f 92       	push	r7
    1bbc:	8f 92       	push	r8
    1bbe:	9f 92       	push	r9
    1bc0:	af 92       	push	r10
    1bc2:	bf 92       	push	r11
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	2b 97       	sbiw	r28, 0x0b	; 11
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	6c 01       	movw	r12, r24
    1be6:	7b 01       	movw	r14, r22
    1be8:	8a 01       	movw	r16, r20
    1bea:	fc 01       	movw	r30, r24
    1bec:	17 82       	std	Z+7, r1	; 0x07
    1bee:	16 82       	std	Z+6, r1	; 0x06
    1bf0:	83 81       	ldd	r24, Z+3	; 0x03
    1bf2:	81 ff       	sbrs	r24, 1
    1bf4:	bf c1       	rjmp	.+894    	; 0x1f74 <vfprintf+0x3c4>
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	3c 01       	movw	r6, r24
    1bfc:	f6 01       	movw	r30, r12
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	f7 01       	movw	r30, r14
    1c02:	93 fd       	sbrc	r25, 3
    1c04:	85 91       	lpm	r24, Z+
    1c06:	93 ff       	sbrs	r25, 3
    1c08:	81 91       	ld	r24, Z+
    1c0a:	7f 01       	movw	r14, r30
    1c0c:	88 23       	and	r24, r24
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <vfprintf+0x62>
    1c10:	ad c1       	rjmp	.+858    	; 0x1f6c <vfprintf+0x3bc>
    1c12:	85 32       	cpi	r24, 0x25	; 37
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <vfprintf+0x74>
    1c16:	93 fd       	sbrc	r25, 3
    1c18:	85 91       	lpm	r24, Z+
    1c1a:	93 ff       	sbrs	r25, 3
    1c1c:	81 91       	ld	r24, Z+
    1c1e:	7f 01       	movw	r14, r30
    1c20:	85 32       	cpi	r24, 0x25	; 37
    1c22:	21 f4       	brne	.+8      	; 0x1c2c <vfprintf+0x7c>
    1c24:	b6 01       	movw	r22, r12
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	d6 d1       	rcall	.+940    	; 0x1fd6 <fputc>
    1c2a:	e8 cf       	rjmp	.-48     	; 0x1bfc <vfprintf+0x4c>
    1c2c:	91 2c       	mov	r9, r1
    1c2e:	21 2c       	mov	r2, r1
    1c30:	31 2c       	mov	r3, r1
    1c32:	ff e1       	ldi	r31, 0x1F	; 31
    1c34:	f3 15       	cp	r31, r3
    1c36:	d8 f0       	brcs	.+54     	; 0x1c6e <vfprintf+0xbe>
    1c38:	8b 32       	cpi	r24, 0x2B	; 43
    1c3a:	79 f0       	breq	.+30     	; 0x1c5a <vfprintf+0xaa>
    1c3c:	38 f4       	brcc	.+14     	; 0x1c4c <vfprintf+0x9c>
    1c3e:	80 32       	cpi	r24, 0x20	; 32
    1c40:	79 f0       	breq	.+30     	; 0x1c60 <vfprintf+0xb0>
    1c42:	83 32       	cpi	r24, 0x23	; 35
    1c44:	a1 f4       	brne	.+40     	; 0x1c6e <vfprintf+0xbe>
    1c46:	23 2d       	mov	r18, r3
    1c48:	20 61       	ori	r18, 0x10	; 16
    1c4a:	1d c0       	rjmp	.+58     	; 0x1c86 <vfprintf+0xd6>
    1c4c:	8d 32       	cpi	r24, 0x2D	; 45
    1c4e:	61 f0       	breq	.+24     	; 0x1c68 <vfprintf+0xb8>
    1c50:	80 33       	cpi	r24, 0x30	; 48
    1c52:	69 f4       	brne	.+26     	; 0x1c6e <vfprintf+0xbe>
    1c54:	23 2d       	mov	r18, r3
    1c56:	21 60       	ori	r18, 0x01	; 1
    1c58:	16 c0       	rjmp	.+44     	; 0x1c86 <vfprintf+0xd6>
    1c5a:	83 2d       	mov	r24, r3
    1c5c:	82 60       	ori	r24, 0x02	; 2
    1c5e:	38 2e       	mov	r3, r24
    1c60:	e3 2d       	mov	r30, r3
    1c62:	e4 60       	ori	r30, 0x04	; 4
    1c64:	3e 2e       	mov	r3, r30
    1c66:	2a c0       	rjmp	.+84     	; 0x1cbc <vfprintf+0x10c>
    1c68:	f3 2d       	mov	r31, r3
    1c6a:	f8 60       	ori	r31, 0x08	; 8
    1c6c:	1d c0       	rjmp	.+58     	; 0x1ca8 <vfprintf+0xf8>
    1c6e:	37 fc       	sbrc	r3, 7
    1c70:	2d c0       	rjmp	.+90     	; 0x1ccc <vfprintf+0x11c>
    1c72:	20 ed       	ldi	r18, 0xD0	; 208
    1c74:	28 0f       	add	r18, r24
    1c76:	2a 30       	cpi	r18, 0x0A	; 10
    1c78:	40 f0       	brcs	.+16     	; 0x1c8a <vfprintf+0xda>
    1c7a:	8e 32       	cpi	r24, 0x2E	; 46
    1c7c:	b9 f4       	brne	.+46     	; 0x1cac <vfprintf+0xfc>
    1c7e:	36 fc       	sbrc	r3, 6
    1c80:	75 c1       	rjmp	.+746    	; 0x1f6c <vfprintf+0x3bc>
    1c82:	23 2d       	mov	r18, r3
    1c84:	20 64       	ori	r18, 0x40	; 64
    1c86:	32 2e       	mov	r3, r18
    1c88:	19 c0       	rjmp	.+50     	; 0x1cbc <vfprintf+0x10c>
    1c8a:	36 fe       	sbrs	r3, 6
    1c8c:	06 c0       	rjmp	.+12     	; 0x1c9a <vfprintf+0xea>
    1c8e:	8a e0       	ldi	r24, 0x0A	; 10
    1c90:	98 9e       	mul	r9, r24
    1c92:	20 0d       	add	r18, r0
    1c94:	11 24       	eor	r1, r1
    1c96:	92 2e       	mov	r9, r18
    1c98:	11 c0       	rjmp	.+34     	; 0x1cbc <vfprintf+0x10c>
    1c9a:	ea e0       	ldi	r30, 0x0A	; 10
    1c9c:	2e 9e       	mul	r2, r30
    1c9e:	20 0d       	add	r18, r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	22 2e       	mov	r2, r18
    1ca4:	f3 2d       	mov	r31, r3
    1ca6:	f0 62       	ori	r31, 0x20	; 32
    1ca8:	3f 2e       	mov	r3, r31
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <vfprintf+0x10c>
    1cac:	8c 36       	cpi	r24, 0x6C	; 108
    1cae:	21 f4       	brne	.+8      	; 0x1cb8 <vfprintf+0x108>
    1cb0:	83 2d       	mov	r24, r3
    1cb2:	80 68       	ori	r24, 0x80	; 128
    1cb4:	38 2e       	mov	r3, r24
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <vfprintf+0x10c>
    1cb8:	88 36       	cpi	r24, 0x68	; 104
    1cba:	41 f4       	brne	.+16     	; 0x1ccc <vfprintf+0x11c>
    1cbc:	f7 01       	movw	r30, r14
    1cbe:	93 fd       	sbrc	r25, 3
    1cc0:	85 91       	lpm	r24, Z+
    1cc2:	93 ff       	sbrs	r25, 3
    1cc4:	81 91       	ld	r24, Z+
    1cc6:	7f 01       	movw	r14, r30
    1cc8:	81 11       	cpse	r24, r1
    1cca:	b3 cf       	rjmp	.-154    	; 0x1c32 <vfprintf+0x82>
    1ccc:	98 2f       	mov	r25, r24
    1cce:	9f 7d       	andi	r25, 0xDF	; 223
    1cd0:	95 54       	subi	r25, 0x45	; 69
    1cd2:	93 30       	cpi	r25, 0x03	; 3
    1cd4:	28 f4       	brcc	.+10     	; 0x1ce0 <vfprintf+0x130>
    1cd6:	0c 5f       	subi	r16, 0xFC	; 252
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	9f e3       	ldi	r25, 0x3F	; 63
    1cdc:	99 83       	std	Y+1, r25	; 0x01
    1cde:	0d c0       	rjmp	.+26     	; 0x1cfa <vfprintf+0x14a>
    1ce0:	83 36       	cpi	r24, 0x63	; 99
    1ce2:	31 f0       	breq	.+12     	; 0x1cf0 <vfprintf+0x140>
    1ce4:	83 37       	cpi	r24, 0x73	; 115
    1ce6:	71 f0       	breq	.+28     	; 0x1d04 <vfprintf+0x154>
    1ce8:	83 35       	cpi	r24, 0x53	; 83
    1cea:	09 f0       	breq	.+2      	; 0x1cee <vfprintf+0x13e>
    1cec:	55 c0       	rjmp	.+170    	; 0x1d98 <vfprintf+0x1e8>
    1cee:	20 c0       	rjmp	.+64     	; 0x1d30 <vfprintf+0x180>
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	80 81       	ld	r24, Z
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	0e 5f       	subi	r16, 0xFE	; 254
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	88 24       	eor	r8, r8
    1cfc:	83 94       	inc	r8
    1cfe:	91 2c       	mov	r9, r1
    1d00:	53 01       	movw	r10, r6
    1d02:	12 c0       	rjmp	.+36     	; 0x1d28 <vfprintf+0x178>
    1d04:	28 01       	movw	r4, r16
    1d06:	f2 e0       	ldi	r31, 0x02	; 2
    1d08:	4f 0e       	add	r4, r31
    1d0a:	51 1c       	adc	r5, r1
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	a0 80       	ld	r10, Z
    1d10:	b1 80       	ldd	r11, Z+1	; 0x01
    1d12:	36 fe       	sbrs	r3, 6
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <vfprintf+0x16c>
    1d16:	69 2d       	mov	r22, r9
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <vfprintf+0x170>
    1d1c:	6f ef       	ldi	r22, 0xFF	; 255
    1d1e:	7f ef       	ldi	r23, 0xFF	; 255
    1d20:	c5 01       	movw	r24, r10
    1d22:	4e d1       	rcall	.+668    	; 0x1fc0 <strnlen>
    1d24:	4c 01       	movw	r8, r24
    1d26:	82 01       	movw	r16, r4
    1d28:	f3 2d       	mov	r31, r3
    1d2a:	ff 77       	andi	r31, 0x7F	; 127
    1d2c:	3f 2e       	mov	r3, r31
    1d2e:	15 c0       	rjmp	.+42     	; 0x1d5a <vfprintf+0x1aa>
    1d30:	28 01       	movw	r4, r16
    1d32:	22 e0       	ldi	r18, 0x02	; 2
    1d34:	42 0e       	add	r4, r18
    1d36:	51 1c       	adc	r5, r1
    1d38:	f8 01       	movw	r30, r16
    1d3a:	a0 80       	ld	r10, Z
    1d3c:	b1 80       	ldd	r11, Z+1	; 0x01
    1d3e:	36 fe       	sbrs	r3, 6
    1d40:	03 c0       	rjmp	.+6      	; 0x1d48 <vfprintf+0x198>
    1d42:	69 2d       	mov	r22, r9
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <vfprintf+0x19c>
    1d48:	6f ef       	ldi	r22, 0xFF	; 255
    1d4a:	7f ef       	ldi	r23, 0xFF	; 255
    1d4c:	c5 01       	movw	r24, r10
    1d4e:	2d d1       	rcall	.+602    	; 0x1faa <strnlen_P>
    1d50:	4c 01       	movw	r8, r24
    1d52:	f3 2d       	mov	r31, r3
    1d54:	f0 68       	ori	r31, 0x80	; 128
    1d56:	3f 2e       	mov	r3, r31
    1d58:	82 01       	movw	r16, r4
    1d5a:	33 fc       	sbrc	r3, 3
    1d5c:	19 c0       	rjmp	.+50     	; 0x1d90 <vfprintf+0x1e0>
    1d5e:	82 2d       	mov	r24, r2
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	88 16       	cp	r8, r24
    1d64:	99 06       	cpc	r9, r25
    1d66:	a0 f4       	brcc	.+40     	; 0x1d90 <vfprintf+0x1e0>
    1d68:	b6 01       	movw	r22, r12
    1d6a:	80 e2       	ldi	r24, 0x20	; 32
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	33 d1       	rcall	.+614    	; 0x1fd6 <fputc>
    1d70:	2a 94       	dec	r2
    1d72:	f5 cf       	rjmp	.-22     	; 0x1d5e <vfprintf+0x1ae>
    1d74:	f5 01       	movw	r30, r10
    1d76:	37 fc       	sbrc	r3, 7
    1d78:	85 91       	lpm	r24, Z+
    1d7a:	37 fe       	sbrs	r3, 7
    1d7c:	81 91       	ld	r24, Z+
    1d7e:	5f 01       	movw	r10, r30
    1d80:	b6 01       	movw	r22, r12
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	28 d1       	rcall	.+592    	; 0x1fd6 <fputc>
    1d86:	21 10       	cpse	r2, r1
    1d88:	2a 94       	dec	r2
    1d8a:	21 e0       	ldi	r18, 0x01	; 1
    1d8c:	82 1a       	sub	r8, r18
    1d8e:	91 08       	sbc	r9, r1
    1d90:	81 14       	cp	r8, r1
    1d92:	91 04       	cpc	r9, r1
    1d94:	79 f7       	brne	.-34     	; 0x1d74 <vfprintf+0x1c4>
    1d96:	e1 c0       	rjmp	.+450    	; 0x1f5a <vfprintf+0x3aa>
    1d98:	84 36       	cpi	r24, 0x64	; 100
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <vfprintf+0x1f0>
    1d9c:	89 36       	cpi	r24, 0x69	; 105
    1d9e:	39 f5       	brne	.+78     	; 0x1dee <vfprintf+0x23e>
    1da0:	f8 01       	movw	r30, r16
    1da2:	37 fe       	sbrs	r3, 7
    1da4:	07 c0       	rjmp	.+14     	; 0x1db4 <vfprintf+0x204>
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	0c 5f       	subi	r16, 0xFC	; 252
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	08 c0       	rjmp	.+16     	; 0x1dc4 <vfprintf+0x214>
    1db4:	60 81       	ld	r22, Z
    1db6:	71 81       	ldd	r23, Z+1	; 0x01
    1db8:	07 2e       	mov	r0, r23
    1dba:	00 0c       	add	r0, r0
    1dbc:	88 0b       	sbc	r24, r24
    1dbe:	99 0b       	sbc	r25, r25
    1dc0:	0e 5f       	subi	r16, 0xFE	; 254
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	f3 2d       	mov	r31, r3
    1dc6:	ff 76       	andi	r31, 0x6F	; 111
    1dc8:	3f 2e       	mov	r3, r31
    1dca:	97 ff       	sbrs	r25, 7
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <vfprintf+0x230>
    1dce:	90 95       	com	r25
    1dd0:	80 95       	com	r24
    1dd2:	70 95       	com	r23
    1dd4:	61 95       	neg	r22
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	f0 68       	ori	r31, 0x80	; 128
    1dde:	3f 2e       	mov	r3, r31
    1de0:	2a e0       	ldi	r18, 0x0A	; 10
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	a3 01       	movw	r20, r6
    1de6:	33 d1       	rcall	.+614    	; 0x204e <__ultoa_invert>
    1de8:	88 2e       	mov	r8, r24
    1dea:	86 18       	sub	r8, r6
    1dec:	44 c0       	rjmp	.+136    	; 0x1e76 <vfprintf+0x2c6>
    1dee:	85 37       	cpi	r24, 0x75	; 117
    1df0:	31 f4       	brne	.+12     	; 0x1dfe <vfprintf+0x24e>
    1df2:	23 2d       	mov	r18, r3
    1df4:	2f 7e       	andi	r18, 0xEF	; 239
    1df6:	b2 2e       	mov	r11, r18
    1df8:	2a e0       	ldi	r18, 0x0A	; 10
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	25 c0       	rjmp	.+74     	; 0x1e48 <vfprintf+0x298>
    1dfe:	93 2d       	mov	r25, r3
    1e00:	99 7f       	andi	r25, 0xF9	; 249
    1e02:	b9 2e       	mov	r11, r25
    1e04:	8f 36       	cpi	r24, 0x6F	; 111
    1e06:	c1 f0       	breq	.+48     	; 0x1e38 <vfprintf+0x288>
    1e08:	18 f4       	brcc	.+6      	; 0x1e10 <vfprintf+0x260>
    1e0a:	88 35       	cpi	r24, 0x58	; 88
    1e0c:	79 f0       	breq	.+30     	; 0x1e2c <vfprintf+0x27c>
    1e0e:	ae c0       	rjmp	.+348    	; 0x1f6c <vfprintf+0x3bc>
    1e10:	80 37       	cpi	r24, 0x70	; 112
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <vfprintf+0x26a>
    1e14:	88 37       	cpi	r24, 0x78	; 120
    1e16:	21 f0       	breq	.+8      	; 0x1e20 <vfprintf+0x270>
    1e18:	a9 c0       	rjmp	.+338    	; 0x1f6c <vfprintf+0x3bc>
    1e1a:	e9 2f       	mov	r30, r25
    1e1c:	e0 61       	ori	r30, 0x10	; 16
    1e1e:	be 2e       	mov	r11, r30
    1e20:	b4 fe       	sbrs	r11, 4
    1e22:	0d c0       	rjmp	.+26     	; 0x1e3e <vfprintf+0x28e>
    1e24:	fb 2d       	mov	r31, r11
    1e26:	f4 60       	ori	r31, 0x04	; 4
    1e28:	bf 2e       	mov	r11, r31
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <vfprintf+0x28e>
    1e2c:	34 fe       	sbrs	r3, 4
    1e2e:	0a c0       	rjmp	.+20     	; 0x1e44 <vfprintf+0x294>
    1e30:	29 2f       	mov	r18, r25
    1e32:	26 60       	ori	r18, 0x06	; 6
    1e34:	b2 2e       	mov	r11, r18
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <vfprintf+0x294>
    1e38:	28 e0       	ldi	r18, 0x08	; 8
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	05 c0       	rjmp	.+10     	; 0x1e48 <vfprintf+0x298>
    1e3e:	20 e1       	ldi	r18, 0x10	; 16
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <vfprintf+0x298>
    1e44:	20 e1       	ldi	r18, 0x10	; 16
    1e46:	32 e0       	ldi	r19, 0x02	; 2
    1e48:	f8 01       	movw	r30, r16
    1e4a:	b7 fe       	sbrs	r11, 7
    1e4c:	07 c0       	rjmp	.+14     	; 0x1e5c <vfprintf+0x2ac>
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	0c 5f       	subi	r16, 0xFC	; 252
    1e58:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5a:	06 c0       	rjmp	.+12     	; 0x1e68 <vfprintf+0x2b8>
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 5f       	subi	r16, 0xFE	; 254
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	a3 01       	movw	r20, r6
    1e6a:	f1 d0       	rcall	.+482    	; 0x204e <__ultoa_invert>
    1e6c:	88 2e       	mov	r8, r24
    1e6e:	86 18       	sub	r8, r6
    1e70:	fb 2d       	mov	r31, r11
    1e72:	ff 77       	andi	r31, 0x7F	; 127
    1e74:	3f 2e       	mov	r3, r31
    1e76:	36 fe       	sbrs	r3, 6
    1e78:	0d c0       	rjmp	.+26     	; 0x1e94 <vfprintf+0x2e4>
    1e7a:	23 2d       	mov	r18, r3
    1e7c:	2e 7f       	andi	r18, 0xFE	; 254
    1e7e:	a2 2e       	mov	r10, r18
    1e80:	89 14       	cp	r8, r9
    1e82:	58 f4       	brcc	.+22     	; 0x1e9a <vfprintf+0x2ea>
    1e84:	34 fe       	sbrs	r3, 4
    1e86:	0b c0       	rjmp	.+22     	; 0x1e9e <vfprintf+0x2ee>
    1e88:	32 fc       	sbrc	r3, 2
    1e8a:	09 c0       	rjmp	.+18     	; 0x1e9e <vfprintf+0x2ee>
    1e8c:	83 2d       	mov	r24, r3
    1e8e:	8e 7e       	andi	r24, 0xEE	; 238
    1e90:	a8 2e       	mov	r10, r24
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <vfprintf+0x2ee>
    1e94:	b8 2c       	mov	r11, r8
    1e96:	a3 2c       	mov	r10, r3
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <vfprintf+0x2f0>
    1e9a:	b8 2c       	mov	r11, r8
    1e9c:	01 c0       	rjmp	.+2      	; 0x1ea0 <vfprintf+0x2f0>
    1e9e:	b9 2c       	mov	r11, r9
    1ea0:	a4 fe       	sbrs	r10, 4
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <vfprintf+0x312>
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e8 0d       	add	r30, r8
    1ea8:	f1 1d       	adc	r31, r1
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 33       	cpi	r24, 0x30	; 48
    1eae:	21 f4       	brne	.+8      	; 0x1eb8 <vfprintf+0x308>
    1eb0:	9a 2d       	mov	r25, r10
    1eb2:	99 7e       	andi	r25, 0xE9	; 233
    1eb4:	a9 2e       	mov	r10, r25
    1eb6:	09 c0       	rjmp	.+18     	; 0x1eca <vfprintf+0x31a>
    1eb8:	a2 fe       	sbrs	r10, 2
    1eba:	06 c0       	rjmp	.+12     	; 0x1ec8 <vfprintf+0x318>
    1ebc:	b3 94       	inc	r11
    1ebe:	b3 94       	inc	r11
    1ec0:	04 c0       	rjmp	.+8      	; 0x1eca <vfprintf+0x31a>
    1ec2:	8a 2d       	mov	r24, r10
    1ec4:	86 78       	andi	r24, 0x86	; 134
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <vfprintf+0x31a>
    1ec8:	b3 94       	inc	r11
    1eca:	a3 fc       	sbrc	r10, 3
    1ecc:	10 c0       	rjmp	.+32     	; 0x1eee <vfprintf+0x33e>
    1ece:	a0 fe       	sbrs	r10, 0
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <vfprintf+0x32e>
    1ed2:	b2 14       	cp	r11, r2
    1ed4:	80 f4       	brcc	.+32     	; 0x1ef6 <vfprintf+0x346>
    1ed6:	28 0c       	add	r2, r8
    1ed8:	92 2c       	mov	r9, r2
    1eda:	9b 18       	sub	r9, r11
    1edc:	0d c0       	rjmp	.+26     	; 0x1ef8 <vfprintf+0x348>
    1ede:	b2 14       	cp	r11, r2
    1ee0:	58 f4       	brcc	.+22     	; 0x1ef8 <vfprintf+0x348>
    1ee2:	b6 01       	movw	r22, r12
    1ee4:	80 e2       	ldi	r24, 0x20	; 32
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	76 d0       	rcall	.+236    	; 0x1fd6 <fputc>
    1eea:	b3 94       	inc	r11
    1eec:	f8 cf       	rjmp	.-16     	; 0x1ede <vfprintf+0x32e>
    1eee:	b2 14       	cp	r11, r2
    1ef0:	18 f4       	brcc	.+6      	; 0x1ef8 <vfprintf+0x348>
    1ef2:	2b 18       	sub	r2, r11
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <vfprintf+0x34a>
    1ef6:	98 2c       	mov	r9, r8
    1ef8:	21 2c       	mov	r2, r1
    1efa:	a4 fe       	sbrs	r10, 4
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <vfprintf+0x36c>
    1efe:	b6 01       	movw	r22, r12
    1f00:	80 e3       	ldi	r24, 0x30	; 48
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	68 d0       	rcall	.+208    	; 0x1fd6 <fputc>
    1f06:	a2 fe       	sbrs	r10, 2
    1f08:	16 c0       	rjmp	.+44     	; 0x1f36 <vfprintf+0x386>
    1f0a:	a1 fc       	sbrc	r10, 1
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <vfprintf+0x364>
    1f0e:	88 e7       	ldi	r24, 0x78	; 120
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <vfprintf+0x368>
    1f14:	88 e5       	ldi	r24, 0x58	; 88
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	b6 01       	movw	r22, r12
    1f1a:	0c c0       	rjmp	.+24     	; 0x1f34 <vfprintf+0x384>
    1f1c:	8a 2d       	mov	r24, r10
    1f1e:	86 78       	andi	r24, 0x86	; 134
    1f20:	51 f0       	breq	.+20     	; 0x1f36 <vfprintf+0x386>
    1f22:	a1 fe       	sbrs	r10, 1
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <vfprintf+0x37a>
    1f26:	8b e2       	ldi	r24, 0x2B	; 43
    1f28:	01 c0       	rjmp	.+2      	; 0x1f2c <vfprintf+0x37c>
    1f2a:	80 e2       	ldi	r24, 0x20	; 32
    1f2c:	a7 fc       	sbrc	r10, 7
    1f2e:	8d e2       	ldi	r24, 0x2D	; 45
    1f30:	b6 01       	movw	r22, r12
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	50 d0       	rcall	.+160    	; 0x1fd6 <fputc>
    1f36:	89 14       	cp	r8, r9
    1f38:	30 f4       	brcc	.+12     	; 0x1f46 <vfprintf+0x396>
    1f3a:	b6 01       	movw	r22, r12
    1f3c:	80 e3       	ldi	r24, 0x30	; 48
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	4a d0       	rcall	.+148    	; 0x1fd6 <fputc>
    1f42:	9a 94       	dec	r9
    1f44:	f8 cf       	rjmp	.-16     	; 0x1f36 <vfprintf+0x386>
    1f46:	8a 94       	dec	r8
    1f48:	f3 01       	movw	r30, r6
    1f4a:	e8 0d       	add	r30, r8
    1f4c:	f1 1d       	adc	r31, r1
    1f4e:	80 81       	ld	r24, Z
    1f50:	b6 01       	movw	r22, r12
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	40 d0       	rcall	.+128    	; 0x1fd6 <fputc>
    1f56:	81 10       	cpse	r8, r1
    1f58:	f6 cf       	rjmp	.-20     	; 0x1f46 <vfprintf+0x396>
    1f5a:	22 20       	and	r2, r2
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <vfprintf+0x3b0>
    1f5e:	4e ce       	rjmp	.-868    	; 0x1bfc <vfprintf+0x4c>
    1f60:	b6 01       	movw	r22, r12
    1f62:	80 e2       	ldi	r24, 0x20	; 32
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	37 d0       	rcall	.+110    	; 0x1fd6 <fputc>
    1f68:	2a 94       	dec	r2
    1f6a:	f7 cf       	rjmp	.-18     	; 0x1f5a <vfprintf+0x3aa>
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	86 81       	ldd	r24, Z+6	; 0x06
    1f70:	97 81       	ldd	r25, Z+7	; 0x07
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <vfprintf+0x3c8>
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	9f ef       	ldi	r25, 0xFF	; 255
    1f78:	2b 96       	adiw	r28, 0x0b	; 11
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	ff 90       	pop	r15
    1f8e:	ef 90       	pop	r14
    1f90:	df 90       	pop	r13
    1f92:	cf 90       	pop	r12
    1f94:	bf 90       	pop	r11
    1f96:	af 90       	pop	r10
    1f98:	9f 90       	pop	r9
    1f9a:	8f 90       	pop	r8
    1f9c:	7f 90       	pop	r7
    1f9e:	6f 90       	pop	r6
    1fa0:	5f 90       	pop	r5
    1fa2:	4f 90       	pop	r4
    1fa4:	3f 90       	pop	r3
    1fa6:	2f 90       	pop	r2
    1fa8:	08 95       	ret

00001faa <strnlen_P>:
    1faa:	fc 01       	movw	r30, r24
    1fac:	05 90       	lpm	r0, Z+
    1fae:	61 50       	subi	r22, 0x01	; 1
    1fb0:	70 40       	sbci	r23, 0x00	; 0
    1fb2:	01 10       	cpse	r0, r1
    1fb4:	d8 f7       	brcc	.-10     	; 0x1fac <strnlen_P+0x2>
    1fb6:	80 95       	com	r24
    1fb8:	90 95       	com	r25
    1fba:	8e 0f       	add	r24, r30
    1fbc:	9f 1f       	adc	r25, r31
    1fbe:	08 95       	ret

00001fc0 <strnlen>:
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	61 50       	subi	r22, 0x01	; 1
    1fc4:	70 40       	sbci	r23, 0x00	; 0
    1fc6:	01 90       	ld	r0, Z+
    1fc8:	01 10       	cpse	r0, r1
    1fca:	d8 f7       	brcc	.-10     	; 0x1fc2 <strnlen+0x2>
    1fcc:	80 95       	com	r24
    1fce:	90 95       	com	r25
    1fd0:	8e 0f       	add	r24, r30
    1fd2:	9f 1f       	adc	r25, r31
    1fd4:	08 95       	ret

00001fd6 <fputc>:
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	fb 01       	movw	r30, r22
    1fe0:	23 81       	ldd	r18, Z+3	; 0x03
    1fe2:	21 fd       	sbrc	r18, 1
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <fputc+0x16>
    1fe6:	8f ef       	ldi	r24, 0xFF	; 255
    1fe8:	9f ef       	ldi	r25, 0xFF	; 255
    1fea:	2c c0       	rjmp	.+88     	; 0x2044 <fputc+0x6e>
    1fec:	22 ff       	sbrs	r18, 2
    1fee:	16 c0       	rjmp	.+44     	; 0x201c <fputc+0x46>
    1ff0:	46 81       	ldd	r20, Z+6	; 0x06
    1ff2:	57 81       	ldd	r21, Z+7	; 0x07
    1ff4:	24 81       	ldd	r18, Z+4	; 0x04
    1ff6:	35 81       	ldd	r19, Z+5	; 0x05
    1ff8:	42 17       	cp	r20, r18
    1ffa:	53 07       	cpc	r21, r19
    1ffc:	44 f4       	brge	.+16     	; 0x200e <fputc+0x38>
    1ffe:	a0 81       	ld	r26, Z
    2000:	b1 81       	ldd	r27, Z+1	; 0x01
    2002:	9d 01       	movw	r18, r26
    2004:	2f 5f       	subi	r18, 0xFF	; 255
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	31 83       	std	Z+1, r19	; 0x01
    200a:	20 83       	st	Z, r18
    200c:	8c 93       	st	X, r24
    200e:	26 81       	ldd	r18, Z+6	; 0x06
    2010:	37 81       	ldd	r19, Z+7	; 0x07
    2012:	2f 5f       	subi	r18, 0xFF	; 255
    2014:	3f 4f       	sbci	r19, 0xFF	; 255
    2016:	37 83       	std	Z+7, r19	; 0x07
    2018:	26 83       	std	Z+6, r18	; 0x06
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <fputc+0x6e>
    201c:	8b 01       	movw	r16, r22
    201e:	ec 01       	movw	r28, r24
    2020:	fb 01       	movw	r30, r22
    2022:	00 84       	ldd	r0, Z+8	; 0x08
    2024:	f1 85       	ldd	r31, Z+9	; 0x09
    2026:	e0 2d       	mov	r30, r0
    2028:	19 95       	eicall
    202a:	89 2b       	or	r24, r25
    202c:	e1 f6       	brne	.-72     	; 0x1fe6 <fputc+0x10>
    202e:	d8 01       	movw	r26, r16
    2030:	16 96       	adiw	r26, 0x06	; 6
    2032:	8d 91       	ld	r24, X+
    2034:	9c 91       	ld	r25, X
    2036:	17 97       	sbiw	r26, 0x07	; 7
    2038:	01 96       	adiw	r24, 0x01	; 1
    203a:	17 96       	adiw	r26, 0x07	; 7
    203c:	9c 93       	st	X, r25
    203e:	8e 93       	st	-X, r24
    2040:	16 97       	sbiw	r26, 0x06	; 6
    2042:	ce 01       	movw	r24, r28
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	08 95       	ret

0000204e <__ultoa_invert>:
    204e:	fa 01       	movw	r30, r20
    2050:	aa 27       	eor	r26, r26
    2052:	28 30       	cpi	r18, 0x08	; 8
    2054:	51 f1       	breq	.+84     	; 0x20aa <__ultoa_invert+0x5c>
    2056:	20 31       	cpi	r18, 0x10	; 16
    2058:	81 f1       	breq	.+96     	; 0x20ba <__ultoa_invert+0x6c>
    205a:	e8 94       	clt
    205c:	6f 93       	push	r22
    205e:	6e 7f       	andi	r22, 0xFE	; 254
    2060:	6e 5f       	subi	r22, 0xFE	; 254
    2062:	7f 4f       	sbci	r23, 0xFF	; 255
    2064:	8f 4f       	sbci	r24, 0xFF	; 255
    2066:	9f 4f       	sbci	r25, 0xFF	; 255
    2068:	af 4f       	sbci	r26, 0xFF	; 255
    206a:	b1 e0       	ldi	r27, 0x01	; 1
    206c:	3e d0       	rcall	.+124    	; 0x20ea <__ultoa_invert+0x9c>
    206e:	b4 e0       	ldi	r27, 0x04	; 4
    2070:	3c d0       	rcall	.+120    	; 0x20ea <__ultoa_invert+0x9c>
    2072:	67 0f       	add	r22, r23
    2074:	78 1f       	adc	r23, r24
    2076:	89 1f       	adc	r24, r25
    2078:	9a 1f       	adc	r25, r26
    207a:	a1 1d       	adc	r26, r1
    207c:	68 0f       	add	r22, r24
    207e:	79 1f       	adc	r23, r25
    2080:	8a 1f       	adc	r24, r26
    2082:	91 1d       	adc	r25, r1
    2084:	a1 1d       	adc	r26, r1
    2086:	6a 0f       	add	r22, r26
    2088:	71 1d       	adc	r23, r1
    208a:	81 1d       	adc	r24, r1
    208c:	91 1d       	adc	r25, r1
    208e:	a1 1d       	adc	r26, r1
    2090:	20 d0       	rcall	.+64     	; 0x20d2 <__ultoa_invert+0x84>
    2092:	09 f4       	brne	.+2      	; 0x2096 <__ultoa_invert+0x48>
    2094:	68 94       	set
    2096:	3f 91       	pop	r19
    2098:	2a e0       	ldi	r18, 0x0A	; 10
    209a:	26 9f       	mul	r18, r22
    209c:	11 24       	eor	r1, r1
    209e:	30 19       	sub	r19, r0
    20a0:	30 5d       	subi	r19, 0xD0	; 208
    20a2:	31 93       	st	Z+, r19
    20a4:	de f6       	brtc	.-74     	; 0x205c <__ultoa_invert+0xe>
    20a6:	cf 01       	movw	r24, r30
    20a8:	08 95       	ret
    20aa:	46 2f       	mov	r20, r22
    20ac:	47 70       	andi	r20, 0x07	; 7
    20ae:	40 5d       	subi	r20, 0xD0	; 208
    20b0:	41 93       	st	Z+, r20
    20b2:	b3 e0       	ldi	r27, 0x03	; 3
    20b4:	0f d0       	rcall	.+30     	; 0x20d4 <__ultoa_invert+0x86>
    20b6:	c9 f7       	brne	.-14     	; 0x20aa <__ultoa_invert+0x5c>
    20b8:	f6 cf       	rjmp	.-20     	; 0x20a6 <__ultoa_invert+0x58>
    20ba:	46 2f       	mov	r20, r22
    20bc:	4f 70       	andi	r20, 0x0F	; 15
    20be:	40 5d       	subi	r20, 0xD0	; 208
    20c0:	4a 33       	cpi	r20, 0x3A	; 58
    20c2:	18 f0       	brcs	.+6      	; 0x20ca <__ultoa_invert+0x7c>
    20c4:	49 5d       	subi	r20, 0xD9	; 217
    20c6:	31 fd       	sbrc	r19, 1
    20c8:	40 52       	subi	r20, 0x20	; 32
    20ca:	41 93       	st	Z+, r20
    20cc:	02 d0       	rcall	.+4      	; 0x20d2 <__ultoa_invert+0x84>
    20ce:	a9 f7       	brne	.-22     	; 0x20ba <__ultoa_invert+0x6c>
    20d0:	ea cf       	rjmp	.-44     	; 0x20a6 <__ultoa_invert+0x58>
    20d2:	b4 e0       	ldi	r27, 0x04	; 4
    20d4:	a6 95       	lsr	r26
    20d6:	97 95       	ror	r25
    20d8:	87 95       	ror	r24
    20da:	77 95       	ror	r23
    20dc:	67 95       	ror	r22
    20de:	ba 95       	dec	r27
    20e0:	c9 f7       	brne	.-14     	; 0x20d4 <__ultoa_invert+0x86>
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	61 05       	cpc	r22, r1
    20e6:	71 05       	cpc	r23, r1
    20e8:	08 95       	ret
    20ea:	9b 01       	movw	r18, r22
    20ec:	ac 01       	movw	r20, r24
    20ee:	0a 2e       	mov	r0, r26
    20f0:	06 94       	lsr	r0
    20f2:	57 95       	ror	r21
    20f4:	47 95       	ror	r20
    20f6:	37 95       	ror	r19
    20f8:	27 95       	ror	r18
    20fa:	ba 95       	dec	r27
    20fc:	c9 f7       	brne	.-14     	; 0x20f0 <__ultoa_invert+0xa2>
    20fe:	62 0f       	add	r22, r18
    2100:	73 1f       	adc	r23, r19
    2102:	84 1f       	adc	r24, r20
    2104:	95 1f       	adc	r25, r21
    2106:	a0 1d       	adc	r26, r0
    2108:	08 95       	ret

0000210a <_exit>:
    210a:	f8 94       	cli

0000210c <__stop_program>:
    210c:	ff cf       	rjmp	.-2      	; 0x210c <__stop_program>
