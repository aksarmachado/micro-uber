
micro_uber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00000486  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800212  00800212  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a9  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd6  00000000  00000000  000016dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e7  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c8  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036e  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000363a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	80 c1       	rjmp	.+768    	; 0x352 <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e8       	ldi	r30, 0x86	; 134
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 31       	cpi	r26, 0x1C	; 28
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	48 d0       	rcall	.+144    	; 0x1b0 <main>
 120:	b0 c1       	rjmp	.+864    	; 0x482 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <desligado_loop>:
    flag = 0;
  }
  // fim do teste teclado
}

void desligado_loop() {
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
  static uint32_t inicio = 0;

  if (teclaPressionada == '3') {
 128:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <teclaPressionada>
 12c:	83 33       	cpi	r24, 0x33	; 51
 12e:	a9 f5       	brne	.+106    	; 0x19a <desligado_loop+0x76>
    if (inicio == 0) {
 130:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 134:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 138:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__data_end+0x2>
 13c:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__data_end+0x3>
 140:	89 2b       	or	r24, r25
 142:	8a 2b       	or	r24, r26
 144:	8b 2b       	or	r24, r27
 146:	49 f4       	brne	.+18     	; 0x15a <desligado_loop+0x36>
      // Começa a contar o tempo no primeiro instante da pressão
      inicio = get_elapsed_time_ms();
 148:	29 d1       	rcall	.+594    	; 0x39c <get_elapsed_time_ms>
 14a:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <__data_end>
 14e:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <__data_end+0x1>
 152:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end+0x2>
 156:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x3>
    }

    // Verifica há quanto tempo está pressionada
    if (get_elapsed_time_ms() - inicio >= 3000) {
 15a:	20 d1       	rcall	.+576    	; 0x39c <get_elapsed_time_ms>
 15c:	00 91 12 02 	lds	r16, 0x0212	; 0x800212 <__data_end>
 160:	10 91 13 02 	lds	r17, 0x0213	; 0x800213 <__data_end+0x1>
 164:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__data_end+0x2>
 168:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__data_end+0x3>
 16c:	dc 01       	movw	r26, r24
 16e:	cb 01       	movw	r24, r22
 170:	80 1b       	sub	r24, r16
 172:	91 0b       	sbc	r25, r17
 174:	a2 0b       	sbc	r26, r18
 176:	b3 0b       	sbc	r27, r19
 178:	88 3b       	cpi	r24, 0xB8	; 184
 17a:	9b 40       	sbci	r25, 0x0B	; 11
 17c:	a1 05       	cpc	r26, r1
 17e:	b1 05       	cpc	r27, r1
 180:	a0 f0       	brcs	.+40     	; 0x1aa <desligado_loop+0x86>
 182:	81 e0       	ldi	r24, 0x01	; 1
      estadoAtual = bloqueado;
 184:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <estadoAtual>
 188:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
      inicio = 0; // Reseta o contador
 18c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
 190:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end+0x2>
 194:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x3>
 198:	08 c0       	rjmp	.+16     	; 0x1aa <desligado_loop+0x86>
 19a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
    }

  } else {
    // Soltou a tecla: reseta o contador
    inicio = 0;
 19e:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
 1a2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end+0x2>
 1a6:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__data_end+0x3>
 1aa:	1f 91       	pop	r17
  }
}
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <main>:
 1b0:	15 d0       	rcall	.+42     	; 0x1dc <teclado_init>
enum estado estadoAtual = desligado; // estado inicial desligado
char teclaPressionada;

int main() {
  teclado_init();
  timer1_init();
 1b2:	c1 d0       	rcall	.+386    	; 0x336 <timer1_init>

  while (1) {
    teclaPressionada = tecla();
 1b4:	58 d0       	rcall	.+176    	; 0x266 <tecla>
 1b6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <teclaPressionada>
 1ba:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <estadoAtual>

    switch (estadoAtual) {
 1be:	88 23       	and	r24, r24
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <main+0x18>
 1c2:	85 30       	cpi	r24, 0x05	; 5
 1c4:	18 f4       	brcc	.+6      	; 0x1cc <main+0x1c>
 1c6:	f6 cf       	rjmp	.-20     	; 0x1b4 <main+0x4>
    case desligado:
      desligado_loop();
 1c8:	ad df       	rcall	.-166    	; 0x124 <desligado_loop>
 1ca:	f4 cf       	rjmp	.-24     	; 0x1b4 <main+0x4>
      break;
 1cc:	ab df       	rcall	.-170    	; 0x124 <desligado_loop>
      break;
    case movimento:
      //   estadoAtual = movimento_loop();
      break;
    default:
      desligado_loop();
 1ce:	f2 cf       	rjmp	.-28     	; 0x1b4 <main+0x4>

000001d0 <atraso_debounce>:
#include <stdlib.h>

int BOUNCE = 8;

void atraso_debounce() {
  while ((TIFR0 & (1 << 0)) == 0); // enquanto a flag de interrup��o do timer 0 n�o for 1
 1d0:	a8 9b       	sbis	0x15, 0	; 21
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <atraso_debounce>
  TCNT0 = 31;
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	86 bd       	out	0x26, r24	; 38
  TIFR0 |= (1 << 0); // zera a flag
 1d8:	a8 9a       	sbi	0x15, 0	; 21
 1da:	08 95       	ret

000001dc <teclado_init>:
}

// Inicializar teclado
void teclado_init() {
  TCCR0A = 0; // configur���o do timer zero para debounce
 1dc:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 4;
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	85 bd       	out	0x25, r24	; 37
  TCNT0 = 31;
 1e2:	8f e1       	ldi	r24, 0x1F	; 31
 1e4:	86 bd       	out	0x26, r24	; 38

  DDRK &= ~(1 << 7 | 1 << 6 | 1 << 5 | 1 << 4); // define PORTK como metade entrada (colunas)
 1e6:	e7 e0       	ldi	r30, 0x07	; 7
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	80 83       	st	Z, r24
  DDRK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);  // define PORTK como sa�da (linhas)
 1f0:	80 81       	ld	r24, Z
 1f2:	8f 60       	ori	r24, 0x0F	; 15
 1f4:	80 83       	st	Z, r24
  PORTK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
 1f6:	e8 e0       	ldi	r30, 0x08	; 8
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 60       	ori	r24, 0x0F	; 15
 1fe:	80 83       	st	Z, r24

  PINK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3); // habilita pull-up nos pinos
 200:	e6 e0       	ldi	r30, 0x06	; 6
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	80 81       	ld	r24, Z
 206:	8f 60       	ori	r24, 0x0F	; 15
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <le_coluna>:
}

// Fun��o de debounce para leitura do teclado, a fun��o recebe como argumento a
// coluna da matriz de contato
char le_coluna(char pino) {
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
 216:	8c 5f       	subi	r24, 0xFC	; 252
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	f9 2e       	mov	r15, r25
 21c:	01 c0       	rjmp	.+2      	; 0x220 <le_coluna+0x14>
 21e:	ff 0c       	add	r15, r15
 220:	8a 95       	dec	r24
 222:	ea f7       	brpl	.-6      	; 0x21e <le_coluna+0x12>
}

// Fun��o de debounce para leitura do teclado, a fun��o recebe como argumento a
// coluna da matriz de contato
char le_coluna(char pino) {
  char count = 0, key_last = 0, key_now = 0;
 224:	d0 e0       	ldi	r29, 0x00	; 0
 226:	c0 e0       	ldi	r28, 0x00	; 0

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
 228:	06 e0       	ldi	r16, 0x06	; 6
 22a:	11 e0       	ldi	r17, 0x01	; 1
// coluna da matriz de contato
char le_coluna(char pino) {
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();
 22c:	d1 df       	rcall	.-94     	; 0x1d0 <atraso_debounce>

    key_now = PINK & (1 << (pino + 4));
 22e:	f8 01       	movw	r30, r16
 230:	90 81       	ld	r25, Z
 232:	9f 21       	and	r25, r15

    if (key_now == key_last) {
 234:	d9 13       	cpse	r29, r25
 236:	02 c0       	rjmp	.+4      	; 0x23c <le_coluna+0x30>
      count = count + 1;
 238:	cf 5f       	subi	r28, 0xFF	; 255
 23a:	01 c0       	rjmp	.+2      	; 0x23e <le_coluna+0x32>
    } else {
      count = 0;
 23c:	c0 e0       	ldi	r28, 0x00	; 0
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
 23e:	d9 2f       	mov	r29, r25
      count = count + 1;
    } else {
      count = 0;
    }

    if (count == BOUNCE) {
 240:	2c 2f       	mov	r18, r28
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 248:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 24c:	24 17       	cp	r18, r20
 24e:	35 07       	cpc	r19, r21
 250:	69 f7       	brne	.-38     	; 0x22c <le_coluna+0x20>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	91 11       	cpse	r25, r1
 256:	01 c0       	rjmp	.+2      	; 0x25a <le_coluna+0x4e>
 258:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    } else {
      key_last = key_now;
    }
  }
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	08 95       	ret

00000266 <tecla>:

// Retorna tecla pressionada
char tecla() {
 266:	af 92       	push	r10
 268:	bf 92       	push	r11
 26a:	cf 92       	push	r12
 26c:	df 92       	push	r13
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	60 97       	sbiw	r28, 0x10	; 16
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	e2 e0       	ldi	r30, 0x02	; 2
 28e:	f2 e0       	ldi	r31, 0x02	; 2
 290:	de 01       	movw	r26, r28
 292:	11 96       	adiw	r26, 0x01	; 1
 294:	01 90       	ld	r0, Z+
 296:	0d 92       	st	X+, r0
 298:	8a 95       	dec	r24
 29a:	e1 f7       	brne	.-8      	; 0x294 <tecla+0x2e>

  for (linha = 0; linha < 4; linha++) {
 29c:	e1 2c       	mov	r14, r1
 29e:	f1 2c       	mov	r15, r1
    PORTK |= 0x0F;
 2a0:	68 94       	set
 2a2:	cc 24       	eor	r12, r12
 2a4:	c3 f8       	bld	r12, 3
 2a6:	dd 24       	eor	r13, r13
 2a8:	d3 94       	inc	r13
    PORTK &= ~(1 << linha); // Itera as colunas do teclado
 2aa:	aa 24       	eor	r10, r10
 2ac:	a3 94       	inc	r10
 2ae:	b1 2c       	mov	r11, r1
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};

  for (linha = 0; linha < 4; linha++) {
    PORTK |= 0x0F;
 2b0:	f6 01       	movw	r30, r12
 2b2:	80 81       	ld	r24, Z
 2b4:	8f 60       	ori	r24, 0x0F	; 15
 2b6:	80 83       	st	Z, r24
    PORTK &= ~(1 << linha); // Itera as colunas do teclado
 2b8:	90 81       	ld	r25, Z
 2ba:	95 01       	movw	r18, r10
 2bc:	0e 2c       	mov	r0, r14
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <tecla+0x5e>
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <tecla+0x5a>
 2c8:	82 2f       	mov	r24, r18
 2ca:	80 95       	com	r24
 2cc:	89 23       	and	r24, r25
 2ce:	80 83       	st	Z, r24

    for (coluna = 0; coluna < 3; coluna++) {
 2d0:	00 e0       	ldi	r16, 0x00	; 0
 2d2:	10 e0       	ldi	r17, 0x00	; 0
      if (!le_coluna(coluna)) {
 2d4:	80 2f       	mov	r24, r16
 2d6:	9a df       	rcall	.-204    	; 0x20c <le_coluna>
 2d8:	81 11       	cpse	r24, r1
 2da:	0f c0       	rjmp	.+30     	; 0x2fa <tecla+0x94>
        // while(!le_coluna(coluna));
        return teclado[linha][coluna];
 2dc:	ee 0c       	add	r14, r14
 2de:	ff 1c       	adc	r15, r15
 2e0:	ee 0c       	add	r14, r14
 2e2:	ff 1c       	adc	r15, r15
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	8c 0f       	add	r24, r28
 2ea:	9d 1f       	adc	r25, r29
 2ec:	e8 0e       	add	r14, r24
 2ee:	f9 1e       	adc	r15, r25
 2f0:	f7 01       	movw	r30, r14
 2f2:	e0 0f       	add	r30, r16
 2f4:	f1 1f       	adc	r31, r17
 2f6:	80 81       	ld	r24, Z
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <tecla+0xae>

  for (linha = 0; linha < 4; linha++) {
    PORTK |= 0x0F;
    PORTK &= ~(1 << linha); // Itera as colunas do teclado

    for (coluna = 0; coluna < 3; coluna++) {
 2fa:	0f 5f       	subi	r16, 0xFF	; 255
 2fc:	1f 4f       	sbci	r17, 0xFF	; 255
 2fe:	03 30       	cpi	r16, 0x03	; 3
 300:	11 05       	cpc	r17, r1
 302:	41 f7       	brne	.-48     	; 0x2d4 <tecla+0x6e>
char tecla() {
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};

  for (linha = 0; linha < 4; linha++) {
 304:	9f ef       	ldi	r25, 0xFF	; 255
 306:	e9 1a       	sub	r14, r25
 308:	f9 0a       	sbc	r15, r25
 30a:	e4 e0       	ldi	r30, 0x04	; 4
 30c:	ee 16       	cp	r14, r30
 30e:	f1 04       	cpc	r15, r1
 310:	79 f6       	brne	.-98     	; 0x2b0 <tecla+0x4a>
        // while(!le_coluna(coluna));
        return teclado[linha][coluna];
      }
    }
  }
  return 0; // caso nenhuma tecla seja pressionada
 312:	80 e0       	ldi	r24, 0x00	; 0
}
 314:	60 96       	adiw	r28, 0x10	; 16
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	df 90       	pop	r13
 32e:	cf 90       	pop	r12
 330:	bf 90       	pop	r11
 332:	af 90       	pop	r10
 334:	08 95       	ret

00000336 <timer1_init>:
#include "timer.h"

volatile uint32_t overflow_count = 0;

void timer1_init() {
  TCCR1A = 0x00;         // Configura o Timer1 em modo normal
 336:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
  TCCR1B = (1 << CS12);  // Prescaler = 256
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
  TCNT1 = 0;             // Inicializa counter
 340:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 344:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
  TIMSK1 = (1 << TOIE1); // Habilita interrupção por overflow do Timer1
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
  sei();                 // Habilita interrupções globais
 34e:	78 94       	sei
 350:	08 95       	ret

00000352 <__vector_20>:
}

ISR(TIMER1_OVF_vect) {
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
  overflow_count++; // Incrementa overflow count
 364:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <overflow_count>
 368:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <overflow_count+0x1>
 36c:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <overflow_count+0x2>
 370:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <overflow_count+0x3>
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	a1 1d       	adc	r26, r1
 378:	b1 1d       	adc	r27, r1
 37a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <overflow_count>
 37e:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <overflow_count+0x1>
 382:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <overflow_count+0x2>
 386:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <overflow_count+0x3>
}
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <get_elapsed_time_ms>:

uint32_t get_elapsed_time_ms() {
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
  uint32_t total_ticks;
  uint32_t elapsed_time_ms;

  // Desabilita interrupção para leitura consistente de overflow_count e TCNT1
  uint8_t sreg = SREG;
 3a0:	6f b7       	in	r22, 0x3f	; 63
  cli();
 3a2:	f8 94       	cli
  total_ticks = (overflow_count * 65536UL) + TCNT1;
 3a4:	00 91 17 02 	lds	r16, 0x0217	; 0x800217 <overflow_count>
 3a8:	10 91 18 02 	lds	r17, 0x0218	; 0x800218 <overflow_count+0x1>
 3ac:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <overflow_count+0x2>
 3b0:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <overflow_count+0x3>
 3b4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 3b8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
  SREG = sreg;
 3bc:	6f bf       	out	0x3f, r22	; 63

  // Converte para milissegundos
  elapsed_time_ms = (total_ticks * 1000UL * 256UL) / F_CPU;

  return elapsed_time_ms;
 3be:	b8 01       	movw	r22, r16
 3c0:	55 27       	eor	r21, r21
 3c2:	44 27       	eor	r20, r20
 3c4:	9a 01       	movw	r18, r20
 3c6:	ab 01       	movw	r20, r22
 3c8:	28 0f       	add	r18, r24
 3ca:	39 1f       	adc	r19, r25
 3cc:	41 1d       	adc	r20, r1
 3ce:	51 1d       	adc	r21, r1
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	78 ee       	ldi	r23, 0xE8	; 232
 3d4:	83 e0       	ldi	r24, 0x03	; 3
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0a d0       	rcall	.+20     	; 0x3ee <__mulsi3>
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	34 e2       	ldi	r19, 0x24	; 36
 3de:	44 ef       	ldi	r20, 0xF4	; 244
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	14 d0       	rcall	.+40     	; 0x40c <__udivmodsi4>
}
 3e4:	ca 01       	movw	r24, r20
 3e6:	b9 01       	movw	r22, r18
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <__mulsi3>:
 3ee:	db 01       	movw	r26, r22
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	2d d0       	rcall	.+90     	; 0x450 <__muluhisi3>
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	a2 9f       	mul	r26, r18
 3fc:	80 0d       	add	r24, r0
 3fe:	91 1d       	adc	r25, r1
 400:	a3 9f       	mul	r26, r19
 402:	90 0d       	add	r25, r0
 404:	b2 9f       	mul	r27, r18
 406:	90 0d       	add	r25, r0
 408:	11 24       	eor	r1, r1
 40a:	08 95       	ret

0000040c <__udivmodsi4>:
 40c:	a1 e2       	ldi	r26, 0x21	; 33
 40e:	1a 2e       	mov	r1, r26
 410:	aa 1b       	sub	r26, r26
 412:	bb 1b       	sub	r27, r27
 414:	fd 01       	movw	r30, r26
 416:	0d c0       	rjmp	.+26     	; 0x432 <__udivmodsi4_ep>

00000418 <__udivmodsi4_loop>:
 418:	aa 1f       	adc	r26, r26
 41a:	bb 1f       	adc	r27, r27
 41c:	ee 1f       	adc	r30, r30
 41e:	ff 1f       	adc	r31, r31
 420:	a2 17       	cp	r26, r18
 422:	b3 07       	cpc	r27, r19
 424:	e4 07       	cpc	r30, r20
 426:	f5 07       	cpc	r31, r21
 428:	20 f0       	brcs	.+8      	; 0x432 <__udivmodsi4_ep>
 42a:	a2 1b       	sub	r26, r18
 42c:	b3 0b       	sbc	r27, r19
 42e:	e4 0b       	sbc	r30, r20
 430:	f5 0b       	sbc	r31, r21

00000432 <__udivmodsi4_ep>:
 432:	66 1f       	adc	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	88 1f       	adc	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	1a 94       	dec	r1
 43c:	69 f7       	brne	.-38     	; 0x418 <__udivmodsi4_loop>
 43e:	60 95       	com	r22
 440:	70 95       	com	r23
 442:	80 95       	com	r24
 444:	90 95       	com	r25
 446:	9b 01       	movw	r18, r22
 448:	ac 01       	movw	r20, r24
 44a:	bd 01       	movw	r22, r26
 44c:	cf 01       	movw	r24, r30
 44e:	08 95       	ret

00000450 <__muluhisi3>:
 450:	09 d0       	rcall	.+18     	; 0x464 <__umulhisi3>
 452:	a5 9f       	mul	r26, r21
 454:	90 0d       	add	r25, r0
 456:	b4 9f       	mul	r27, r20
 458:	90 0d       	add	r25, r0
 45a:	a4 9f       	mul	r26, r20
 45c:	80 0d       	add	r24, r0
 45e:	91 1d       	adc	r25, r1
 460:	11 24       	eor	r1, r1
 462:	08 95       	ret

00000464 <__umulhisi3>:
 464:	a2 9f       	mul	r26, r18
 466:	b0 01       	movw	r22, r0
 468:	b3 9f       	mul	r27, r19
 46a:	c0 01       	movw	r24, r0
 46c:	a3 9f       	mul	r26, r19
 46e:	70 0d       	add	r23, r0
 470:	81 1d       	adc	r24, r1
 472:	11 24       	eor	r1, r1
 474:	91 1d       	adc	r25, r1
 476:	b2 9f       	mul	r27, r18
 478:	70 0d       	add	r23, r0
 47a:	81 1d       	adc	r24, r1
 47c:	11 24       	eor	r1, r1
 47e:	91 1d       	adc	r25, r1
 480:	08 95       	ret

00000482 <_exit>:
 482:	f8 94       	cli

00000484 <__stop_program>:
 484:	ff cf       	rjmp	.-2      	; 0x484 <__stop_program>
