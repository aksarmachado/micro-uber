
micro_uber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800200  00000a5c  00000af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800292  00800292  00000b82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001851  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa5  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a79  00000000  00000000  00003502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ce  00000000  00000000  0000423c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000785  00000000  00000000  00004a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000518f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	75 c2       	rjmp	.+1258   	; 0x528 <__vector_15>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e5       	ldi	r30, 0x5C	; 92
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 39       	cpi	r26, 0x92	; 146
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e9       	ldi	r26, 0x92	; 146
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 39       	cpi	r26, 0x9F	; 159
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	31 d1       	rcall	.+610    	; 0x382 <main>
 120:	9b c4       	rjmp	.+2358   	; 0xa58 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <LCD_Command>:
#define EN PF3                 /* Define Enable signal pin */

#include <avr/interrupt.h>

void LCD_Command(unsigned char cmnd) {
  LCD_Data_Port = cmnd;
 124:	82 b9       	out	0x02, r24	; 2
  LCD_Command_Port &= ~(1 << RS); /* RS=0 command reg. */
 126:	8a 98       	cbi	0x11, 2	; 17
  LCD_Command_Port &= ~(1 << RW); /* RW=0 Write operation */
 128:	89 98       	cbi	0x11, 1	; 17
  LCD_Command_Port |= (1 << EN);  /* Enable pulse */
 12a:	8b 9a       	sbi	0x11, 3	; 17
  //_delay_us(1);
  Timer1_us(1);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	7d d2       	rcall	.+1274   	; 0x62a <Timer1_us>
  LCD_Command_Port &= ~(1 << EN);
 130:	8b 98       	cbi	0x11, 3	; 17
  //_delay_ms(3);
  Timer1_ms(3);
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	8c c2       	rjmp	.+1304   	; 0x64e <Timer1_ms>
 136:	08 95       	ret

00000138 <LCD_Char>:
}

void LCD_Char(unsigned char char_data) /* LCD data write function */
{
  LCD_Data_Port = char_data;
 138:	82 b9       	out	0x02, r24	; 2
  LCD_Command_Port |= (1 << RS);  /* RS=1 Data reg. */
 13a:	8a 9a       	sbi	0x11, 2	; 17
  LCD_Command_Port &= ~(1 << RW); /* RW=0 write operation */
 13c:	89 98       	cbi	0x11, 1	; 17
  LCD_Command_Port |= (1 << EN);  /* Enable Pulse */
 13e:	8b 9a       	sbi	0x11, 3	; 17
  //_delay_us(1);
  Timer1_us(1);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	73 d2       	rcall	.+1254   	; 0x62a <Timer1_us>
  LCD_Command_Port &= ~(1 << EN);
 144:	8b 98       	cbi	0x11, 3	; 17
  //_delay_ms(1);
  Timer1_ms(1);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	82 c2       	rjmp	.+1284   	; 0x64e <Timer1_ms>
 14a:	08 95       	ret

0000014c <LCD_Init>:
}

void LCD_Init(void) /* LCD Initialize function */
{
  LCD_Command_Dir = 0xFF; /* Make LCD command port direction as o/p */
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	80 bb       	out	0x10, r24	; 16
  LCD_Data_Dir = 0xFF;    /* Make LCD data port direction as o/p */
 150:	81 b9       	out	0x01, r24	; 1
  //_delay_ms(20);			/* LCD Power ON delay always >15ms */
  Timer1_ms(20);
 152:	84 e1       	ldi	r24, 0x14	; 20
 154:	7c d2       	rcall	.+1272   	; 0x64e <Timer1_ms>

  LCD_Command(0x38); /* Initialization of 16X2 LCD in 8bit mode */
 156:	88 e3       	ldi	r24, 0x38	; 56
 158:	e5 df       	rcall	.-54     	; 0x124 <LCD_Command>
  LCD_Command(0x0C); /* Display ON Cursor OFF */
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	e3 df       	rcall	.-58     	; 0x124 <LCD_Command>
  LCD_Command(0x06); /* Auto Increment cursor */
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	e1 df       	rcall	.-62     	; 0x124 <LCD_Command>
  LCD_Command(0x01); /* Clear display */
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	df df       	rcall	.-66     	; 0x124 <LCD_Command>
 166:	80 e8       	ldi	r24, 0x80	; 128
  LCD_Command(0x80); /* Cursor at home position */
 168:	dd cf       	rjmp	.-70     	; 0x124 <LCD_Command>
 16a:	08 95       	ret

0000016c <LCD_String>:
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
}

void LCD_String(char *str) /* Send string to LCD function */
{
 170:	ec 01       	movw	r28, r24
  int i;
  for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <LCD_String+0x16>
 178:	21 96       	adiw	r28, 0x01	; 1
  {
    LCD_Char(str[i]);
 17a:	de df       	rcall	.-68     	; 0x138 <LCD_Char>
}

void LCD_String(char *str) /* Send string to LCD function */
{
  int i;
  for (i = 0; str[i] != 0; i++) /* Send each char of string till the NULL */
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fc cf       	rjmp	.-8      	; 0x17a <LCD_String+0xe>
  {
    LCD_Char(str[i]);
  }
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str) /* Send string to LCD with xy position */
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ea 01       	movw	r28, r20
  if (row == 0 && pos < 16)
 18e:	81 11       	cpse	r24, r1
 190:	07 c0       	rjmp	.+14     	; 0x1a0 <LCD_String_xy+0x18>
 192:	60 31       	cpi	r22, 0x10	; 16
 194:	68 f4       	brcc	.+26     	; 0x1b0 <LCD_String_xy+0x28>
    LCD_Command((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
 196:	86 2f       	mov	r24, r22
 198:	8f 70       	andi	r24, 0x0F	; 15
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	c3 df       	rcall	.-122    	; 0x124 <LCD_Command>
 19e:	08 c0       	rjmp	.+16     	; 0x1b0 <LCD_String_xy+0x28>
  else if (row == 1 && pos < 16)
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	31 f4       	brne	.+12     	; 0x1b0 <LCD_String_xy+0x28>
 1a4:	60 31       	cpi	r22, 0x10	; 16
 1a6:	20 f4       	brcc	.+8      	; 0x1b0 <LCD_String_xy+0x28>
    LCD_Command((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
 1a8:	86 2f       	mov	r24, r22
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	80 6c       	ori	r24, 0xC0	; 192
 1ae:	ba df       	rcall	.-140    	; 0x124 <LCD_Command>
  LCD_String(str);                    /* Call LCD string function */
 1b0:	ce 01       	movw	r24, r28
 1b2:	dc df       	rcall	.-72     	; 0x16c <LCD_String>
 1b4:	df 91       	pop	r29
}
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <LCD_Clear>:
 1ba:	81 e0       	ldi	r24, 0x01	; 1

void LCD_Clear() {
  LCD_Command(0x01); /* clear display */
 1bc:	b3 df       	rcall	.-154    	; 0x124 <LCD_Command>
  LCD_Command(0x80); /* cursor at home position */
 1be:	80 e8       	ldi	r24, 0x80	; 128
 1c0:	b1 cf       	rjmp	.-158    	; 0x124 <LCD_Command>
 1c2:	08 95       	ret

000001c4 <desligado_loop>:
  }
}

void desligado_loop() {
  static float inicio = 0;
  if (teclaPressionada == '#') {
 1c4:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <teclaPressionada>
 1c8:	83 32       	cpi	r24, 0x23	; 35
 1ca:	a1 f5       	brne	.+104    	; 0x234 <desligado_loop+0x70>
    if (inicio == 0) {
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	a9 01       	movw	r20, r18
 1d2:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <inicio.1940>
 1d6:	70 91 95 02 	lds	r23, 0x0295	; 0x800295 <inicio.1940+0x1>
 1da:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <inicio.1940+0x2>
 1de:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <inicio.1940+0x3>
 1e2:	ac d2       	rcall	.+1368   	; 0x73c <__cmpsf2>
 1e4:	81 11       	cpse	r24, r1
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <desligado_loop+0x36>
      // Começa a contar o tempo no primeiro instante da pressão
      inicio = get_elapsed_time_ms();
 1e8:	da d1       	rcall	.+948    	; 0x59e <get_elapsed_time_ms>
 1ea:	60 93 94 02 	sts	0x0294, r22	; 0x800294 <inicio.1940>
 1ee:	70 93 95 02 	sts	0x0295, r23	; 0x800295 <inicio.1940+0x1>
 1f2:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <inicio.1940+0x2>
 1f6:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <inicio.1940+0x3>
    }

    // Verifica há quanto tempo está pressionada
    float tempoPressionado = get_elapsed_time_ms() - inicio;
 1fa:	d1 d1       	rcall	.+930    	; 0x59e <get_elapsed_time_ms>
 1fc:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <inicio.1940>
    if (tempoPressionado >= 3000) {
 200:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <inicio.1940+0x1>
 204:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <inicio.1940+0x2>
 208:	50 91 97 02 	lds	r21, 0x0297	; 0x800297 <inicio.1940+0x3>
 20c:	32 d2       	rcall	.+1124   	; 0x672 <__subsf3>
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e8       	ldi	r19, 0x80	; 128
 212:	4b e3       	ldi	r20, 0x3B	; 59
 214:	55 e4       	ldi	r21, 0x45	; 69
 216:	b0 d3       	rcall	.+1888   	; 0x978 <__gesf2>
 218:	88 23       	and	r24, r24
 21a:	a4 f0       	brlt	.+40     	; 0x244 <desligado_loop+0x80>
 21c:	81 e0       	ldi	r24, 0x01	; 1
      estadoAtual = bloqueado;
 21e:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <estadoAtual>
 222:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <inicio.1940>
      inicio = 0; // Reseta o contador
 226:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <inicio.1940+0x1>
 22a:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <inicio.1940+0x2>
 22e:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <inicio.1940+0x3>
 232:	08 95       	ret
 234:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <inicio.1940>
    }

  } else {
    // Soltou a tecla: reseta o contador
    inicio = 0;
 238:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <inicio.1940+0x1>
 23c:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <inicio.1940+0x2>
 240:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <inicio.1940+0x3>
 244:	08 95       	ret

00000246 <bloqueado_loop>:
 246:	cf 93       	push	r28
  }
}

void bloqueado_loop() {
 248:	df 93       	push	r29
  // Senha operador1: “3258” pode mudar configurações do sistema
  // Senha operador2: “8741”
  static int digitos = 0;

  LCD_Clear();
 24a:	b7 df       	rcall	.-146    	; 0x1ba <LCD_Clear>
  LCD_String("Digite a senha:");
 24c:	81 e2       	ldi	r24, 0x21	; 33
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	8d df       	rcall	.-230    	; 0x16c <LCD_String>
  for (int i = 0; i < digitos; i++) {
 252:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
 256:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
 25a:	18 16       	cp	r1, r24
 25c:	19 06       	cpc	r1, r25
 25e:	7c f4       	brge	.+30     	; 0x27e <bloqueado_loop+0x38>
 260:	c0 e0       	ldi	r28, 0x00	; 0
 262:	d0 e0       	ldi	r29, 0x00	; 0
    LCD_String_xy(1, i, "*"); // Para cada dígito, mascara com * na tela
 264:	41 e3       	ldi	r20, 0x31	; 49
 266:	52 e0       	ldi	r21, 0x02	; 2
 268:	6c 2f       	mov	r22, r28
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	8d df       	rcall	.-230    	; 0x188 <LCD_String_xy>
  // Senha operador2: “8741”
  static int digitos = 0;

  LCD_Clear();
  LCD_String("Digite a senha:");
  for (int i = 0; i < digitos; i++) {
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
 274:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
 278:	c8 17       	cp	r28, r24
 27a:	d9 07       	cpc	r29, r25
 27c:	9c f3       	brlt	.-26     	; 0x264 <bloqueado_loop+0x1e>
    LCD_String_xy(1, i, "*"); // Para cada dígito, mascara com * na tela
  }

  // Laço for para inserir a senha; a senha digitada é armazenada até terminar os 4 dígitos
  if (teclaPressionada != 'f' && teclaPressionada != '#' && teclaPressionada != '*' && digitos < 4) {
 27e:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <teclaPressionada>
 282:	26 36       	cpi	r18, 0x66	; 102
 284:	91 f0       	breq	.+36     	; 0x2aa <bloqueado_loop+0x64>
 286:	23 32       	cpi	r18, 0x23	; 35
 288:	81 f0       	breq	.+32     	; 0x2aa <bloqueado_loop+0x64>
 28a:	2a 32       	cpi	r18, 0x2A	; 42
 28c:	71 f0       	breq	.+28     	; 0x2aa <bloqueado_loop+0x64>
 28e:	84 30       	cpi	r24, 0x04	; 4
 290:	91 05       	cpc	r25, r1
 292:	5c f4       	brge	.+22     	; 0x2aa <bloqueado_loop+0x64>
    senha_digitada[digitos] = teclaPressionada;
 294:	fc 01       	movw	r30, r24
 296:	e6 5f       	subi	r30, 0xF6	; 246
 298:	fd 4f       	sbci	r31, 0xFD	; 253
 29a:	20 83       	st	Z, r18
    digitos++;
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <__data_end+0x1>
 2a2:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <__data_end>
    Timer1_ms(100);
 2a6:	84 e6       	ldi	r24, 0x64	; 100
 2a8:	d2 d1       	rcall	.+932    	; 0x64e <Timer1_ms>
  }

  // Faz a verificação dos digitos, retorna se ainda não foram digitados os 4 dígitos
  if (digitos < 4) {
 2aa:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
 2ae:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
 2b2:	04 97       	sbiw	r24, 0x04	; 4
 2b4:	0c f4       	brge	.+2      	; 0x2b8 <bloqueado_loop+0x72>
    return;
  }

  LCD_Clear();
 2b6:	62 c0       	rjmp	.+196    	; 0x37c <bloqueado_loop+0x136>
  if (strcmp(senha_digitada, senha_op1) == 0) // Verifica se a senha digitada é a senha do operador 1
 2b8:	80 df       	rcall	.-256    	; 0x1ba <LCD_Clear>
 2ba:	65 e0       	ldi	r22, 0x05	; 5
 2bc:	72 e0       	ldi	r23, 0x02	; 2
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	c1 d3       	rcall	.+1922   	; 0xa46 <strcmp>
 2c4:	89 2b       	or	r24, r25
  {
    operador_atual = 1;
 2c6:	49 f4       	brne	.+18     	; 0x2da <bloqueado_loop+0x94>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
    LCD_String("Operador 1");
 2ca:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <operador_atual>
 2ce:	83 e3       	ldi	r24, 0x33	; 51
 2d0:	92 e0       	ldi	r25, 0x02	; 2
    Timer1_ms(3000);                                 // Atualiza para operador 1
 2d2:	4c df       	rcall	.-360    	; 0x16c <LCD_String>
 2d4:	88 eb       	ldi	r24, 0xB8	; 184
 2d6:	bb d1       	rcall	.+886    	; 0x64e <Timer1_ms>
  } else if (strcmp(senha_digitada, senha_op2) == 0) // Verifica se a senha digitada é a senha do operador 2
 2d8:	2a c0       	rjmp	.+84     	; 0x32e <bloqueado_loop+0xe8>
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	72 e0       	ldi	r23, 0x02	; 2
 2de:	8a e0       	ldi	r24, 0x0A	; 10
 2e0:	92 e0       	ldi	r25, 0x02	; 2
 2e2:	b1 d3       	rcall	.+1890   	; 0xa46 <strcmp>
  {
    operador_atual = 2; // Atualiza para operador 2
 2e4:	89 2b       	or	r24, r25
 2e6:	49 f4       	brne	.+18     	; 0x2fa <bloqueado_loop+0xb4>
    LCD_String("Operador 2");
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <operador_atual>
    Timer1_ms(3000);
 2ee:	8e e3       	ldi	r24, 0x3E	; 62
 2f0:	92 e0       	ldi	r25, 0x02	; 2
  } else {
    LCD_Clear();
 2f2:	3c df       	rcall	.-392    	; 0x16c <LCD_String>
    LCD_String("Acesso invalido");
 2f4:	88 eb       	ldi	r24, 0xB8	; 184
 2f6:	ab d1       	rcall	.+854    	; 0x64e <Timer1_ms>
 2f8:	1a c0       	rjmp	.+52     	; 0x32e <bloqueado_loop+0xe8>
 2fa:	5f df       	rcall	.-322    	; 0x1ba <LCD_Clear>
    Timer1_ms(2000);
 2fc:	89 e4       	ldi	r24, 0x49	; 73
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	35 df       	rcall	.-406    	; 0x16c <LCD_String>
    LCD_Clear();
 302:	80 ed       	ldi	r24, 0xD0	; 208
 304:	a4 d1       	rcall	.+840    	; 0x64e <Timer1_ms>
    LCD_String("Tente novamente");
 306:	59 df       	rcall	.-334    	; 0x1ba <LCD_Clear>
 308:	89 e5       	ldi	r24, 0x59	; 89
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	2f df       	rcall	.-418    	; 0x16c <LCD_String>
    Timer1_ms(2000);
 30e:	80 ed       	ldi	r24, 0xD0	; 208
 310:	9e d1       	rcall	.+828    	; 0x64e <Timer1_ms>
    LCD_Clear();
 312:	53 df       	rcall	.-346    	; 0x1ba <LCD_Clear>

    digitos = 0; // Reseta o contador de dígitos para nova tentativa
 314:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <__data_end+0x1>
    // Limpa o vetor de senha digitada para uma que possa ser inserida uma senha válida
    senha_digitada[0] = 'F';
 318:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <__data_end>
    senha_digitada[1] = 'F';
 31c:	ea e0       	ldi	r30, 0x0A	; 10
    senha_digitada[2] = 'F';
 31e:	f2 e0       	ldi	r31, 0x02	; 2
    senha_digitada[3] = 'F';
    senha_digitada[4] = '\0';
 320:	86 e4       	ldi	r24, 0x46	; 70
    return;
  }

  // Se a senha estiver correta, desbloqueia o sistema
  LCD_Clear();
 322:	80 83       	st	Z, r24
  LCD_String("Senha correta");
 324:	81 83       	std	Z+1, r24	; 0x01
 326:	82 83       	std	Z+2, r24	; 0x02
 328:	83 83       	std	Z+3, r24	; 0x03
 32a:	14 82       	std	Z+4, r1	; 0x04
  Timer1_ms(1500);
 32c:	27 c0       	rjmp	.+78     	; 0x37c <bloqueado_loop+0x136>
 32e:	45 df       	rcall	.-374    	; 0x1ba <LCD_Clear>
  LCD_Clear();
 330:	89 e6       	ldi	r24, 0x69	; 105
  LCD_String("Desbloqueado");
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	1b df       	rcall	.-458    	; 0x16c <LCD_String>
 336:	8c ed       	ldi	r24, 0xDC	; 220
 338:	8a d1       	rcall	.+788    	; 0x64e <Timer1_ms>
  Timer1_ms(1500);
 33a:	3f df       	rcall	.-386    	; 0x1ba <LCD_Clear>
 33c:	87 e7       	ldi	r24, 0x77	; 119
  LCD_Clear();
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	15 df       	rcall	.-470    	; 0x16c <LCD_String>
  LCD_String("Uber DeLEats");
 342:	8c ed       	ldi	r24, 0xDC	; 220
 344:	84 d1       	rcall	.+776    	; 0x64e <Timer1_ms>
 346:	39 df       	rcall	.-398    	; 0x1ba <LCD_Clear>
 348:	84 e8       	ldi	r24, 0x84	; 132
  Timer1_ms(1500);
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	0f df       	rcall	.-482    	; 0x16c <LCD_String>
 34e:	8c ed       	ldi	r24, 0xDC	; 220
  LCD_Clear();
 350:	7e d1       	rcall	.+764    	; 0x64e <Timer1_ms>
 352:	33 df       	rcall	.-410    	; 0x1ba <LCD_Clear>

  if (operador_atual == 1) // Se for a senha do operador 1
 354:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <operador_atual>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	31 f4       	brne	.+12     	; 0x368 <bloqueado_loop+0x122>
  {
    LCD_String("Operador 1");
 35c:	83 e3       	ldi	r24, 0x33	; 51
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	05 df       	rcall	.-502    	; 0x16c <LCD_String>
 362:	8c ed       	ldi	r24, 0xDC	; 220
    Timer1_ms(1500);
 364:	74 d1       	rcall	.+744    	; 0x64e <Timer1_ms>
 366:	07 c0       	rjmp	.+14     	; 0x376 <bloqueado_loop+0x130>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	29 f4       	brne	.+10     	; 0x376 <bloqueado_loop+0x130>
    // Transm_estado_veiculo('1'); // Transmite mensagem serial de estado do carro como disponivel (1)
  } else if (operador_atual == 2) // Se for a senha do operador 2
 36c:	8e e3       	ldi	r24, 0x3E	; 62
 36e:	92 e0       	ldi	r25, 0x02	; 2
  {
    LCD_String("Operador 2");
 370:	fd de       	rcall	.-518    	; 0x16c <LCD_String>
 372:	8c ed       	ldi	r24, 0xDC	; 220
 374:	6c d1       	rcall	.+728    	; 0x64e <Timer1_ms>
 376:	82 e0       	ldi	r24, 0x02	; 2
    Timer1_ms(1500);
 378:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <estadoAtual>
 37c:	df 91       	pop	r29
    // Transm_estado_veiculo('1'); // Transmite mensagem serial de estado do carro como disponivel (1)
  }

  estadoAtual = disponivel; // Atualiza para sistema desbloqueado
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <main>:
 382:	19 d0       	rcall	.+50     	; 0x3b6 <teclado_init>
}
 384:	c5 d0       	rcall	.+394    	; 0x510 <timer2_init>
 386:	e2 de       	rcall	.-572    	; 0x14c <LCD_Init>
 388:	5b d0       	rcall	.+182    	; 0x440 <tecla>
  teclado_init();
  timer2_init();
  LCD_Init();

  while (1) {
    teclaPressionada = tecla();
 38a:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <teclaPressionada>
 38e:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <estadoAtual>

    switch (estadoAtual) {
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	31 f0       	breq	.+12     	; 0x3a2 <main+0x20>
 396:	18 f0       	brcs	.+6      	; 0x39e <main+0x1c>
 398:	85 30       	cpi	r24, 0x05	; 5
 39a:	28 f4       	brcc	.+10     	; 0x3a6 <main+0x24>
 39c:	f5 cf       	rjmp	.-22     	; 0x388 <main+0x6>
    case desligado:
      desligado_loop();
 39e:	12 df       	rcall	.-476    	; 0x1c4 <desligado_loop>
      break;
 3a0:	f3 cf       	rjmp	.-26     	; 0x388 <main+0x6>
    case bloqueado:
      bloqueado_loop();
 3a2:	51 df       	rcall	.-350    	; 0x246 <bloqueado_loop>
 3a4:	f1 cf       	rjmp	.-30     	; 0x388 <main+0x6>
      break;
 3a6:	0e df       	rcall	.-484    	; 0x1c4 <desligado_loop>
      break;
    case movimento:
      // movimento_loop();
      break;
    default:
      desligado_loop();
 3a8:	ef cf       	rjmp	.-34     	; 0x388 <main+0x6>

000003aa <atraso_debounce>:
#include <stdlib.h>

int BOUNCE = 2; // número de leituras estáveis para considerar a tecla pressionada

void atraso_debounce() {
  while ((TIFR0 & (1 << 0)) == 0); // enquanto a flag de interrup��o do timer 0 n�o for 1
 3aa:	a8 9b       	sbis	0x15, 0	; 21
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <atraso_debounce>
  TCNT0 = 31;
 3ae:	8f e1       	ldi	r24, 0x1F	; 31
 3b0:	86 bd       	out	0x26, r24	; 38
  TIFR0 |= (1 << 0); // zera a flag
 3b2:	a8 9a       	sbi	0x15, 0	; 21
 3b4:	08 95       	ret

000003b6 <teclado_init>:
}

// Inicializar teclado
void teclado_init() {
  TCCR0A = 0; // configur���o do timer zero para debounce
 3b6:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 4;
 3b8:	84 e0       	ldi	r24, 0x04	; 4
 3ba:	85 bd       	out	0x25, r24	; 37
  TCNT0 = 31;
 3bc:	8f e1       	ldi	r24, 0x1F	; 31
 3be:	86 bd       	out	0x26, r24	; 38

  DDRK &= ~(1 << 7 | 1 << 6 | 1 << 5 | 1 << 4); // define PORTK como metade entrada (colunas)
 3c0:	e7 e0       	ldi	r30, 0x07	; 7
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	80 81       	ld	r24, Z
 3c6:	8f 70       	andi	r24, 0x0F	; 15
 3c8:	80 83       	st	Z, r24
  DDRK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);  // define PORTK como sa�da (linhas)
 3ca:	80 81       	ld	r24, Z
 3cc:	8f 60       	ori	r24, 0x0F	; 15
 3ce:	80 83       	st	Z, r24
  PORTK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
 3d0:	e8 e0       	ldi	r30, 0x08	; 8
 3d2:	f1 e0       	ldi	r31, 0x01	; 1
 3d4:	80 81       	ld	r24, Z
 3d6:	8f 60       	ori	r24, 0x0F	; 15
 3d8:	80 83       	st	Z, r24

  PINK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3); // habilita pull-up nos pinos
 3da:	e6 e0       	ldi	r30, 0x06	; 6
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	80 81       	ld	r24, Z
 3e0:	8f 60       	ori	r24, 0x0F	; 15
 3e2:	80 83       	st	Z, r24
 3e4:	08 95       	ret

000003e6 <le_coluna>:
}

// Fun��o de debounce para leitura do teclado, a fun��o recebe como argumento a
// coluna da matriz de contato
char le_coluna(char pino) {
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
 3f0:	8c 5f       	subi	r24, 0xFC	; 252
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	f9 2e       	mov	r15, r25
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <le_coluna+0x14>
 3f8:	ff 0c       	add	r15, r15
 3fa:	8a 95       	dec	r24
 3fc:	ea f7       	brpl	.-6      	; 0x3f8 <le_coluna+0x12>
}

// Fun��o de debounce para leitura do teclado, a fun��o recebe como argumento a
// coluna da matriz de contato
char le_coluna(char pino) {
  char count = 0, key_last = 0, key_now = 0;
 3fe:	d0 e0       	ldi	r29, 0x00	; 0
 400:	c0 e0       	ldi	r28, 0x00	; 0

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
 402:	06 e0       	ldi	r16, 0x06	; 6
 404:	11 e0       	ldi	r17, 0x01	; 1
// coluna da matriz de contato
char le_coluna(char pino) {
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();
 406:	d1 df       	rcall	.-94     	; 0x3aa <atraso_debounce>

    key_now = PINK & (1 << (pino + 4));
 408:	f8 01       	movw	r30, r16
 40a:	90 81       	ld	r25, Z
 40c:	9f 21       	and	r25, r15

    if (key_now == key_last) {
 40e:	d9 13       	cpse	r29, r25
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
      count = count + 1;
 412:	cf 5f       	subi	r28, 0xFF	; 255
 414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
    } else {
      count = 0;
 416:	c0 e0       	ldi	r28, 0x00	; 0
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
 418:	d9 2f       	mov	r29, r25
      count = count + 1;
    } else {
      count = 0;
    }

    if (count == BOUNCE) {
 41a:	2c 2f       	mov	r18, r28
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <BOUNCE>
 422:	50 91 10 02 	lds	r21, 0x0210	; 0x800210 <BOUNCE+0x1>
 426:	24 17       	cp	r18, r20
 428:	35 07       	cpc	r19, r21
 42a:	69 f7       	brne	.-38     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	91 11       	cpse	r25, r1
 430:	01 c0       	rjmp	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    } else {
      key_last = key_now;
    }
  }
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	08 95       	ret

00000440 <tecla>:

// Retorna tecla pressionada
char tecla() {
 440:	af 92       	push	r10
 442:	bf 92       	push	r11
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	60 97       	sbiw	r28, 0x10	; 16
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};
 464:	80 e1       	ldi	r24, 0x10	; 16
 466:	e1 e1       	ldi	r30, 0x11	; 17
 468:	f2 e0       	ldi	r31, 0x02	; 2
 46a:	de 01       	movw	r26, r28
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	01 90       	ld	r0, Z+
 470:	0d 92       	st	X+, r0
 472:	8a 95       	dec	r24
 474:	e1 f7       	brne	.-8      	; 0x46e <tecla+0x2e>

  for (linha = 0; linha < 4; linha++) {
 476:	e1 2c       	mov	r14, r1
 478:	f1 2c       	mov	r15, r1
    PORTK |= 0x0F;
 47a:	68 94       	set
 47c:	cc 24       	eor	r12, r12
 47e:	c3 f8       	bld	r12, 3
 480:	dd 24       	eor	r13, r13
 482:	d3 94       	inc	r13
    PORTK &= ~(1 << linha); // Itera as colunas do teclado
 484:	aa 24       	eor	r10, r10
 486:	a3 94       	inc	r10
 488:	b1 2c       	mov	r11, r1
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};

  for (linha = 0; linha < 4; linha++) {
    PORTK |= 0x0F;
 48a:	f6 01       	movw	r30, r12
 48c:	80 81       	ld	r24, Z
 48e:	8f 60       	ori	r24, 0x0F	; 15
 490:	80 83       	st	Z, r24
    PORTK &= ~(1 << linha); // Itera as colunas do teclado
 492:	90 81       	ld	r25, Z
 494:	95 01       	movw	r18, r10
 496:	0e 2c       	mov	r0, r14
 498:	02 c0       	rjmp	.+4      	; 0x49e <tecla+0x5e>
 49a:	22 0f       	add	r18, r18
 49c:	33 1f       	adc	r19, r19
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <tecla+0x5a>
 4a2:	82 2f       	mov	r24, r18
 4a4:	80 95       	com	r24
 4a6:	89 23       	and	r24, r25
 4a8:	80 83       	st	Z, r24

    for (coluna = 0; coluna < 3; coluna++) {
 4aa:	00 e0       	ldi	r16, 0x00	; 0
 4ac:	10 e0       	ldi	r17, 0x00	; 0
      if (!le_coluna(coluna)) {
 4ae:	80 2f       	mov	r24, r16
 4b0:	9a df       	rcall	.-204    	; 0x3e6 <le_coluna>
 4b2:	81 11       	cpse	r24, r1
 4b4:	0f c0       	rjmp	.+30     	; 0x4d4 <tecla+0x94>
        // while(!le_coluna(coluna));
        return teclado[linha][coluna];
 4b6:	ee 0c       	add	r14, r14
 4b8:	ff 1c       	adc	r15, r15
 4ba:	ee 0c       	add	r14, r14
 4bc:	ff 1c       	adc	r15, r15
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	8c 0f       	add	r24, r28
 4c4:	9d 1f       	adc	r25, r29
 4c6:	e8 0e       	add	r14, r24
 4c8:	f9 1e       	adc	r15, r25
 4ca:	f7 01       	movw	r30, r14
 4cc:	e0 0f       	add	r30, r16
 4ce:	f1 1f       	adc	r31, r17
 4d0:	80 81       	ld	r24, Z
 4d2:	0d c0       	rjmp	.+26     	; 0x4ee <tecla+0xae>

  for (linha = 0; linha < 4; linha++) {
    PORTK |= 0x0F;
    PORTK &= ~(1 << linha); // Itera as colunas do teclado

    for (coluna = 0; coluna < 3; coluna++) {
 4d4:	0f 5f       	subi	r16, 0xFF	; 255
 4d6:	1f 4f       	sbci	r17, 0xFF	; 255
 4d8:	03 30       	cpi	r16, 0x03	; 3
 4da:	11 05       	cpc	r17, r1
 4dc:	41 f7       	brne	.-48     	; 0x4ae <tecla+0x6e>
char tecla() {
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};

  for (linha = 0; linha < 4; linha++) {
 4de:	9f ef       	ldi	r25, 0xFF	; 255
 4e0:	e9 1a       	sub	r14, r25
 4e2:	f9 0a       	sbc	r15, r25
 4e4:	e4 e0       	ldi	r30, 0x04	; 4
 4e6:	ee 16       	cp	r14, r30
 4e8:	f1 04       	cpc	r15, r1
 4ea:	79 f6       	brne	.-98     	; 0x48a <tecla+0x4a>
        // while(!le_coluna(coluna));
        return teclado[linha][coluna];
      }
    }
  }
  return 'f'; // caso nenhuma tecla seja pressionada
 4ec:	86 e6       	ldi	r24, 0x66	; 102
}
 4ee:	60 96       	adiw	r28, 0x10	; 16
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	f8 94       	cli
 4f4:	de bf       	out	0x3e, r29	; 62
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	cd bf       	out	0x3d, r28	; 61
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	bf 90       	pop	r11
 50c:	af 90       	pop	r10
 50e:	08 95       	ret

00000510 <timer2_init>:
void Timer0_ms(unsigned char tempo_final) {
  config_timer0(4);
  OCR0A = tempo_final * 63;        // Tempo final da contagem   *62.5
  while ((TIFR0 & (1 << 1)) == 0); // Contagens até o flag "zerar"
  TIFR0 = (1 << 1);                // limpa flag
}
 510:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
 51a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 524:	78 94       	sei
 526:	08 95       	ret

00000528 <__vector_15>:
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	0b b6       	in	r0, 0x3b	; 59
 534:	0f 92       	push	r0
 536:	2f 93       	push	r18
 538:	3f 93       	push	r19
 53a:	4f 93       	push	r20
 53c:	5f 93       	push	r21
 53e:	6f 93       	push	r22
 540:	7f 93       	push	r23
 542:	8f 93       	push	r24
 544:	9f 93       	push	r25
 546:	af 93       	push	r26
 548:	bf 93       	push	r27
 54a:	ef 93       	push	r30
 54c:	ff 93       	push	r31
 54e:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <overflow_count>
 552:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <overflow_count+0x1>
 556:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <overflow_count+0x2>
 55a:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <overflow_count+0x3>
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	40 e8       	ldi	r20, 0x80	; 128
 564:	5f e3       	ldi	r21, 0x3F	; 63
 566:	86 d0       	rcall	.+268    	; 0x674 <__addsf3>
 568:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <overflow_count>
 56c:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <overflow_count+0x1>
 570:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <overflow_count+0x2>
 574:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <overflow_count+0x3>
 578:	ff 91       	pop	r31
 57a:	ef 91       	pop	r30
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	7f 91       	pop	r23
 586:	6f 91       	pop	r22
 588:	5f 91       	pop	r21
 58a:	4f 91       	pop	r20
 58c:	3f 91       	pop	r19
 58e:	2f 91       	pop	r18
 590:	0f 90       	pop	r0
 592:	0b be       	out	0x3b, r0	; 59
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <get_elapsed_time_ms>:
 59e:	cf 92       	push	r12
 5a0:	df 92       	push	r13
 5a2:	ef 92       	push	r14
 5a4:	ff 92       	push	r15
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	2f b7       	in	r18, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <overflow_count>
 5b2:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <overflow_count+0x1>
 5b6:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <overflow_count+0x2>
 5ba:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <overflow_count+0x3>
 5be:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 5c2:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 5c6:	2f bf       	out	0x3f, r18	; 63
 5c8:	20 e0       	ldi	r18, 0x00	; 0
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	40 e8       	ldi	r20, 0x80	; 128
 5ce:	57 e4       	ldi	r21, 0x47	; 71
 5d0:	d7 d1       	rcall	.+942    	; 0x980 <__mulsf3>
 5d2:	6b 01       	movw	r12, r22
 5d4:	7c 01       	movw	r14, r24
 5d6:	be 01       	movw	r22, r28
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	1b d1       	rcall	.+566    	; 0x814 <__floatunsisf>
 5de:	9b 01       	movw	r18, r22
 5e0:	ac 01       	movw	r20, r24
 5e2:	c7 01       	movw	r24, r14
 5e4:	b6 01       	movw	r22, r12
 5e6:	46 d0       	rcall	.+140    	; 0x674 <__addsf3>
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	4a e7       	ldi	r20, 0x7A	; 122
 5ee:	54 e4       	ldi	r21, 0x44	; 68
 5f0:	c7 d1       	rcall	.+910    	; 0x980 <__mulsf3>
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	40 e8       	ldi	r20, 0x80	; 128
 5f8:	53 e4       	ldi	r21, 0x43	; 67
 5fa:	c2 d1       	rcall	.+900    	; 0x980 <__mulsf3>
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	34 e2       	ldi	r19, 0x24	; 36
 600:	44 e7       	ldi	r20, 0x74	; 116
 602:	5b e4       	ldi	r21, 0x4B	; 75
 604:	9f d0       	rcall	.+318    	; 0x744 <__divsf3>
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	ff 90       	pop	r15
 60c:	ef 90       	pop	r14
 60e:	df 90       	pop	r13
 610:	cf 90       	pop	r12
 612:	08 95       	ret

00000614 <config_timer1>:

void config_timer1(unsigned char p) {
  TCCR1A = 0;       // Modo com Comparacão
 614:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
  TCCR1B = p;       // préscaler config
 618:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
  TCNT1 = 0;        // Tempo de inicio
 61c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 620:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
  TIFR1 = (1 << 1); // limpa flag
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	86 bb       	out	0x16, r24	; 22
 628:	08 95       	ret

0000062a <Timer1_us>:
}

void Timer1_us(unsigned char tempo_final) {
 62a:	cf 93       	push	r28
 62c:	c8 2f       	mov	r28, r24
  config_timer1(10);
 62e:	8a e0       	ldi	r24, 0x0A	; 10
 630:	f1 df       	rcall	.-30     	; 0x614 <config_timer1>
  OCR1A = tempo_final * 2;         // Tempo final da contagem   *2
 632:	8c 2f       	mov	r24, r28
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 63e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
  while ((TIFR1 & (1 << 1)) == 0); // Contagens até o flag "zerar"
 642:	b1 9b       	sbis	0x16, 1	; 22
 644:	fe cf       	rjmp	.-4      	; 0x642 <Timer1_us+0x18>
  TIFR1 = (1 << 1);                // limpa flag
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	86 bb       	out	0x16, r24	; 22
}
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <Timer1_ms>:

void Timer1_ms(unsigned char tempo_final) {
 64e:	cf 93       	push	r28
 650:	c8 2f       	mov	r28, r24
  config_timer1(12);
 652:	8c e0       	ldi	r24, 0x0C	; 12
 654:	df df       	rcall	.-66     	; 0x614 <config_timer1>
  OCR1A = tempo_final * 63;        // Tempo final da contagem   *62.5
 656:	2f e3       	ldi	r18, 0x3F	; 63
 658:	c2 9f       	mul	r28, r18
 65a:	c0 01       	movw	r24, r0
 65c:	11 24       	eor	r1, r1
 65e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 662:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
  while ((TIFR1 & (1 << 1)) == 0); // Contagens até o flag "zerar"
 666:	b1 9b       	sbis	0x16, 1	; 22
 668:	fe cf       	rjmp	.-4      	; 0x666 <Timer1_ms+0x18>
  TIFR1 = (1 << 1);                // limpa flag
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	86 bb       	out	0x16, r24	; 22
}
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <__subsf3>:
 672:	50 58       	subi	r21, 0x80	; 128

00000674 <__addsf3>:
 674:	bb 27       	eor	r27, r27
 676:	aa 27       	eor	r26, r26
 678:	0e d0       	rcall	.+28     	; 0x696 <__addsf3x>
 67a:	44 c1       	rjmp	.+648    	; 0x904 <__fp_round>
 67c:	35 d1       	rcall	.+618    	; 0x8e8 <__fp_pscA>
 67e:	30 f0       	brcs	.+12     	; 0x68c <__addsf3+0x18>
 680:	3a d1       	rcall	.+628    	; 0x8f6 <__fp_pscB>
 682:	20 f0       	brcs	.+8      	; 0x68c <__addsf3+0x18>
 684:	31 f4       	brne	.+12     	; 0x692 <__addsf3+0x1e>
 686:	9f 3f       	cpi	r25, 0xFF	; 255
 688:	11 f4       	brne	.+4      	; 0x68e <__addsf3+0x1a>
 68a:	1e f4       	brtc	.+6      	; 0x692 <__addsf3+0x1e>
 68c:	2a c1       	rjmp	.+596    	; 0x8e2 <__fp_nan>
 68e:	0e f4       	brtc	.+2      	; 0x692 <__addsf3+0x1e>
 690:	e0 95       	com	r30
 692:	e7 fb       	bst	r30, 7
 694:	20 c1       	rjmp	.+576    	; 0x8d6 <__fp_inf>

00000696 <__addsf3x>:
 696:	e9 2f       	mov	r30, r25
 698:	46 d1       	rcall	.+652    	; 0x926 <__fp_split3>
 69a:	80 f3       	brcs	.-32     	; 0x67c <__addsf3+0x8>
 69c:	ba 17       	cp	r27, r26
 69e:	62 07       	cpc	r22, r18
 6a0:	73 07       	cpc	r23, r19
 6a2:	84 07       	cpc	r24, r20
 6a4:	95 07       	cpc	r25, r21
 6a6:	18 f0       	brcs	.+6      	; 0x6ae <__addsf3x+0x18>
 6a8:	71 f4       	brne	.+28     	; 0x6c6 <__addsf3x+0x30>
 6aa:	9e f5       	brtc	.+102    	; 0x712 <__addsf3x+0x7c>
 6ac:	5e c1       	rjmp	.+700    	; 0x96a <__fp_zero>
 6ae:	0e f4       	brtc	.+2      	; 0x6b2 <__addsf3x+0x1c>
 6b0:	e0 95       	com	r30
 6b2:	0b 2e       	mov	r0, r27
 6b4:	ba 2f       	mov	r27, r26
 6b6:	a0 2d       	mov	r26, r0
 6b8:	0b 01       	movw	r0, r22
 6ba:	b9 01       	movw	r22, r18
 6bc:	90 01       	movw	r18, r0
 6be:	0c 01       	movw	r0, r24
 6c0:	ca 01       	movw	r24, r20
 6c2:	a0 01       	movw	r20, r0
 6c4:	11 24       	eor	r1, r1
 6c6:	ff 27       	eor	r31, r31
 6c8:	59 1b       	sub	r21, r25
 6ca:	99 f0       	breq	.+38     	; 0x6f2 <__addsf3x+0x5c>
 6cc:	59 3f       	cpi	r21, 0xF9	; 249
 6ce:	50 f4       	brcc	.+20     	; 0x6e4 <__addsf3x+0x4e>
 6d0:	50 3e       	cpi	r21, 0xE0	; 224
 6d2:	68 f1       	brcs	.+90     	; 0x72e <__addsf3x+0x98>
 6d4:	1a 16       	cp	r1, r26
 6d6:	f0 40       	sbci	r31, 0x00	; 0
 6d8:	a2 2f       	mov	r26, r18
 6da:	23 2f       	mov	r18, r19
 6dc:	34 2f       	mov	r19, r20
 6de:	44 27       	eor	r20, r20
 6e0:	58 5f       	subi	r21, 0xF8	; 248
 6e2:	f3 cf       	rjmp	.-26     	; 0x6ca <__addsf3x+0x34>
 6e4:	46 95       	lsr	r20
 6e6:	37 95       	ror	r19
 6e8:	27 95       	ror	r18
 6ea:	a7 95       	ror	r26
 6ec:	f0 40       	sbci	r31, 0x00	; 0
 6ee:	53 95       	inc	r21
 6f0:	c9 f7       	brne	.-14     	; 0x6e4 <__addsf3x+0x4e>
 6f2:	7e f4       	brtc	.+30     	; 0x712 <__addsf3x+0x7c>
 6f4:	1f 16       	cp	r1, r31
 6f6:	ba 0b       	sbc	r27, r26
 6f8:	62 0b       	sbc	r22, r18
 6fa:	73 0b       	sbc	r23, r19
 6fc:	84 0b       	sbc	r24, r20
 6fe:	ba f0       	brmi	.+46     	; 0x72e <__addsf3x+0x98>
 700:	91 50       	subi	r25, 0x01	; 1
 702:	a1 f0       	breq	.+40     	; 0x72c <__addsf3x+0x96>
 704:	ff 0f       	add	r31, r31
 706:	bb 1f       	adc	r27, r27
 708:	66 1f       	adc	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	c2 f7       	brpl	.-16     	; 0x700 <__addsf3x+0x6a>
 710:	0e c0       	rjmp	.+28     	; 0x72e <__addsf3x+0x98>
 712:	ba 0f       	add	r27, r26
 714:	62 1f       	adc	r22, r18
 716:	73 1f       	adc	r23, r19
 718:	84 1f       	adc	r24, r20
 71a:	48 f4       	brcc	.+18     	; 0x72e <__addsf3x+0x98>
 71c:	87 95       	ror	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f7 95       	ror	r31
 726:	9e 3f       	cpi	r25, 0xFE	; 254
 728:	08 f0       	brcs	.+2      	; 0x72c <__addsf3x+0x96>
 72a:	b3 cf       	rjmp	.-154    	; 0x692 <__addsf3+0x1e>
 72c:	93 95       	inc	r25
 72e:	88 0f       	add	r24, r24
 730:	08 f0       	brcs	.+2      	; 0x734 <__addsf3x+0x9e>
 732:	99 27       	eor	r25, r25
 734:	ee 0f       	add	r30, r30
 736:	97 95       	ror	r25
 738:	87 95       	ror	r24
 73a:	08 95       	ret

0000073c <__cmpsf2>:
 73c:	a8 d0       	rcall	.+336    	; 0x88e <__fp_cmp>
 73e:	08 f4       	brcc	.+2      	; 0x742 <__cmpsf2+0x6>
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	08 95       	ret

00000744 <__divsf3>:
 744:	0c d0       	rcall	.+24     	; 0x75e <__divsf3x>
 746:	de c0       	rjmp	.+444    	; 0x904 <__fp_round>
 748:	d6 d0       	rcall	.+428    	; 0x8f6 <__fp_pscB>
 74a:	40 f0       	brcs	.+16     	; 0x75c <__divsf3+0x18>
 74c:	cd d0       	rcall	.+410    	; 0x8e8 <__fp_pscA>
 74e:	30 f0       	brcs	.+12     	; 0x75c <__divsf3+0x18>
 750:	21 f4       	brne	.+8      	; 0x75a <__divsf3+0x16>
 752:	5f 3f       	cpi	r21, 0xFF	; 255
 754:	19 f0       	breq	.+6      	; 0x75c <__divsf3+0x18>
 756:	bf c0       	rjmp	.+382    	; 0x8d6 <__fp_inf>
 758:	51 11       	cpse	r21, r1
 75a:	08 c1       	rjmp	.+528    	; 0x96c <__fp_szero>
 75c:	c2 c0       	rjmp	.+388    	; 0x8e2 <__fp_nan>

0000075e <__divsf3x>:
 75e:	e3 d0       	rcall	.+454    	; 0x926 <__fp_split3>
 760:	98 f3       	brcs	.-26     	; 0x748 <__divsf3+0x4>

00000762 <__divsf3_pse>:
 762:	99 23       	and	r25, r25
 764:	c9 f3       	breq	.-14     	; 0x758 <__divsf3+0x14>
 766:	55 23       	and	r21, r21
 768:	b1 f3       	breq	.-20     	; 0x756 <__divsf3+0x12>
 76a:	95 1b       	sub	r25, r21
 76c:	55 0b       	sbc	r21, r21
 76e:	bb 27       	eor	r27, r27
 770:	aa 27       	eor	r26, r26
 772:	62 17       	cp	r22, r18
 774:	73 07       	cpc	r23, r19
 776:	84 07       	cpc	r24, r20
 778:	38 f0       	brcs	.+14     	; 0x788 <__divsf3_pse+0x26>
 77a:	9f 5f       	subi	r25, 0xFF	; 255
 77c:	5f 4f       	sbci	r21, 0xFF	; 255
 77e:	22 0f       	add	r18, r18
 780:	33 1f       	adc	r19, r19
 782:	44 1f       	adc	r20, r20
 784:	aa 1f       	adc	r26, r26
 786:	a9 f3       	breq	.-22     	; 0x772 <__divsf3_pse+0x10>
 788:	33 d0       	rcall	.+102    	; 0x7f0 <__divsf3_pse+0x8e>
 78a:	0e 2e       	mov	r0, r30
 78c:	3a f0       	brmi	.+14     	; 0x79c <__divsf3_pse+0x3a>
 78e:	e0 e8       	ldi	r30, 0x80	; 128
 790:	30 d0       	rcall	.+96     	; 0x7f2 <__divsf3_pse+0x90>
 792:	91 50       	subi	r25, 0x01	; 1
 794:	50 40       	sbci	r21, 0x00	; 0
 796:	e6 95       	lsr	r30
 798:	00 1c       	adc	r0, r0
 79a:	ca f7       	brpl	.-14     	; 0x78e <__divsf3_pse+0x2c>
 79c:	29 d0       	rcall	.+82     	; 0x7f0 <__divsf3_pse+0x8e>
 79e:	fe 2f       	mov	r31, r30
 7a0:	27 d0       	rcall	.+78     	; 0x7f0 <__divsf3_pse+0x8e>
 7a2:	66 0f       	add	r22, r22
 7a4:	77 1f       	adc	r23, r23
 7a6:	88 1f       	adc	r24, r24
 7a8:	bb 1f       	adc	r27, r27
 7aa:	26 17       	cp	r18, r22
 7ac:	37 07       	cpc	r19, r23
 7ae:	48 07       	cpc	r20, r24
 7b0:	ab 07       	cpc	r26, r27
 7b2:	b0 e8       	ldi	r27, 0x80	; 128
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <__divsf3_pse+0x56>
 7b6:	bb 0b       	sbc	r27, r27
 7b8:	80 2d       	mov	r24, r0
 7ba:	bf 01       	movw	r22, r30
 7bc:	ff 27       	eor	r31, r31
 7be:	93 58       	subi	r25, 0x83	; 131
 7c0:	5f 4f       	sbci	r21, 0xFF	; 255
 7c2:	2a f0       	brmi	.+10     	; 0x7ce <__divsf3_pse+0x6c>
 7c4:	9e 3f       	cpi	r25, 0xFE	; 254
 7c6:	51 05       	cpc	r21, r1
 7c8:	68 f0       	brcs	.+26     	; 0x7e4 <__divsf3_pse+0x82>
 7ca:	85 c0       	rjmp	.+266    	; 0x8d6 <__fp_inf>
 7cc:	cf c0       	rjmp	.+414    	; 0x96c <__fp_szero>
 7ce:	5f 3f       	cpi	r21, 0xFF	; 255
 7d0:	ec f3       	brlt	.-6      	; 0x7cc <__divsf3_pse+0x6a>
 7d2:	98 3e       	cpi	r25, 0xE8	; 232
 7d4:	dc f3       	brlt	.-10     	; 0x7cc <__divsf3_pse+0x6a>
 7d6:	86 95       	lsr	r24
 7d8:	77 95       	ror	r23
 7da:	67 95       	ror	r22
 7dc:	b7 95       	ror	r27
 7de:	f7 95       	ror	r31
 7e0:	9f 5f       	subi	r25, 0xFF	; 255
 7e2:	c9 f7       	brne	.-14     	; 0x7d6 <__divsf3_pse+0x74>
 7e4:	88 0f       	add	r24, r24
 7e6:	91 1d       	adc	r25, r1
 7e8:	96 95       	lsr	r25
 7ea:	87 95       	ror	r24
 7ec:	97 f9       	bld	r25, 7
 7ee:	08 95       	ret
 7f0:	e1 e0       	ldi	r30, 0x01	; 1
 7f2:	66 0f       	add	r22, r22
 7f4:	77 1f       	adc	r23, r23
 7f6:	88 1f       	adc	r24, r24
 7f8:	bb 1f       	adc	r27, r27
 7fa:	62 17       	cp	r22, r18
 7fc:	73 07       	cpc	r23, r19
 7fe:	84 07       	cpc	r24, r20
 800:	ba 07       	cpc	r27, r26
 802:	20 f0       	brcs	.+8      	; 0x80c <__divsf3_pse+0xaa>
 804:	62 1b       	sub	r22, r18
 806:	73 0b       	sbc	r23, r19
 808:	84 0b       	sbc	r24, r20
 80a:	ba 0b       	sbc	r27, r26
 80c:	ee 1f       	adc	r30, r30
 80e:	88 f7       	brcc	.-30     	; 0x7f2 <__divsf3_pse+0x90>
 810:	e0 95       	com	r30
 812:	08 95       	ret

00000814 <__floatunsisf>:
 814:	e8 94       	clt
 816:	09 c0       	rjmp	.+18     	; 0x82a <__floatsisf+0x12>

00000818 <__floatsisf>:
 818:	97 fb       	bst	r25, 7
 81a:	3e f4       	brtc	.+14     	; 0x82a <__floatsisf+0x12>
 81c:	90 95       	com	r25
 81e:	80 95       	com	r24
 820:	70 95       	com	r23
 822:	61 95       	neg	r22
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	99 23       	and	r25, r25
 82c:	a9 f0       	breq	.+42     	; 0x858 <__floatsisf+0x40>
 82e:	f9 2f       	mov	r31, r25
 830:	96 e9       	ldi	r25, 0x96	; 150
 832:	bb 27       	eor	r27, r27
 834:	93 95       	inc	r25
 836:	f6 95       	lsr	r31
 838:	87 95       	ror	r24
 83a:	77 95       	ror	r23
 83c:	67 95       	ror	r22
 83e:	b7 95       	ror	r27
 840:	f1 11       	cpse	r31, r1
 842:	f8 cf       	rjmp	.-16     	; 0x834 <__floatsisf+0x1c>
 844:	fa f4       	brpl	.+62     	; 0x884 <__floatsisf+0x6c>
 846:	bb 0f       	add	r27, r27
 848:	11 f4       	brne	.+4      	; 0x84e <__floatsisf+0x36>
 84a:	60 ff       	sbrs	r22, 0
 84c:	1b c0       	rjmp	.+54     	; 0x884 <__floatsisf+0x6c>
 84e:	6f 5f       	subi	r22, 0xFF	; 255
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	16 c0       	rjmp	.+44     	; 0x884 <__floatsisf+0x6c>
 858:	88 23       	and	r24, r24
 85a:	11 f0       	breq	.+4      	; 0x860 <__floatsisf+0x48>
 85c:	96 e9       	ldi	r25, 0x96	; 150
 85e:	11 c0       	rjmp	.+34     	; 0x882 <__floatsisf+0x6a>
 860:	77 23       	and	r23, r23
 862:	21 f0       	breq	.+8      	; 0x86c <__floatsisf+0x54>
 864:	9e e8       	ldi	r25, 0x8E	; 142
 866:	87 2f       	mov	r24, r23
 868:	76 2f       	mov	r23, r22
 86a:	05 c0       	rjmp	.+10     	; 0x876 <__floatsisf+0x5e>
 86c:	66 23       	and	r22, r22
 86e:	71 f0       	breq	.+28     	; 0x88c <__floatsisf+0x74>
 870:	96 e8       	ldi	r25, 0x86	; 134
 872:	86 2f       	mov	r24, r22
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	2a f0       	brmi	.+10     	; 0x884 <__floatsisf+0x6c>
 87a:	9a 95       	dec	r25
 87c:	66 0f       	add	r22, r22
 87e:	77 1f       	adc	r23, r23
 880:	88 1f       	adc	r24, r24
 882:	da f7       	brpl	.-10     	; 0x87a <__floatsisf+0x62>
 884:	88 0f       	add	r24, r24
 886:	96 95       	lsr	r25
 888:	87 95       	ror	r24
 88a:	97 f9       	bld	r25, 7
 88c:	08 95       	ret

0000088e <__fp_cmp>:
 88e:	99 0f       	add	r25, r25
 890:	00 08       	sbc	r0, r0
 892:	55 0f       	add	r21, r21
 894:	aa 0b       	sbc	r26, r26
 896:	e0 e8       	ldi	r30, 0x80	; 128
 898:	fe ef       	ldi	r31, 0xFE	; 254
 89a:	16 16       	cp	r1, r22
 89c:	17 06       	cpc	r1, r23
 89e:	e8 07       	cpc	r30, r24
 8a0:	f9 07       	cpc	r31, r25
 8a2:	c0 f0       	brcs	.+48     	; 0x8d4 <__fp_cmp+0x46>
 8a4:	12 16       	cp	r1, r18
 8a6:	13 06       	cpc	r1, r19
 8a8:	e4 07       	cpc	r30, r20
 8aa:	f5 07       	cpc	r31, r21
 8ac:	98 f0       	brcs	.+38     	; 0x8d4 <__fp_cmp+0x46>
 8ae:	62 1b       	sub	r22, r18
 8b0:	73 0b       	sbc	r23, r19
 8b2:	84 0b       	sbc	r24, r20
 8b4:	95 0b       	sbc	r25, r21
 8b6:	39 f4       	brne	.+14     	; 0x8c6 <__fp_cmp+0x38>
 8b8:	0a 26       	eor	r0, r26
 8ba:	61 f0       	breq	.+24     	; 0x8d4 <__fp_cmp+0x46>
 8bc:	23 2b       	or	r18, r19
 8be:	24 2b       	or	r18, r20
 8c0:	25 2b       	or	r18, r21
 8c2:	21 f4       	brne	.+8      	; 0x8cc <__fp_cmp+0x3e>
 8c4:	08 95       	ret
 8c6:	0a 26       	eor	r0, r26
 8c8:	09 f4       	brne	.+2      	; 0x8cc <__fp_cmp+0x3e>
 8ca:	a1 40       	sbci	r26, 0x01	; 1
 8cc:	a6 95       	lsr	r26
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	81 1d       	adc	r24, r1
 8d2:	81 1d       	adc	r24, r1
 8d4:	08 95       	ret

000008d6 <__fp_inf>:
 8d6:	97 f9       	bld	r25, 7
 8d8:	9f 67       	ori	r25, 0x7F	; 127
 8da:	80 e8       	ldi	r24, 0x80	; 128
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	60 e0       	ldi	r22, 0x00	; 0
 8e0:	08 95       	ret

000008e2 <__fp_nan>:
 8e2:	9f ef       	ldi	r25, 0xFF	; 255
 8e4:	80 ec       	ldi	r24, 0xC0	; 192
 8e6:	08 95       	ret

000008e8 <__fp_pscA>:
 8e8:	00 24       	eor	r0, r0
 8ea:	0a 94       	dec	r0
 8ec:	16 16       	cp	r1, r22
 8ee:	17 06       	cpc	r1, r23
 8f0:	18 06       	cpc	r1, r24
 8f2:	09 06       	cpc	r0, r25
 8f4:	08 95       	ret

000008f6 <__fp_pscB>:
 8f6:	00 24       	eor	r0, r0
 8f8:	0a 94       	dec	r0
 8fa:	12 16       	cp	r1, r18
 8fc:	13 06       	cpc	r1, r19
 8fe:	14 06       	cpc	r1, r20
 900:	05 06       	cpc	r0, r21
 902:	08 95       	ret

00000904 <__fp_round>:
 904:	09 2e       	mov	r0, r25
 906:	03 94       	inc	r0
 908:	00 0c       	add	r0, r0
 90a:	11 f4       	brne	.+4      	; 0x910 <__fp_round+0xc>
 90c:	88 23       	and	r24, r24
 90e:	52 f0       	brmi	.+20     	; 0x924 <__fp_round+0x20>
 910:	bb 0f       	add	r27, r27
 912:	40 f4       	brcc	.+16     	; 0x924 <__fp_round+0x20>
 914:	bf 2b       	or	r27, r31
 916:	11 f4       	brne	.+4      	; 0x91c <__fp_round+0x18>
 918:	60 ff       	sbrs	r22, 0
 91a:	04 c0       	rjmp	.+8      	; 0x924 <__fp_round+0x20>
 91c:	6f 5f       	subi	r22, 0xFF	; 255
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	08 95       	ret

00000926 <__fp_split3>:
 926:	57 fd       	sbrc	r21, 7
 928:	90 58       	subi	r25, 0x80	; 128
 92a:	44 0f       	add	r20, r20
 92c:	55 1f       	adc	r21, r21
 92e:	59 f0       	breq	.+22     	; 0x946 <__fp_splitA+0x10>
 930:	5f 3f       	cpi	r21, 0xFF	; 255
 932:	71 f0       	breq	.+28     	; 0x950 <__fp_splitA+0x1a>
 934:	47 95       	ror	r20

00000936 <__fp_splitA>:
 936:	88 0f       	add	r24, r24
 938:	97 fb       	bst	r25, 7
 93a:	99 1f       	adc	r25, r25
 93c:	61 f0       	breq	.+24     	; 0x956 <__fp_splitA+0x20>
 93e:	9f 3f       	cpi	r25, 0xFF	; 255
 940:	79 f0       	breq	.+30     	; 0x960 <__fp_splitA+0x2a>
 942:	87 95       	ror	r24
 944:	08 95       	ret
 946:	12 16       	cp	r1, r18
 948:	13 06       	cpc	r1, r19
 94a:	14 06       	cpc	r1, r20
 94c:	55 1f       	adc	r21, r21
 94e:	f2 cf       	rjmp	.-28     	; 0x934 <__fp_split3+0xe>
 950:	46 95       	lsr	r20
 952:	f1 df       	rcall	.-30     	; 0x936 <__fp_splitA>
 954:	08 c0       	rjmp	.+16     	; 0x966 <__fp_splitA+0x30>
 956:	16 16       	cp	r1, r22
 958:	17 06       	cpc	r1, r23
 95a:	18 06       	cpc	r1, r24
 95c:	99 1f       	adc	r25, r25
 95e:	f1 cf       	rjmp	.-30     	; 0x942 <__fp_splitA+0xc>
 960:	86 95       	lsr	r24
 962:	71 05       	cpc	r23, r1
 964:	61 05       	cpc	r22, r1
 966:	08 94       	sec
 968:	08 95       	ret

0000096a <__fp_zero>:
 96a:	e8 94       	clt

0000096c <__fp_szero>:
 96c:	bb 27       	eor	r27, r27
 96e:	66 27       	eor	r22, r22
 970:	77 27       	eor	r23, r23
 972:	cb 01       	movw	r24, r22
 974:	97 f9       	bld	r25, 7
 976:	08 95       	ret

00000978 <__gesf2>:
 978:	8a df       	rcall	.-236    	; 0x88e <__fp_cmp>
 97a:	08 f4       	brcc	.+2      	; 0x97e <__gesf2+0x6>
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	08 95       	ret

00000980 <__mulsf3>:
 980:	0b d0       	rcall	.+22     	; 0x998 <__mulsf3x>
 982:	c0 cf       	rjmp	.-128    	; 0x904 <__fp_round>
 984:	b1 df       	rcall	.-158    	; 0x8e8 <__fp_pscA>
 986:	28 f0       	brcs	.+10     	; 0x992 <__mulsf3+0x12>
 988:	b6 df       	rcall	.-148    	; 0x8f6 <__fp_pscB>
 98a:	18 f0       	brcs	.+6      	; 0x992 <__mulsf3+0x12>
 98c:	95 23       	and	r25, r21
 98e:	09 f0       	breq	.+2      	; 0x992 <__mulsf3+0x12>
 990:	a2 cf       	rjmp	.-188    	; 0x8d6 <__fp_inf>
 992:	a7 cf       	rjmp	.-178    	; 0x8e2 <__fp_nan>
 994:	11 24       	eor	r1, r1
 996:	ea cf       	rjmp	.-44     	; 0x96c <__fp_szero>

00000998 <__mulsf3x>:
 998:	c6 df       	rcall	.-116    	; 0x926 <__fp_split3>
 99a:	a0 f3       	brcs	.-24     	; 0x984 <__mulsf3+0x4>

0000099c <__mulsf3_pse>:
 99c:	95 9f       	mul	r25, r21
 99e:	d1 f3       	breq	.-12     	; 0x994 <__mulsf3+0x14>
 9a0:	95 0f       	add	r25, r21
 9a2:	50 e0       	ldi	r21, 0x00	; 0
 9a4:	55 1f       	adc	r21, r21
 9a6:	62 9f       	mul	r22, r18
 9a8:	f0 01       	movw	r30, r0
 9aa:	72 9f       	mul	r23, r18
 9ac:	bb 27       	eor	r27, r27
 9ae:	f0 0d       	add	r31, r0
 9b0:	b1 1d       	adc	r27, r1
 9b2:	63 9f       	mul	r22, r19
 9b4:	aa 27       	eor	r26, r26
 9b6:	f0 0d       	add	r31, r0
 9b8:	b1 1d       	adc	r27, r1
 9ba:	aa 1f       	adc	r26, r26
 9bc:	64 9f       	mul	r22, r20
 9be:	66 27       	eor	r22, r22
 9c0:	b0 0d       	add	r27, r0
 9c2:	a1 1d       	adc	r26, r1
 9c4:	66 1f       	adc	r22, r22
 9c6:	82 9f       	mul	r24, r18
 9c8:	22 27       	eor	r18, r18
 9ca:	b0 0d       	add	r27, r0
 9cc:	a1 1d       	adc	r26, r1
 9ce:	62 1f       	adc	r22, r18
 9d0:	73 9f       	mul	r23, r19
 9d2:	b0 0d       	add	r27, r0
 9d4:	a1 1d       	adc	r26, r1
 9d6:	62 1f       	adc	r22, r18
 9d8:	83 9f       	mul	r24, r19
 9da:	a0 0d       	add	r26, r0
 9dc:	61 1d       	adc	r22, r1
 9de:	22 1f       	adc	r18, r18
 9e0:	74 9f       	mul	r23, r20
 9e2:	33 27       	eor	r19, r19
 9e4:	a0 0d       	add	r26, r0
 9e6:	61 1d       	adc	r22, r1
 9e8:	23 1f       	adc	r18, r19
 9ea:	84 9f       	mul	r24, r20
 9ec:	60 0d       	add	r22, r0
 9ee:	21 1d       	adc	r18, r1
 9f0:	82 2f       	mov	r24, r18
 9f2:	76 2f       	mov	r23, r22
 9f4:	6a 2f       	mov	r22, r26
 9f6:	11 24       	eor	r1, r1
 9f8:	9f 57       	subi	r25, 0x7F	; 127
 9fa:	50 40       	sbci	r21, 0x00	; 0
 9fc:	8a f0       	brmi	.+34     	; 0xa20 <__mulsf3_pse+0x84>
 9fe:	e1 f0       	breq	.+56     	; 0xa38 <__mulsf3_pse+0x9c>
 a00:	88 23       	and	r24, r24
 a02:	4a f0       	brmi	.+18     	; 0xa16 <__mulsf3_pse+0x7a>
 a04:	ee 0f       	add	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	bb 1f       	adc	r27, r27
 a0a:	66 1f       	adc	r22, r22
 a0c:	77 1f       	adc	r23, r23
 a0e:	88 1f       	adc	r24, r24
 a10:	91 50       	subi	r25, 0x01	; 1
 a12:	50 40       	sbci	r21, 0x00	; 0
 a14:	a9 f7       	brne	.-22     	; 0xa00 <__mulsf3_pse+0x64>
 a16:	9e 3f       	cpi	r25, 0xFE	; 254
 a18:	51 05       	cpc	r21, r1
 a1a:	70 f0       	brcs	.+28     	; 0xa38 <__mulsf3_pse+0x9c>
 a1c:	5c cf       	rjmp	.-328    	; 0x8d6 <__fp_inf>
 a1e:	a6 cf       	rjmp	.-180    	; 0x96c <__fp_szero>
 a20:	5f 3f       	cpi	r21, 0xFF	; 255
 a22:	ec f3       	brlt	.-6      	; 0xa1e <__mulsf3_pse+0x82>
 a24:	98 3e       	cpi	r25, 0xE8	; 232
 a26:	dc f3       	brlt	.-10     	; 0xa1e <__mulsf3_pse+0x82>
 a28:	86 95       	lsr	r24
 a2a:	77 95       	ror	r23
 a2c:	67 95       	ror	r22
 a2e:	b7 95       	ror	r27
 a30:	f7 95       	ror	r31
 a32:	e7 95       	ror	r30
 a34:	9f 5f       	subi	r25, 0xFF	; 255
 a36:	c1 f7       	brne	.-16     	; 0xa28 <__mulsf3_pse+0x8c>
 a38:	fe 2b       	or	r31, r30
 a3a:	88 0f       	add	r24, r24
 a3c:	91 1d       	adc	r25, r1
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	97 f9       	bld	r25, 7
 a44:	08 95       	ret

00000a46 <strcmp>:
 a46:	fb 01       	movw	r30, r22
 a48:	dc 01       	movw	r26, r24
 a4a:	8d 91       	ld	r24, X+
 a4c:	01 90       	ld	r0, Z+
 a4e:	80 19       	sub	r24, r0
 a50:	01 10       	cpse	r0, r1
 a52:	d9 f3       	breq	.-10     	; 0xa4a <strcmp+0x4>
 a54:	99 0b       	sbc	r25, r25
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
