
micro_uber.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800200  00002920  000029b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002920  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  00800380  00800380  00002b34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d78  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c2  00000000  00000000  00005b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ea  00000000  00000000  00006ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000051c  00000000  00000000  000085dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bc5  00000000  00000000  00008af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001149  00000000  00000000  000096bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000a806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	02 c1       	rjmp	.+516    	; 0x23e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__vector_15>
      40:	fe c0       	rjmp	.+508    	; 0x23e <__bad_interrupt>
      42:	00 00       	nop
      44:	fc c0       	rjmp	.+504    	; 0x23e <__bad_interrupt>
      46:	00 00       	nop
      48:	fa c0       	rjmp	.+500    	; 0x23e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f8 c0       	rjmp	.+496    	; 0x23e <__bad_interrupt>
      4e:	00 00       	nop
      50:	f6 c0       	rjmp	.+492    	; 0x23e <__bad_interrupt>
      52:	00 00       	nop
      54:	f4 c0       	rjmp	.+488    	; 0x23e <__bad_interrupt>
      56:	00 00       	nop
      58:	f2 c0       	rjmp	.+484    	; 0x23e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f0 c0       	rjmp	.+480    	; 0x23e <__bad_interrupt>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c7       	rjmp	.+3682   	; 0xec8 <__vector_25>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d0 c0       	rjmp	.+416    	; 0x23e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ce c0       	rjmp	.+412    	; 0x23e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cc c0       	rjmp	.+408    	; 0x23e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ca c0       	rjmp	.+404    	; 0x23e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c0 c0       	rjmp	.+384    	; 0x23e <__bad_interrupt>
      be:	00 00       	nop
      c0:	be c0       	rjmp	.+380    	; 0x23e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bc c0       	rjmp	.+376    	; 0x23e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ba c0       	rjmp	.+372    	; 0x23e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b8 c0       	rjmp	.+368    	; 0x23e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b6 c0       	rjmp	.+364    	; 0x23e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b4 c0       	rjmp	.+360    	; 0x23e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b2 c0       	rjmp	.+356    	; 0x23e <__bad_interrupt>
      da:	00 00       	nop
      dc:	b0 c0       	rjmp	.+352    	; 0x23e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ae c0       	rjmp	.+348    	; 0x23e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cb 03       	fmulsu	r20, r19
      e6:	fb 03       	fmulsu	r23, r19
      e8:	2b 04       	cpc	r2, r11
      ea:	5b 04       	cpc	r5, r11
      ec:	8b 04       	cpc	r8, r11
      ee:	bb 04       	cpc	r11, r11
      f0:	eb 04       	cpc	r14, r11
      f2:	1b 05       	cpc	r17, r11
      f4:	86 07       	cpc	r24, r22
      f6:	8d 07       	cpc	r24, r29
      f8:	e7 07       	cpc	r30, r23
      fa:	05 08       	sbc	r0, r5
      fc:	23 08       	sbc	r2, r3
      fe:	2c 08       	sbc	r2, r12
     100:	44 08       	sbc	r4, r4

00000102 <__trampolines_end>:
     102:	00 40       	sbci	r16, 0x00	; 0
     104:	7a 10       	cpse	r7, r10
     106:	f3 5a       	subi	r31, 0xA3	; 163
     108:	00 a0       	ldd	r0, Z+32	; 0x20
     10a:	72 4e       	sbci	r23, 0xE2	; 226
     10c:	18 09       	sbc	r17, r8
     10e:	00 10       	cpse	r0, r0
     110:	a5 d4       	rcall	.+2378   	; 0xa5c <direcoes+0x31e>
     112:	e8 00       	.word	0x00e8	; ????
     114:	00 e8       	ldi	r16, 0x80	; 128
     116:	76 48       	sbci	r23, 0x86	; 134
     118:	17 00       	.word	0x0017	; ????
     11a:	00 e4       	ldi	r16, 0x40	; 64
     11c:	0b 54       	subi	r16, 0x4B	; 75
     11e:	02 00       	.word	0x0002	; ????
     120:	00 ca       	rjmp	.-3072   	; 0xfffff522 <__eeprom_end+0xff7ef522>
     122:	9a 3b       	cpi	r25, 0xBA	; 186
     124:	00 00       	nop
     126:	00 e1       	ldi	r16, 0x10	; 16
     128:	f5 05       	cpc	r31, r5
     12a:	00 00       	nop
     12c:	80 96       	adiw	r24, 0x20	; 32
     12e:	98 00       	.word	0x0098	; ????
     130:	00 00       	nop
     132:	40 42       	sbci	r20, 0x20	; 32
     134:	0f 00       	.word	0x000f	; ????
     136:	00 00       	nop
     138:	a0 86       	std	Z+8, r10	; 0x08
     13a:	01 00       	.word	0x0001	; ????
     13c:	00 00       	nop
     13e:	10 27       	eor	r17, r16
     140:	00 00       	nop
     142:	00 00       	nop
     144:	e8 03       	fmulsu	r22, r16
     146:	00 00       	nop
     148:	00 00       	nop
     14a:	64 00       	.word	0x0064	; ????
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	0a 00       	.word	0x000a	; ????
     152:	00 00       	nop
     154:	00 00       	nop
     156:	01 00       	.word	0x0001	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	2c 76       	andi	r18, 0x6C	; 108
     15e:	d8 88       	ldd	r13, Y+16	; 0x10
     160:	dc 67       	ori	r29, 0x7C	; 124
     162:	4f 08       	sbc	r4, r15
     164:	23 df       	rcall	.-442    	; 0xffffffac <__eeprom_end+0xff7effac>
     166:	c1 df       	rcall	.-126    	; 0xea <__SREG__+0xab>
     168:	ae 59       	subi	r26, 0x9E	; 158
     16a:	e1 b1       	in	r30, 0x01	; 1
     16c:	b7 96       	adiw	r30, 0x27	; 39
     16e:	e5 e3       	ldi	r30, 0x35	; 53
     170:	e4 53       	subi	r30, 0x34	; 52
     172:	c6 3a       	cpi	r28, 0xA6	; 166
     174:	e6 51       	subi	r30, 0x16	; 22
     176:	99 76       	andi	r25, 0x69	; 105
     178:	96 e8       	ldi	r25, 0x86	; 134
     17a:	e6 c2       	rjmp	.+1484   	; 0x748 <direcoes+0xa>
     17c:	84 26       	eor	r8, r20
     17e:	eb 89       	ldd	r30, Y+19	; 0x13
     180:	8c 9b       	sbis	0x11, 4	; 17
     182:	62 ed       	ldi	r22, 0xD2	; 210
     184:	40 7c       	andi	r20, 0xC0	; 192
     186:	6f fc       	.word	0xfc6f	; ????
     188:	ef bc       	out	0x2f, r14	; 47
     18a:	9c 9f       	mul	r25, r28
     18c:	40 f2       	brcs	.-112    	; 0x11e <__trampolines_end+0x1c>
     18e:	ba a5       	ldd	r27, Y+42	; 0x2a
     190:	6f a5       	ldd	r22, Y+47	; 0x2f
     192:	f4 90       	lpm	r15, Z
     194:	05 5a       	subi	r16, 0xA5	; 165
     196:	2a f7       	brpl	.-54     	; 0x162 <__trampolines_end+0x60>
     198:	5c 93       	st	X, r21
     19a:	6b 6c       	ori	r22, 0xCB	; 203
     19c:	f9 67       	ori	r31, 0x79	; 121
     19e:	6d c1       	rjmp	.+730    	; 0x47a <enviamov+0x1a>
     1a0:	1b fc       	.word	0xfc1b	; ????
     1a2:	e0 e4       	ldi	r30, 0x40	; 64
     1a4:	0d 47       	sbci	r16, 0x7D	; 125
     1a6:	fe f5       	brtc	.+126    	; 0x226 <__do_clear_bss>
     1a8:	20 e6       	ldi	r18, 0x60	; 96
     1aa:	b5 00       	.word	0x00b5	; ????
     1ac:	d0 ed       	ldi	r29, 0xD0	; 208
     1ae:	90 2e       	mov	r9, r16
     1b0:	03 00       	.word	0x0003	; ????
     1b2:	94 35       	cpi	r25, 0x54	; 84
     1b4:	77 05       	cpc	r23, r7
     1b6:	00 80       	ld	r0, Z
     1b8:	84 1e       	adc	r8, r20
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	00 20       	and	r0, r0
     1be:	4e 0a       	sbc	r4, r30
     1c0:	00 00       	nop
     1c2:	00 c8       	rjmp	.-4096   	; 0xfffff1c4 <__eeprom_end+0xff7ef1c4>
     1c4:	0c 33       	cpi	r16, 0x3C	; 60
     1c6:	33 33       	cpi	r19, 0x33	; 51
     1c8:	33 0f       	add	r19, r19
     1ca:	98 6e       	ori	r25, 0xE8	; 232
     1cc:	12 83       	std	Z+2, r17	; 0x02
     1ce:	11 41       	sbci	r17, 0x11	; 17
     1d0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1d2:	21 14       	cp	r2, r1
     1d4:	89 3b       	cpi	r24, 0xB9	; 185
     1d6:	e6 55       	subi	r30, 0x56	; 86
     1d8:	16 cf       	rjmp	.-468    	; 0x6 <__FUSE_REGION_LENGTH__+0x3>
     1da:	fe e6       	ldi	r31, 0x6E	; 110
     1dc:	db 18       	sub	r13, r11
     1de:	d1 84       	ldd	r13, Z+9	; 0x09
     1e0:	4b 38       	cpi	r20, 0x8B	; 139
     1e2:	1b f7       	brvc	.-58     	; 0x1aa <__trampolines_end+0xa8>
     1e4:	7c 1d       	adc	r23, r12
     1e6:	90 1d       	adc	r25, r0
     1e8:	a4 bb       	out	0x14, r26	; 20
     1ea:	e4 24       	eor	r14, r4
     1ec:	20 32       	cpi	r18, 0x20	; 32
     1ee:	84 72       	andi	r24, 0x24	; 36
     1f0:	5e 22       	and	r5, r30
     1f2:	81 00       	.word	0x0081	; ????
     1f4:	c9 f1       	breq	.+114    	; 0x268 <indiceMaisProximo+0x28>
     1f6:	24 ec       	ldi	r18, 0xC4	; 196
     1f8:	a1 e5       	ldi	r26, 0x51	; 81
     1fa:	3d 27       	eor	r19, r29

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	d1 e2       	ldi	r29, 0x21	; 33
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	13 e0       	ldi	r17, 0x03	; 3
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b2 e0       	ldi	r27, 0x02	; 2
     212:	e0 e2       	ldi	r30, 0x20	; 32
     214:	f9 e2       	ldi	r31, 0x29	; 41
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a0 38       	cpi	r26, 0x80	; 128
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	23 e0       	ldi	r18, 0x03	; 3
     228:	a0 e8       	ldi	r26, 0x80	; 128
     22a:	b3 e0       	ldi	r27, 0x03	; 3
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a7 3e       	cpi	r26, 0xE7	; 231
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 10 0b 	call	0x1620	; 0x1620 <main>
     23a:	0c 94 8e 14 	jmp	0x291c	; 0x291c <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <indiceMaisProximo>:
char orientacao_motoqueiro = 'N'; //{'N', 'S', 'L', 'O'}; // 'N' - Norte, 'S' - Sul, 'L' - Leste e 'O' - Oeste

int esquinas[9][2] = {{620, 680},   {1220, 680}, {1820, 680},  {620, 1360}, {1220, 1360},
                      {1820, 1360}, {620, 2040}, {1220, 2040}, {1820, 2040}};

int indiceMaisProximo(int x, int y) {
     240:	2f 92       	push	r2
     242:	3f 92       	push	r3
     244:	4f 92       	push	r4
     246:	5f 92       	push	r5
     248:	6f 92       	push	r6
     24a:	7f 92       	push	r7
     24c:	8f 92       	push	r8
     24e:	9f 92       	push	r9
     250:	af 92       	push	r10
     252:	bf 92       	push	r11
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	2a 97       	sbiw	r28, 0x0a	; 10
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
     274:	1c 01       	movw	r2, r24
     276:	3b 01       	movw	r6, r22
  int indice = 0;
  double menor = sqrt(pow(x - esquinas[0][0], 2) + pow(y - esquinas[0][1], 2));
     278:	e0 e0       	ldi	r30, 0x00	; 0
     27a:	f2 e0       	ldi	r31, 0x02	; 2
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	b1 01       	movw	r22, r2
     282:	68 1b       	sub	r22, r24
     284:	79 0b       	sbc	r23, r25
     286:	07 2e       	mov	r0, r23
     288:	00 0c       	add	r0, r0
     28a:	88 0b       	sbc	r24, r24
     28c:	99 0b       	sbc	r25, r25
     28e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__floatsisf>
     292:	6b 01       	movw	r12, r22
     294:	7c 01       	movw	r14, r24
     296:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     29a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     29e:	b3 01       	movw	r22, r6
     2a0:	68 1b       	sub	r22, r24
     2a2:	79 0b       	sbc	r23, r25
     2a4:	07 2e       	mov	r0, r23
     2a6:	00 0c       	add	r0, r0
     2a8:	88 0b       	sbc	r24, r24
     2aa:	99 0b       	sbc	r25, r25
     2ac:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__floatsisf>
     2b0:	4b 01       	movw	r8, r22
     2b2:	5c 01       	movw	r10, r24
     2b4:	9b 01       	movw	r18, r22
     2b6:	ac 01       	movw	r20, r24
     2b8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__mulsf3>
     2bc:	69 83       	std	Y+1, r22	; 0x01
     2be:	7a 83       	std	Y+2, r23	; 0x02
     2c0:	8b 83       	std	Y+3, r24	; 0x03
     2c2:	9c 83       	std	Y+4, r25	; 0x04
     2c4:	a5 01       	movw	r20, r10
     2c6:	94 01       	movw	r18, r8
     2c8:	c5 01       	movw	r24, r10
     2ca:	b4 01       	movw	r22, r8
     2cc:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__mulsf3>
     2d0:	4b 01       	movw	r8, r22
     2d2:	5c 01       	movw	r10, r24
     2d4:	a7 01       	movw	r20, r14
     2d6:	96 01       	movw	r18, r12
     2d8:	c7 01       	movw	r24, r14
     2da:	b6 01       	movw	r22, r12
     2dc:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__mulsf3>
     2e0:	9b 01       	movw	r18, r22
     2e2:	ac 01       	movw	r20, r24
     2e4:	c5 01       	movw	r24, r10
     2e6:	b4 01       	movw	r22, r8
     2e8:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__addsf3>
     2ec:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <sqrt>
     2f0:	6d 83       	std	Y+5, r22	; 0x05
     2f2:	7e 83       	std	Y+6, r23	; 0x06
     2f4:	48 2e       	mov	r4, r24
     2f6:	59 2e       	mov	r5, r25
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	92 e0       	ldi	r25, 0x02	; 2
  for (int i = 1; i < 9; i++) {
     2fc:	01 e0       	ldi	r16, 0x01	; 1
     2fe:	10 e0       	ldi	r17, 0x00	; 0

int esquinas[9][2] = {{620, 680},   {1220, 680}, {1820, 680},  {620, 1360}, {1220, 1360},
                      {1820, 1360}, {620, 2040}, {1220, 2040}, {1820, 2040}};

int indiceMaisProximo(int x, int y) {
  int indice = 0;
     300:	1f 82       	std	Y+7, r1	; 0x07
     302:	18 86       	std	Y+8, r1	; 0x08
     304:	9a 87       	std	Y+10, r25	; 0x0a
     306:	89 87       	std	Y+9, r24	; 0x09
  double menor = sqrt(pow(x - esquinas[0][0], 2) + pow(y - esquinas[0][1], 2));
  for (int i = 1; i < 9; i++) {
    double d = sqrt(pow(x - esquinas[i][0], 2) + pow(y - esquinas[i][1], 2));
     308:	e9 85       	ldd	r30, Y+9	; 0x09
     30a:	fa 85       	ldd	r31, Y+10	; 0x0a
     30c:	84 81       	ldd	r24, Z+4	; 0x04
     30e:	95 81       	ldd	r25, Z+5	; 0x05
     310:	b1 01       	movw	r22, r2
     312:	68 1b       	sub	r22, r24
     314:	79 0b       	sbc	r23, r25
     316:	07 2e       	mov	r0, r23
     318:	00 0c       	add	r0, r0
     31a:	88 0b       	sbc	r24, r24
     31c:	99 0b       	sbc	r25, r25
     31e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__floatsisf>
     322:	6b 01       	movw	r12, r22
     324:	7c 01       	movw	r14, r24
     326:	e9 85       	ldd	r30, Y+9	; 0x09
     328:	fa 85       	ldd	r31, Y+10	; 0x0a
     32a:	86 81       	ldd	r24, Z+6	; 0x06
     32c:	97 81       	ldd	r25, Z+7	; 0x07
     32e:	b3 01       	movw	r22, r6
     330:	68 1b       	sub	r22, r24
     332:	79 0b       	sbc	r23, r25
     334:	07 2e       	mov	r0, r23
     336:	00 0c       	add	r0, r0
     338:	88 0b       	sbc	r24, r24
     33a:	99 0b       	sbc	r25, r25
     33c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__floatsisf>
     340:	4b 01       	movw	r8, r22
     342:	5c 01       	movw	r10, r24
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__mulsf3>
     34c:	69 83       	std	Y+1, r22	; 0x01
     34e:	7a 83       	std	Y+2, r23	; 0x02
     350:	8b 83       	std	Y+3, r24	; 0x03
     352:	9c 83       	std	Y+4, r25	; 0x04
     354:	a5 01       	movw	r20, r10
     356:	94 01       	movw	r18, r8
     358:	c5 01       	movw	r24, r10
     35a:	b4 01       	movw	r22, r8
     35c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__mulsf3>
     360:	4b 01       	movw	r8, r22
     362:	5c 01       	movw	r10, r24
     364:	a7 01       	movw	r20, r14
     366:	96 01       	movw	r18, r12
     368:	c7 01       	movw	r24, r14
     36a:	b6 01       	movw	r22, r12
     36c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <__mulsf3>
     370:	9b 01       	movw	r18, r22
     372:	ac 01       	movw	r20, r24
     374:	c5 01       	movw	r24, r10
     376:	b4 01       	movw	r22, r8
     378:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__addsf3>
     37c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <sqrt>
     380:	c6 2e       	mov	r12, r22
     382:	d7 2e       	mov	r13, r23
     384:	e8 2e       	mov	r14, r24
     386:	f9 2e       	mov	r15, r25
    if (d < menor) {
     388:	2d 81       	ldd	r18, Y+5	; 0x05
     38a:	3e 81       	ldd	r19, Y+6	; 0x06
     38c:	44 2d       	mov	r20, r4
     38e:	55 2d       	mov	r21, r5
     390:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__cmpsf2>
     394:	88 23       	and	r24, r24
     396:	34 f4       	brge	.+12     	; 0x3a4 <indiceMaisProximo+0x164>
      menor = d;
     398:	cd 82       	std	Y+5, r12	; 0x05
     39a:	de 82       	std	Y+6, r13	; 0x06
     39c:	4e 2c       	mov	r4, r14
     39e:	5f 2c       	mov	r5, r15
int indiceMaisProximo(int x, int y) {
  int indice = 0;
  double menor = sqrt(pow(x - esquinas[0][0], 2) + pow(y - esquinas[0][1], 2));
  for (int i = 1; i < 9; i++) {
    double d = sqrt(pow(x - esquinas[i][0], 2) + pow(y - esquinas[i][1], 2));
    if (d < menor) {
     3a0:	0f 83       	std	Y+7, r16	; 0x07
     3a2:	18 87       	std	Y+8, r17	; 0x08
                      {1820, 1360}, {620, 2040}, {1220, 2040}, {1820, 2040}};

int indiceMaisProximo(int x, int y) {
  int indice = 0;
  double menor = sqrt(pow(x - esquinas[0][0], 2) + pow(y - esquinas[0][1], 2));
  for (int i = 1; i < 9; i++) {
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	89 85       	ldd	r24, Y+9	; 0x09
     3aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ac:	04 96       	adiw	r24, 0x04	; 4
     3ae:	9a 87       	std	Y+10, r25	; 0x0a
     3b0:	89 87       	std	Y+9, r24	; 0x09
     3b2:	09 30       	cpi	r16, 0x09	; 9
     3b4:	11 05       	cpc	r17, r1
     3b6:	09 f0       	breq	.+2      	; 0x3ba <indiceMaisProximo+0x17a>
     3b8:	a7 cf       	rjmp	.-178    	; 0x308 <indiceMaisProximo+0xc8>
      menor = d;
      indice = i;
    }
  }
  return indice;
}
     3ba:	8f 81       	ldd	r24, Y+7	; 0x07
     3bc:	98 85       	ldd	r25, Y+8	; 0x08
     3be:	2a 96       	adiw	r28, 0x0a	; 10
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	cf 90       	pop	r12
     3da:	bf 90       	pop	r11
     3dc:	af 90       	pop	r10
     3de:	9f 90       	pop	r9
     3e0:	8f 90       	pop	r8
     3e2:	7f 90       	pop	r7
     3e4:	6f 90       	pop	r6
     3e6:	5f 90       	pop	r5
     3e8:	4f 90       	pop	r4
     3ea:	3f 90       	pop	r3
     3ec:	2f 90       	pop	r2
     3ee:	08 95       	ret

000003f0 <envia2bytes>:

int difx = 0, dify = 0;

void envia2bytes(char a, char b) {
  // Envia o primeiro byte
  UDR0 = a;
     3f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     3f4:	e0 ec       	ldi	r30, 0xC0	; 192
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	86 ff       	sbrs	r24, 6
     3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <envia2bytes+0x8>
  UCSR0A |= (1 << TXC0);               // Limpa o flag de transmiss�o
     3fe:	e0 ec       	ldi	r30, 0xC0	; 192
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	80 64       	ori	r24, 0x40	; 64
     406:	80 83       	st	Z, r24

  // Envia o segundo byte
  UDR0 = b;
     408:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     40c:	80 81       	ld	r24, Z
     40e:	86 ff       	sbrs	r24, 6
     410:	fd cf       	rjmp	.-6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     412:	e0 ec       	ldi	r30, 0xC0	; 192
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	80 64       	ori	r24, 0x40	; 64
     41a:	80 83       	st	Z, r24
     41c:	08 95       	ret

0000041e <envia3bytes>:
}

void envia3bytes(char a, char b, char c) {
  // Envia o primeiro byte
  UDR0 = a;
     41e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     422:	e0 ec       	ldi	r30, 0xC0	; 192
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	86 ff       	sbrs	r24, 6
     42a:	fd cf       	rjmp	.-6      	; 0x426 <envia3bytes+0x8>
  UCSR0A |= (1 << TXC0);               // Limpa o flag de transmiss�o
     42c:	e0 ec       	ldi	r30, 0xC0	; 192
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	80 64       	ori	r24, 0x40	; 64
     434:	80 83       	st	Z, r24

  // Envia o segundo byte
  UDR0 = b;
     436:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     43a:	80 81       	ld	r24, Z
     43c:	86 ff       	sbrs	r24, 6
     43e:	fd cf       	rjmp	.-6      	; 0x43a <envia3bytes+0x1c>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     440:	e0 ec       	ldi	r30, 0xC0	; 192
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	80 64       	ori	r24, 0x40	; 64
     448:	80 83       	st	Z, r24

  // Envia o segundo byte
  UDR0 = c;
     44a:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     44e:	80 81       	ld	r24, Z
     450:	86 ff       	sbrs	r24, 6
     452:	fd cf       	rjmp	.-6      	; 0x44e <envia3bytes+0x30>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     454:	e0 ec       	ldi	r30, 0xC0	; 192
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	80 64       	ori	r24, 0x40	; 64
     45c:	80 83       	st	Z, r24
     45e:	08 95       	ret

00000460 <enviamov>:
}

void enviamov(int a) {
  // Envia o primeiro byte
  UDR0 = 'U';
     460:	95 e5       	ldi	r25, 0x55	; 85
     462:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     466:	e0 ec       	ldi	r30, 0xC0	; 192
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	90 81       	ld	r25, Z
     46c:	96 ff       	sbrs	r25, 6
     46e:	fd cf       	rjmp	.-6      	; 0x46a <enviamov+0xa>
  UCSR0A |= (1 << TXC0);               // Limpa o flag de transmiss�o
     470:	e0 ec       	ldi	r30, 0xC0	; 192
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	90 81       	ld	r25, Z
     476:	90 64       	ori	r25, 0x40	; 64
     478:	90 83       	st	Z, r25

  // Envia o segundo byte
  UDR0 = 'M';
     47a:	9d e4       	ldi	r25, 0x4D	; 77
     47c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     480:	90 81       	ld	r25, Z
     482:	96 ff       	sbrs	r25, 6
     484:	fd cf       	rjmp	.-6      	; 0x480 <enviamov+0x20>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     486:	e0 ec       	ldi	r30, 0xC0	; 192
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	90 81       	ld	r25, Z
     48c:	90 64       	ori	r25, 0x40	; 64
     48e:	90 83       	st	Z, r25

  UDR0 = a;
     490:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
  while ((UCSR0A & (1 << TXC0)) == 0); // Espera a transmiss�o terminar
     494:	80 81       	ld	r24, Z
     496:	86 ff       	sbrs	r24, 6
     498:	fd cf       	rjmp	.-6      	; 0x494 <enviamov+0x34>
  UCSR0A |= (1 << TXC0);               // Limpa o flag novamente
     49a:	e0 ec       	ldi	r30, 0xC0	; 192
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	80 64       	ori	r24, 0x40	; 64
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <uart_init>:
}

void uart_init() {
  // Configura UART para 19200 bps, 8N1 @ 16 MHz
  UBRR0H = 0;
     4a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
  UBRR0L = 51;
     4aa:	83 e3       	ldi	r24, 0x33	; 51
     4ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); // RX, TX e interrup��o RX habilitados
     4b0:	88 e9       	ldi	r24, 0x98	; 152
     4b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     4b6:	86 e0       	ldi	r24, 0x06	; 6
     4b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     4bc:	08 95       	ret

000004be <pos_x_y>:
}

void pos_x_y() {
  x = ((unsigned int)posx_entregador[0] << 8) | posx_entregador[1];
     4be:	e2 ed       	ldi	r30, 0xD2	; 210
     4c0:	f3 e0       	ldi	r31, 0x03	; 3
     4c2:	80 81       	ld	r24, Z
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	98 2f       	mov	r25, r24
     4c8:	88 27       	eor	r24, r24
     4ca:	21 81       	ldd	r18, Z+1	; 0x01
     4cc:	82 2b       	or	r24, r18
     4ce:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <x+0x1>
     4d2:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <x>
  y = ((unsigned int)posy_entregador[0] << 8) | posy_entregador[1];
     4d6:	e4 ee       	ldi	r30, 0xE4	; 228
     4d8:	f3 e0       	ldi	r31, 0x03	; 3
     4da:	20 81       	ld	r18, Z
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	32 2f       	mov	r19, r18
     4e0:	22 27       	eor	r18, r18
     4e2:	41 81       	ldd	r20, Z+1	; 0x01
     4e4:	24 2b       	or	r18, r20
     4e6:	30 93 b6 03 	sts	0x03B6, r19	; 0x8003b6 <y+0x1>
     4ea:	20 93 b5 03 	sts	0x03B5, r18	; 0x8003b5 <y>

  x_coleta = ((unsigned int)posx_coleta[0] << 8) | posx_coleta[1];
     4ee:	ef ed       	ldi	r30, 0xDF	; 223
     4f0:	f3 e0       	ldi	r31, 0x03	; 3
     4f2:	40 81       	ld	r20, Z
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	54 2f       	mov	r21, r20
     4f8:	44 27       	eor	r20, r20
     4fa:	61 81       	ldd	r22, Z+1	; 0x01
     4fc:	46 2b       	or	r20, r22
     4fe:	50 93 b4 03 	sts	0x03B4, r21	; 0x8003b4 <x_coleta+0x1>
     502:	40 93 b3 03 	sts	0x03B3, r20	; 0x8003b3 <x_coleta>
  y_coleta = ((unsigned int)posy_coleta[0] << 8) | posy_coleta[1];
     506:	ed ed       	ldi	r30, 0xDD	; 221
     508:	f3 e0       	ldi	r31, 0x03	; 3
     50a:	60 81       	ld	r22, Z
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	76 2f       	mov	r23, r22
     510:	66 27       	eor	r22, r22
     512:	e1 81       	ldd	r30, Z+1	; 0x01
     514:	6e 2b       	or	r22, r30
     516:	70 93 b2 03 	sts	0x03B2, r23	; 0x8003b2 <y_coleta+0x1>
     51a:	60 93 b1 03 	sts	0x03B1, r22	; 0x8003b1 <y_coleta>

  x_entrega = ((unsigned int)posx_entrega[0] << 8) | posx_entrega[1];
     51e:	a9 ed       	ldi	r26, 0xD9	; 217
     520:	b3 e0       	ldi	r27, 0x03	; 3
     522:	ec 91       	ld	r30, X
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	fe 2f       	mov	r31, r30
     528:	ee 27       	eor	r30, r30
     52a:	11 96       	adiw	r26, 0x01	; 1
     52c:	ac 91       	ld	r26, X
     52e:	ea 2b       	or	r30, r26
     530:	f0 93 b0 03 	sts	0x03B0, r31	; 0x8003b0 <x_entrega+0x1>
     534:	e0 93 af 03 	sts	0x03AF, r30	; 0x8003af <x_entrega>
  y_entrega = ((unsigned int)posy_entrega[0] << 8) | posy_entrega[1];
     538:	ae ec       	ldi	r26, 0xCE	; 206
     53a:	b3 e0       	ldi	r27, 0x03	; 3
     53c:	ec 91       	ld	r30, X
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	fe 2f       	mov	r31, r30
     542:	ee 27       	eor	r30, r30
     544:	11 96       	adiw	r26, 0x01	; 1
     546:	ac 91       	ld	r26, X
     548:	ea 2b       	or	r30, r26
     54a:	f0 93 ae 03 	sts	0x03AE, r31	; 0x8003ae <y_entrega+0x1>
     54e:	e0 93 ad 03 	sts	0x03AD, r30	; 0x8003ad <y_entrega>

  if (((x - x_coleta) <= 80) && ((y - y_coleta) <= 80) && entra_uma_vez_1) { // entra_uma_vez regula a entrada no offset
     552:	84 1b       	sub	r24, r20
     554:	95 0b       	sbc	r25, r21
     556:	81 35       	cpi	r24, 0x51	; 81
     558:	91 05       	cpc	r25, r1
     55a:	d8 f4       	brcc	.+54     	; 0x592 <pos_x_y+0xd4>
     55c:	26 1b       	sub	r18, r22
     55e:	37 0b       	sbc	r19, r23
     560:	21 35       	cpi	r18, 0x51	; 81
     562:	31 05       	cpc	r19, r1
     564:	b0 f4       	brcc	.+44     	; 0x592 <pos_x_y+0xd4>
     566:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <entra_uma_vez_1>
     56a:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <entra_uma_vez_1+0x1>
     56e:	89 2b       	or	r24, r25
     570:	81 f0       	breq	.+32     	; 0x592 <pos_x_y+0xd4>
    envia3bytes('U', 'I', id_cliente);
     572:	40 91 bc 03 	lds	r20, 0x03BC	; 0x8003bc <id_cliente>
     576:	69 e4       	ldi	r22, 0x49	; 73
     578:	85 e5       	ldi	r24, 0x55	; 85
     57a:	51 df       	rcall	.-350    	; 0x41e <envia3bytes>
    pedido_coletado = 1;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <pedido_coletado+0x1>
     584:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <pedido_coletado>
    entra_uma_vez_1 = 0;
     588:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <entra_uma_vez_1+0x1>
     58c:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <entra_uma_vez_1>
    enviamov(1);
     590:	67 df       	rcall	.-306    	; 0x460 <enviamov>
  }

  if (((x - x_entrega) <= 100) && ((y - y_entrega) <= 100) &&
     592:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <x>
     596:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <x+0x1>
     59a:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <x_entrega>
     59e:	30 91 b0 03 	lds	r19, 0x03B0	; 0x8003b0 <x_entrega+0x1>
     5a2:	82 1b       	sub	r24, r18
     5a4:	93 0b       	sbc	r25, r19
     5a6:	85 36       	cpi	r24, 0x65	; 101
     5a8:	91 05       	cpc	r25, r1
     5aa:	18 f5       	brcc	.+70     	; 0x5f2 <pos_x_y+0x134>
     5ac:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
     5b0:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
     5b4:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <y_entrega>
     5b8:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <y_entrega+0x1>
     5bc:	82 1b       	sub	r24, r18
     5be:	93 0b       	sbc	r25, r19
     5c0:	85 36       	cpi	r24, 0x65	; 101
     5c2:	91 05       	cpc	r25, r1
     5c4:	b0 f4       	brcc	.+44     	; 0x5f2 <pos_x_y+0x134>
     5c6:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <pedido_coletado_1>
     5ca:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <pedido_coletado_1+0x1>
     5ce:	89 2b       	or	r24, r25
     5d0:	81 f0       	breq	.+32     	; 0x5f2 <pos_x_y+0x134>
      pedido_coletado_1) { // colocar flag de finaliza��o para evitar loops
    envia3bytes('U', 'F', id_cliente);
     5d2:	40 91 bc 03 	lds	r20, 0x03BC	; 0x8003bc <id_cliente>
     5d6:	66 e4       	ldi	r22, 0x46	; 70
     5d8:	85 e5       	ldi	r24, 0x55	; 85
     5da:	21 df       	rcall	.-446    	; 0x41e <envia3bytes>
    pedido_coletado_1 = 0;
     5dc:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <pedido_coletado_1+0x1>
     5e0:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <pedido_coletado_1>
    pedido_entregue = 1;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <pedido_entregue+0x1>
     5ec:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <pedido_entregue>
    enviamov(1);
     5f0:	37 cf       	rjmp	.-402    	; 0x460 <enviamov>
     5f2:	08 95       	ret

000005f4 <esq_proxima>:
  }
}

void esq_proxima() {
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
  pos_x_y();
     5f8:	62 df       	rcall	.-316    	; 0x4be <pos_x_y>

  indice = indiceMaisProximo(x, y);
     5fa:	c0 91 b7 03 	lds	r28, 0x03B7	; 0x8003b7 <x>
     5fe:	d0 91 b8 03 	lds	r29, 0x03B8	; 0x8003b8 <x+0x1>
     602:	60 91 b5 03 	lds	r22, 0x03B5	; 0x8003b5 <y>
     606:	70 91 b6 03 	lds	r23, 0x03B6	; 0x8003b6 <y+0x1>
     60a:	ce 01       	movw	r24, r28
     60c:	19 de       	rcall	.-974    	; 0x240 <indiceMaisProximo>
     60e:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <indice+0x1>
     612:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <indice>
  dif_x_entregador = abs(esquinas[indice][0] - x);
     616:	fc 01       	movw	r30, r24
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	e0 50       	subi	r30, 0x00	; 0
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	40 81       	ld	r20, Z
     626:	51 81       	ldd	r21, Z+1	; 0x01
     628:	ba 01       	movw	r22, r20
     62a:	6c 1b       	sub	r22, r28
     62c:	7d 0b       	sbc	r23, r29
     62e:	9b 01       	movw	r18, r22
     630:	22 f4       	brpl	.+8      	; 0x63a <esq_proxima+0x46>
     632:	22 27       	eor	r18, r18
     634:	33 27       	eor	r19, r19
     636:	26 1b       	sub	r18, r22
     638:	37 0b       	sbc	r19, r23
     63a:	30 93 aa 03 	sts	0x03AA, r19	; 0x8003aa <dif_x_entregador+0x1>
     63e:	20 93 a9 03 	sts	0x03A9, r18	; 0x8003a9 <dif_x_entregador>
  // dif_y_entregador = abs (esquinas[indice][1] - y);
  esq_x_entregador = esquinas[indice][0];
     642:	50 93 a4 03 	sts	0x03A4, r21	; 0x8003a4 <esq_x_entregador+0x1>
     646:	40 93 a3 03 	sts	0x03A3, r20	; 0x8003a3 <esq_x_entregador>
  esq_y_entregador = esquinas[indice][1];
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	fc 01       	movw	r30, r24
     654:	e0 50       	subi	r30, 0x00	; 0
     656:	fe 4f       	sbci	r31, 0xFE	; 254
     658:	82 81       	ldd	r24, Z+2	; 0x02
     65a:	93 81       	ldd	r25, Z+3	; 0x03
     65c:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <esq_y_entregador+0x1>
     660:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <esq_y_entregador>

  indice = indiceMaisProximo(x_coleta, y_coleta);
     664:	c0 91 b3 03 	lds	r28, 0x03B3	; 0x8003b3 <x_coleta>
     668:	d0 91 b4 03 	lds	r29, 0x03B4	; 0x8003b4 <x_coleta+0x1>
     66c:	60 91 b1 03 	lds	r22, 0x03B1	; 0x8003b1 <y_coleta>
     670:	70 91 b2 03 	lds	r23, 0x03B2	; 0x8003b2 <y_coleta+0x1>
     674:	ce 01       	movw	r24, r28
     676:	e4 dd       	rcall	.-1080   	; 0x240 <indiceMaisProximo>
     678:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <indice+0x1>
     67c:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <indice>
  dif_x_coleta = abs(esquinas[indice][0] - x_coleta);
     680:	fc 01       	movw	r30, r24
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	e0 50       	subi	r30, 0x00	; 0
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	40 81       	ld	r20, Z
     690:	51 81       	ldd	r21, Z+1	; 0x01
     692:	ba 01       	movw	r22, r20
     694:	6c 1b       	sub	r22, r28
     696:	7d 0b       	sbc	r23, r29
     698:	9b 01       	movw	r18, r22
     69a:	22 f4       	brpl	.+8      	; 0x6a4 <esq_proxima+0xb0>
     69c:	22 27       	eor	r18, r18
     69e:	33 27       	eor	r19, r19
     6a0:	26 1b       	sub	r18, r22
     6a2:	37 0b       	sbc	r19, r23
     6a4:	30 93 a8 03 	sts	0x03A8, r19	; 0x8003a8 <dif_x_coleta+0x1>
     6a8:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <dif_x_coleta>
  // dif_y_coleta = abs (esquinas[indice][1] - y_coleta);
  esq_x_coleta = esquinas[indice][0];
     6ac:	50 93 a0 03 	sts	0x03A0, r21	; 0x8003a0 <esq_x_coleta+0x1>
     6b0:	40 93 9f 03 	sts	0x039F, r20	; 0x80039f <esq_x_coleta>
  esq_y_coleta = esquinas[indice][1];
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	fc 01       	movw	r30, r24
     6be:	e0 50       	subi	r30, 0x00	; 0
     6c0:	fe 4f       	sbci	r31, 0xFE	; 254
     6c2:	82 81       	ldd	r24, Z+2	; 0x02
     6c4:	93 81       	ldd	r25, Z+3	; 0x03
     6c6:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <esq_y_coleta+0x1>
     6ca:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <esq_y_coleta>

  indice = indiceMaisProximo(x_entrega, y_entrega);
     6ce:	c0 91 af 03 	lds	r28, 0x03AF	; 0x8003af <x_entrega>
     6d2:	d0 91 b0 03 	lds	r29, 0x03B0	; 0x8003b0 <x_entrega+0x1>
     6d6:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <y_entrega>
     6da:	70 91 ae 03 	lds	r23, 0x03AE	; 0x8003ae <y_entrega+0x1>
     6de:	ce 01       	movw	r24, r28
     6e0:	af dd       	rcall	.-1186   	; 0x240 <indiceMaisProximo>
     6e2:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <indice+0x1>
     6e6:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <indice>
  dif_x_entrega = abs(esquinas[indice][0] - x_entrega);
     6ea:	fc 01       	movw	r30, r24
     6ec:	ee 0f       	add	r30, r30
     6ee:	ff 1f       	adc	r31, r31
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	e0 50       	subi	r30, 0x00	; 0
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	40 81       	ld	r20, Z
     6fa:	51 81       	ldd	r21, Z+1	; 0x01
     6fc:	ba 01       	movw	r22, r20
     6fe:	6c 1b       	sub	r22, r28
     700:	7d 0b       	sbc	r23, r29
     702:	9b 01       	movw	r18, r22
     704:	22 f4       	brpl	.+8      	; 0x70e <esq_proxima+0x11a>
     706:	22 27       	eor	r18, r18
     708:	33 27       	eor	r19, r19
     70a:	26 1b       	sub	r18, r22
     70c:	37 0b       	sbc	r19, r23
     70e:	30 93 a6 03 	sts	0x03A6, r19	; 0x8003a6 <dif_x_entrega+0x1>
     712:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <dif_x_entrega>
  // dif_y_entrega = abs (esquinas[indice][1] - y_entrega);
  esq_x_entrega = esquinas[indice][0];
     716:	50 93 9c 03 	sts	0x039C, r21	; 0x80039c <esq_x_entrega+0x1>
     71a:	40 93 9b 03 	sts	0x039B, r20	; 0x80039b <esq_x_entrega>
  esq_y_entrega = esquinas[indice][1];
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	fc 01       	movw	r30, r24
     728:	e0 50       	subi	r30, 0x00	; 0
     72a:	fe 4f       	sbci	r31, 0xFE	; 254
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	93 81       	ldd	r25, Z+3	; 0x03
     730:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <esq_y_entrega+0x1>
     734:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <esq_y_entrega>
}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <direcoes>:

void direcoes(int a, int b) { // Calculo das distancias envolvidas e dire��o do motoqueiro
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	2d 97       	sbiw	r28, 0x0d	; 13
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	8b 01       	movw	r16, r22
  habilita_dir_teclado = 1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <habilita_dir_teclado+0x1>
     768:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <habilita_dir_teclado>
  char disty[5];

  pos_x_y();
     76c:	a8 de       	rcall	.-688    	; 0x4be <pos_x_y>
  esq_proxima();
     76e:	42 df       	rcall	.-380    	; 0x5f4 <esq_proxima>
     770:	01 2b       	or	r16, r17

  if (b) {
     772:	09 f4       	brne	.+2      	; 0x776 <direcoes+0x38>
     774:	8f c1       	rjmp	.+798    	; 0xa94 <direcoes+0x356>
     776:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <estados_1>
    switch (estados_1) {
     77a:	8e 2f       	mov	r24, r30
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	fc 01       	movw	r30, r24
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	e8 30       	cpi	r30, 0x08	; 8
     784:	f1 05       	cpc	r31, r1
     786:	08 f0       	brcs	.+2      	; 0x78a <direcoes+0x4c>
     788:	85 c1       	rjmp	.+778    	; 0xa94 <direcoes+0x356>
     78a:	88 27       	eor	r24, r24
     78c:	ee 58       	subi	r30, 0x8E	; 142
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	8f 4f       	sbci	r24, 0xFF	; 255
     792:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__tablejump2__>
    case 1:
      LCD_Clear();
     796:	05 d6       	rcall	.+3082   	; 0x13a2 <LCD_Clear>
      LCD_String("Siga reto por:");
     798:	8c e4       	ldi	r24, 0x4C	; 76
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	db d5       	rcall	.+2998   	; 0x1354 <LCD_String>
      LCD_Command(0xC0);
     79e:	80 ec       	ldi	r24, 0xC0	; 192
     7a0:	af d5       	rcall	.+2910   	; 0x1300 <LCD_Command>
     7a2:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <esq_y_coleta>
      sprintf(disty, "%d", abs(esq_y_coleta - y));
     7a6:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <esq_y_coleta+0x1>
     7aa:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
     7ae:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
     7b2:	28 1b       	sub	r18, r24
     7b4:	39 0b       	sbc	r19, r25
     7b6:	c9 01       	movw	r24, r18
     7b8:	99 23       	and	r25, r25
     7ba:	24 f4       	brge	.+8      	; 0x7c4 <direcoes+0x86>
     7bc:	88 27       	eor	r24, r24
     7be:	99 27       	eor	r25, r25
     7c0:	82 1b       	sub	r24, r18
     7c2:	93 0b       	sbc	r25, r19
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	8b e5       	ldi	r24, 0x5B	; 91
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	9f 93       	push	r25
     7ce:	8f 93       	push	r24
     7d0:	8e 01       	movw	r16, r28
     7d2:	0f 5f       	subi	r16, 0xFF	; 255
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	1f 93       	push	r17
     7d8:	0f 93       	push	r16
     7da:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sprintf>
      LCD_String(disty);
     7de:	c8 01       	movw	r24, r16
     7e0:	b9 d5       	rcall	.+2930   	; 0x1354 <LCD_String>
     7e2:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String("m");
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	b6 d5       	rcall	.+2924   	; 0x1354 <LCD_String>
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
      break;
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	4f c1       	rjmp	.+670    	; 0xa94 <direcoes+0x356>

    case 2:
      LCD_Clear();
     7f6:	d5 d5       	rcall	.+2986   	; 0x13a2 <LCD_Clear>
     7f8:	8c e4       	ldi	r24, 0x4C	; 76
      LCD_String("Siga reto por:");
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	ab d5       	rcall	.+2902   	; 0x1354 <LCD_String>
     7fe:	80 ec       	ldi	r24, 0xC0	; 192
     800:	7f d5       	rcall	.+2814   	; 0x1300 <LCD_Command>
      LCD_Command(0xC0);
     802:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <esq_x_coleta>
     806:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <esq_x_coleta+0x1>
      sprintf(disty, "%d", (abs(esq_x_coleta - x)));
     80a:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <x>
     80e:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <x+0x1>
     812:	28 1b       	sub	r18, r24
     814:	39 0b       	sbc	r19, r25
     816:	c9 01       	movw	r24, r18
     818:	99 23       	and	r25, r25
     81a:	24 f4       	brge	.+8      	; 0x824 <direcoes+0xe6>
     81c:	88 27       	eor	r24, r24
     81e:	99 27       	eor	r25, r25
     820:	82 1b       	sub	r24, r18
     822:	93 0b       	sbc	r25, r19
     824:	9f 93       	push	r25
     826:	8f 93       	push	r24
     828:	8b e5       	ldi	r24, 0x5B	; 91
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	8e 01       	movw	r16, r28
     832:	0f 5f       	subi	r16, 0xFF	; 255
     834:	1f 4f       	sbci	r17, 0xFF	; 255
     836:	1f 93       	push	r17
     838:	0f 93       	push	r16
     83a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sprintf>
     83e:	c8 01       	movw	r24, r16
      LCD_String(disty);
     840:	89 d5       	rcall	.+2834   	; 0x1354 <LCD_String>
     842:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String("m");
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	86 d5       	rcall	.+2828   	; 0x1354 <LCD_String>
     848:	0f 90       	pop	r0
      break;
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	1f c1       	rjmp	.+574    	; 0xa94 <direcoes+0x356>

    case 3:
      LCD_Clear();
     856:	a5 d5       	rcall	.+2890   	; 0x13a2 <LCD_Clear>
     858:	8c e4       	ldi	r24, 0x4C	; 76
      LCD_String("Siga reto por:");
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	7b d5       	rcall	.+2806   	; 0x1354 <LCD_String>
     85e:	80 ec       	ldi	r24, 0xC0	; 192
     860:	4f d5       	rcall	.+2718   	; 0x1300 <LCD_Command>
      LCD_Command(0xC0);
     862:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <esq_y_entrega>
     866:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <esq_y_entrega+0x1>
      sprintf(disty, "%d", abs(esq_y_entrega - y));
     86a:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
     86e:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
     872:	28 1b       	sub	r18, r24
     874:	39 0b       	sbc	r19, r25
     876:	c9 01       	movw	r24, r18
     878:	99 23       	and	r25, r25
     87a:	24 f4       	brge	.+8      	; 0x884 <direcoes+0x146>
     87c:	88 27       	eor	r24, r24
     87e:	99 27       	eor	r25, r25
     880:	82 1b       	sub	r24, r18
     882:	93 0b       	sbc	r25, r19
     884:	9f 93       	push	r25
     886:	8f 93       	push	r24
     888:	8b e5       	ldi	r24, 0x5B	; 91
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	9f 93       	push	r25
     88e:	8f 93       	push	r24
     890:	8e 01       	movw	r16, r28
     892:	0f 5f       	subi	r16, 0xFF	; 255
     894:	1f 4f       	sbci	r17, 0xFF	; 255
     896:	1f 93       	push	r17
     898:	0f 93       	push	r16
     89a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sprintf>
      LCD_String(disty);
     89e:	c8 01       	movw	r24, r16
     8a0:	59 d5       	rcall	.+2738   	; 0x1354 <LCD_String>
      LCD_String("m");
     8a2:	8e e5       	ldi	r24, 0x5E	; 94
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	56 d5       	rcall	.+2732   	; 0x1354 <LCD_String>
     8a8:	0f 90       	pop	r0
      break;
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	ef c0       	rjmp	.+478    	; 0xa94 <direcoes+0x356>
     8b6:	75 d5       	rcall	.+2794   	; 0x13a2 <LCD_Clear>

    case 4:
      LCD_Clear();
     8b8:	8c e4       	ldi	r24, 0x4C	; 76
     8ba:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Siga reto por:");
     8bc:	4b d5       	rcall	.+2710   	; 0x1354 <LCD_String>
     8be:	80 ec       	ldi	r24, 0xC0	; 192
     8c0:	1f d5       	rcall	.+2622   	; 0x1300 <LCD_Command>
     8c2:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <esq_x_entrega>
      LCD_Command(0xC0);
     8c6:	30 91 9c 03 	lds	r19, 0x039C	; 0x80039c <esq_x_entrega+0x1>
      sprintf(disty, "%d", (abs(esq_x_entrega - x)));
     8ca:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <x>
     8ce:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <x+0x1>
     8d2:	28 1b       	sub	r18, r24
     8d4:	39 0b       	sbc	r19, r25
     8d6:	c9 01       	movw	r24, r18
     8d8:	99 23       	and	r25, r25
     8da:	24 f4       	brge	.+8      	; 0x8e4 <direcoes+0x1a6>
     8dc:	88 27       	eor	r24, r24
     8de:	99 27       	eor	r25, r25
     8e0:	82 1b       	sub	r24, r18
     8e2:	93 0b       	sbc	r25, r19
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	8b e5       	ldi	r24, 0x5B	; 91
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	8e 01       	movw	r16, r28
     8f2:	0f 5f       	subi	r16, 0xFF	; 255
     8f4:	1f 4f       	sbci	r17, 0xFF	; 255
     8f6:	1f 93       	push	r17
     8f8:	0f 93       	push	r16
     8fa:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sprintf>
      LCD_String(disty);
     8fe:	c8 01       	movw	r24, r16
     900:	29 d5       	rcall	.+2642   	; 0x1354 <LCD_String>
     902:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String("m");
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	26 d5       	rcall	.+2636   	; 0x1354 <LCD_String>
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
      break;
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	bf c0       	rjmp	.+382    	; 0xa94 <direcoes+0x356>
     916:	45 d5       	rcall	.+2698   	; 0x13a2 <LCD_Clear>
     918:	8c e4       	ldi	r24, 0x4C	; 76

    case 5:
      LCD_Clear();
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	1b d5       	rcall	.+2614   	; 0x1354 <LCD_String>
      LCD_String("Siga reto por:");
     91e:	80 ec       	ldi	r24, 0xC0	; 192
     920:	ef d4       	rcall	.+2526   	; 0x1300 <LCD_Command>
     922:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <x_entrega>
      LCD_Command(0xC0);
     926:	30 91 b0 03 	lds	r19, 0x03B0	; 0x8003b0 <x_entrega+0x1>
     92a:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <x>
      sprintf(disty, "%d", abs(x_entrega - x));
     92e:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <x+0x1>
     932:	28 1b       	sub	r18, r24
     934:	39 0b       	sbc	r19, r25
     936:	c9 01       	movw	r24, r18
     938:	99 23       	and	r25, r25
     93a:	24 f4       	brge	.+8      	; 0x944 <direcoes+0x206>
     93c:	88 27       	eor	r24, r24
     93e:	99 27       	eor	r25, r25
     940:	82 1b       	sub	r24, r18
     942:	93 0b       	sbc	r25, r19
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	8b e5       	ldi	r24, 0x5B	; 91
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	8e 01       	movw	r16, r28
     952:	0f 5f       	subi	r16, 0xFF	; 255
     954:	1f 4f       	sbci	r17, 0xFF	; 255
     956:	1f 93       	push	r17
     958:	0f 93       	push	r16
     95a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sprintf>
      LCD_String(disty);
     95e:	c8 01       	movw	r24, r16
     960:	f9 d4       	rcall	.+2546   	; 0x1354 <LCD_String>
     962:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String("m");
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	f6 d4       	rcall	.+2540   	; 0x1354 <LCD_String>
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
      break;
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	8f c0       	rjmp	.+286    	; 0xa94 <direcoes+0x356>
     976:	15 d5       	rcall	.+2602   	; 0x13a2 <LCD_Clear>
     978:	8c e4       	ldi	r24, 0x4C	; 76

    case 6:
      LCD_Clear();
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	eb d4       	rcall	.+2518   	; 0x1354 <LCD_String>
      LCD_String("Siga reto por:");
     97e:	80 ec       	ldi	r24, 0xC0	; 192
     980:	bf d4       	rcall	.+2430   	; 0x1300 <LCD_Command>
     982:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <y_entrega>
      LCD_Command(0xC0);
     986:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <y_entrega+0x1>
     98a:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
      sprintf(disty, "%d", (abs(y_entrega - y)));
     98e:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
     992:	28 1b       	sub	r18, r24
     994:	39 0b       	sbc	r19, r25
     996:	c9 01       	movw	r24, r18
     998:	99 23       	and	r25, r25
     99a:	24 f4       	brge	.+8      	; 0x9a4 <direcoes+0x266>
     99c:	88 27       	eor	r24, r24
     99e:	99 27       	eor	r25, r25
     9a0:	82 1b       	sub	r24, r18
     9a2:	93 0b       	sbc	r25, r19
     9a4:	9f 93       	push	r25
     9a6:	8f 93       	push	r24
     9a8:	8b e5       	ldi	r24, 0x5B	; 91
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	8e 01       	movw	r16, r28
     9b2:	0f 5f       	subi	r16, 0xFF	; 255
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
     9b6:	1f 93       	push	r17
     9b8:	0f 93       	push	r16
     9ba:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sprintf>
      LCD_String(disty);
     9be:	c8 01       	movw	r24, r16
     9c0:	c9 d4       	rcall	.+2450   	; 0x1354 <LCD_String>
     9c2:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String("m");
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	c6 d4       	rcall	.+2444   	; 0x1354 <LCD_String>
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
      break;
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	5f c0       	rjmp	.+190    	; 0xa94 <direcoes+0x356>
     9d6:	e5 d4       	rcall	.+2506   	; 0x13a2 <LCD_Clear>
     9d8:	8c e4       	ldi	r24, 0x4C	; 76

    case 7:
      LCD_Clear();
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	bb d4       	rcall	.+2422   	; 0x1354 <LCD_String>
      LCD_String("Siga reto por:");
     9de:	80 ec       	ldi	r24, 0xC0	; 192
     9e0:	8f d4       	rcall	.+2334   	; 0x1300 <LCD_Command>
     9e2:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <x_coleta>
      LCD_Command(0xC0);
     9e6:	30 91 b4 03 	lds	r19, 0x03B4	; 0x8003b4 <x_coleta+0x1>
      sprintf(disty, "%d", abs(x_coleta - x));
     9ea:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <x>
     9ee:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <x+0x1>
     9f2:	28 1b       	sub	r18, r24
     9f4:	39 0b       	sbc	r19, r25
     9f6:	c9 01       	movw	r24, r18
     9f8:	99 23       	and	r25, r25
     9fa:	24 f4       	brge	.+8      	; 0xa04 <direcoes+0x2c6>
     9fc:	88 27       	eor	r24, r24
     9fe:	99 27       	eor	r25, r25
     a00:	82 1b       	sub	r24, r18
     a02:	93 0b       	sbc	r25, r19
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	8b e5       	ldi	r24, 0x5B	; 91
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	9f 93       	push	r25
     a0e:	8f 93       	push	r24
     a10:	8e 01       	movw	r16, r28
     a12:	0f 5f       	subi	r16, 0xFF	; 255
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
     a16:	1f 93       	push	r17
     a18:	0f 93       	push	r16
     a1a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sprintf>
      LCD_String(disty);
     a1e:	c8 01       	movw	r24, r16
     a20:	99 d4       	rcall	.+2354   	; 0x1354 <LCD_String>
     a22:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String("m");
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	96 d4       	rcall	.+2348   	; 0x1354 <LCD_String>
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
      break;
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	2f c0       	rjmp	.+94     	; 0xa94 <direcoes+0x356>
     a36:	b5 d4       	rcall	.+2410   	; 0x13a2 <LCD_Clear>
     a38:	8c e4       	ldi	r24, 0x4C	; 76

    case 8:
      LCD_Clear();
     a3a:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Siga reto por:");
     a3c:	8b d4       	rcall	.+2326   	; 0x1354 <LCD_String>
     a3e:	80 ec       	ldi	r24, 0xC0	; 192
     a40:	5f d4       	rcall	.+2238   	; 0x1300 <LCD_Command>
      LCD_Command(0xC0);
     a42:	20 91 b1 03 	lds	r18, 0x03B1	; 0x8003b1 <y_coleta>
     a46:	30 91 b2 03 	lds	r19, 0x03B2	; 0x8003b2 <y_coleta+0x1>
      sprintf(disty, "%d", (abs(y_coleta - y)));
     a4a:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
     a4e:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
     a52:	28 1b       	sub	r18, r24
     a54:	39 0b       	sbc	r19, r25
     a56:	c9 01       	movw	r24, r18
     a58:	99 23       	and	r25, r25
     a5a:	24 f4       	brge	.+8      	; 0xa64 <direcoes+0x326>
     a5c:	88 27       	eor	r24, r24
     a5e:	99 27       	eor	r25, r25
     a60:	82 1b       	sub	r24, r18
     a62:	93 0b       	sbc	r25, r19
     a64:	9f 93       	push	r25
     a66:	8f 93       	push	r24
     a68:	8b e5       	ldi	r24, 0x5B	; 91
     a6a:	92 e0       	ldi	r25, 0x02	; 2
     a6c:	9f 93       	push	r25
     a6e:	8f 93       	push	r24
     a70:	8e 01       	movw	r16, r28
     a72:	0f 5f       	subi	r16, 0xFF	; 255
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	1f 93       	push	r17
     a78:	0f 93       	push	r16
     a7a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <sprintf>
     a7e:	c8 01       	movw	r24, r16
     a80:	69 d4       	rcall	.+2258   	; 0x1354 <LCD_String>
     a82:	8e e5       	ldi	r24, 0x5E	; 94
      LCD_String(disty);
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	66 d4       	rcall	.+2252   	; 0x1354 <LCD_String>
     a88:	0f 90       	pop	r0
      LCD_String("m");
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
      break;
     a92:	0f 90       	pop	r0
     a94:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <y>
     a98:	30 91 b6 03 	lds	r19, 0x03B6	; 0x8003b6 <y+0x1>
     a9c:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <esq_y_coleta>
    }
  }

  if ((abs(esq_y_coleta - y) <= 30) && !pedido_coletado && (abs(x - x_coleta) >= 50)) {
     aa0:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <esq_y_coleta+0x1>
     aa4:	82 1b       	sub	r24, r18
     aa6:	93 0b       	sbc	r25, r19
     aa8:	82 3e       	cpi	r24, 0xE2	; 226
     aaa:	4f ef       	ldi	r20, 0xFF	; 255
     aac:	94 07       	cpc	r25, r20
     aae:	a4 f1       	brlt	.+104    	; 0xb18 <direcoes+0x3da>
     ab0:	4f 97       	sbiw	r24, 0x1f	; 31
     ab2:	94 f5       	brge	.+100    	; 0xb18 <direcoes+0x3da>
     ab4:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <pedido_coletado>
     ab8:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <pedido_coletado+0x1>
     abc:	89 2b       	or	r24, r25
     abe:	61 f5       	brne	.+88     	; 0xb18 <direcoes+0x3da>
     ac0:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <x>
     ac4:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <x+0x1>
     ac8:	40 91 b3 03 	lds	r20, 0x03B3	; 0x8003b3 <x_coleta>
     acc:	50 91 b4 03 	lds	r21, 0x03B4	; 0x8003b4 <x_coleta+0x1>
     ad0:	84 1b       	sub	r24, r20
     ad2:	95 0b       	sbc	r25, r21
     ad4:	ac 01       	movw	r20, r24
     ad6:	22 f4       	brpl	.+8      	; 0xae0 <direcoes+0x3a2>
     ad8:	44 27       	eor	r20, r20
     ada:	55 27       	eor	r21, r21
     adc:	48 1b       	sub	r20, r24
     ade:	59 0b       	sbc	r21, r25
     ae0:	42 33       	cpi	r20, 0x32	; 50
     ae2:	51 05       	cpc	r21, r1
     ae4:	cc f0       	brlt	.+50     	; 0xb18 <direcoes+0x3da>
     ae6:	87 e0       	ldi	r24, 0x07	; 7
    estados_1 = 7;
     ae8:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <estados_1>
     aec:	5a d4       	rcall	.+2228   	; 0x13a2 <LCD_Clear>

    LCD_Clear();
     aee:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <x_coleta>
    if (x_coleta < x) {
     af2:	30 91 b4 03 	lds	r19, 0x03B4	; 0x8003b4 <x_coleta+0x1>
     af6:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <x>
     afa:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <x+0x1>
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	20 f4       	brcc	.+8      	; 0xb0c <direcoes+0x3ce>
     b04:	80 e6       	ldi	r24, 0x60	; 96
     b06:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Vire a esquerda");
     b08:	25 d4       	rcall	.+2122   	; 0x1354 <LCD_String>
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <direcoes+0x3d4>
     b0c:	80 e7       	ldi	r24, 0x70	; 112
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	21 d4       	rcall	.+2114   	; 0x1354 <LCD_String>
    } else {
      LCD_String("Vire a direita");
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	ca d6       	rcall	.+3476   	; 0x18aa <Timer1>
     b16:	c0 c0       	rjmp	.+384    	; 0xc98 <direcoes+0x55a>
    }

    Timer1(2);
     b18:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <esq_y_entrega>
     b1c:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <esq_y_entrega+0x1>
  //
  // else if ((abs(esq_x_coleta - x) >= 50) && !pedido_coletado && (abs(y - y_coleta) >= 50)) {
  // estados_1 = 1; //caso esteja perdido, vai ate a esquina mais proxima, e ai cai num caso conhecido
  //}

  else if ((abs(esq_y_entrega - y) <= 30) && pedido_coletado_1 && (abs(x - x_entrega) >= 50)) {
     b20:	82 1b       	sub	r24, r18
     b22:	93 0b       	sbc	r25, r19
     b24:	82 3e       	cpi	r24, 0xE2	; 226
     b26:	4f ef       	ldi	r20, 0xFF	; 255
     b28:	94 07       	cpc	r25, r20
     b2a:	a4 f1       	brlt	.+104    	; 0xb94 <direcoes+0x456>
     b2c:	4f 97       	sbiw	r24, 0x1f	; 31
     b2e:	94 f5       	brge	.+100    	; 0xb94 <direcoes+0x456>
     b30:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <pedido_coletado_1>
     b34:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <pedido_coletado_1+0x1>
     b38:	89 2b       	or	r24, r25
     b3a:	61 f1       	breq	.+88     	; 0xb94 <direcoes+0x456>
     b3c:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <x>
     b40:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <x+0x1>
     b44:	40 91 af 03 	lds	r20, 0x03AF	; 0x8003af <x_entrega>
     b48:	50 91 b0 03 	lds	r21, 0x03B0	; 0x8003b0 <x_entrega+0x1>
     b4c:	84 1b       	sub	r24, r20
     b4e:	95 0b       	sbc	r25, r21
     b50:	ac 01       	movw	r20, r24
     b52:	22 f4       	brpl	.+8      	; 0xb5c <direcoes+0x41e>
     b54:	44 27       	eor	r20, r20
     b56:	55 27       	eor	r21, r21
     b58:	48 1b       	sub	r20, r24
     b5a:	59 0b       	sbc	r21, r25
     b5c:	42 33       	cpi	r20, 0x32	; 50
     b5e:	51 05       	cpc	r21, r1
     b60:	cc f0       	brlt	.+50     	; 0xb94 <direcoes+0x456>
     b62:	85 e0       	ldi	r24, 0x05	; 5
    estados_1 = 5;
     b64:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <estados_1>
     b68:	1c d4       	rcall	.+2104   	; 0x13a2 <LCD_Clear>

    LCD_Clear();
     b6a:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <x_entrega>
    if (x_entrega < x) {
     b6e:	30 91 b0 03 	lds	r19, 0x03B0	; 0x8003b0 <x_entrega+0x1>
     b72:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <x>
     b76:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <x+0x1>
     b7a:	28 17       	cp	r18, r24
     b7c:	39 07       	cpc	r19, r25
     b7e:	20 f4       	brcc	.+8      	; 0xb88 <direcoes+0x44a>
     b80:	80 e6       	ldi	r24, 0x60	; 96
     b82:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Vire a esquerda");
     b84:	e7 d3       	rcall	.+1998   	; 0x1354 <LCD_String>
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <direcoes+0x450>
     b88:	80 e7       	ldi	r24, 0x70	; 112
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	e3 d3       	rcall	.+1990   	; 0x1354 <LCD_String>
    } else {
      LCD_String("Vire a direita");
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	8c d6       	rcall	.+3352   	; 0x18aa <Timer1>
     b92:	82 c0       	rjmp	.+260    	; 0xc98 <direcoes+0x55a>
    }
    Timer1(2);
     b94:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <esq_x_entrega>
     b98:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <esq_x_entrega+0x1>
  } else if ((abs(esq_x_entrega - x) <= 30) && pedido_coletado_1 && (abs(y - y_entrega) >= 50)) {
     b9c:	40 91 b7 03 	lds	r20, 0x03B7	; 0x8003b7 <x>
     ba0:	50 91 b8 03 	lds	r21, 0x03B8	; 0x8003b8 <x+0x1>
     ba4:	84 1b       	sub	r24, r20
     ba6:	95 0b       	sbc	r25, r21
     ba8:	82 3e       	cpi	r24, 0xE2	; 226
     baa:	4f ef       	ldi	r20, 0xFF	; 255
     bac:	94 07       	cpc	r25, r20
     bae:	9c f1       	brlt	.+102    	; 0xc16 <direcoes+0x4d8>
     bb0:	8f 31       	cpi	r24, 0x1F	; 31
     bb2:	91 05       	cpc	r25, r1
     bb4:	84 f5       	brge	.+96     	; 0xc16 <direcoes+0x4d8>
     bb6:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <pedido_coletado_1>
     bba:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <pedido_coletado_1+0x1>
     bbe:	89 2b       	or	r24, r25
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <direcoes+0x486>
     bc2:	6a c0       	rjmp	.+212    	; 0xc98 <direcoes+0x55a>
     bc4:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <y_entrega>
     bc8:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <y_entrega+0x1>
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	c9 01       	movw	r24, r18
     bd2:	99 23       	and	r25, r25
     bd4:	24 f4       	brge	.+8      	; 0xbde <direcoes+0x4a0>
     bd6:	88 27       	eor	r24, r24
     bd8:	99 27       	eor	r25, r25
     bda:	82 1b       	sub	r24, r18
     bdc:	93 0b       	sbc	r25, r19
     bde:	c2 97       	sbiw	r24, 0x32	; 50
     be0:	0c f4       	brge	.+2      	; 0xbe4 <direcoes+0x4a6>
     be2:	5a c0       	rjmp	.+180    	; 0xc98 <direcoes+0x55a>
     be4:	86 e0       	ldi	r24, 0x06	; 6
     be6:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <estados_1>
    estados_1 = 6;
     bea:	db d3       	rcall	.+1974   	; 0x13a2 <LCD_Clear>
     bec:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <y_entrega>

    LCD_Clear();
     bf0:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <y_entrega+0x1>
    if (y_entrega > y) {
     bf4:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
     bf8:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
     bfc:	82 17       	cp	r24, r18
     bfe:	93 07       	cpc	r25, r19
     c00:	20 f4       	brcc	.+8      	; 0xc0a <direcoes+0x4cc>
     c02:	80 e6       	ldi	r24, 0x60	; 96
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	a6 d3       	rcall	.+1868   	; 0x1354 <LCD_String>
      LCD_String("Vire a esquerda");
     c08:	03 c0       	rjmp	.+6      	; 0xc10 <direcoes+0x4d2>
     c0a:	80 e7       	ldi	r24, 0x70	; 112
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	a2 d3       	rcall	.+1860   	; 0x1354 <LCD_String>
    } else {
      LCD_String("Vire a direita");
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	4b d6       	rcall	.+3222   	; 0x18aa <Timer1>
     c14:	41 c0       	rjmp	.+130    	; 0xc98 <direcoes+0x55a>
     c16:	ac 01       	movw	r20, r24
    }
    Timer1(2);
     c18:	99 23       	and	r25, r25
     c1a:	24 f4       	brge	.+8      	; 0xc24 <direcoes+0x4e6>
     c1c:	44 27       	eor	r20, r20
     c1e:	55 27       	eor	r21, r21
  }

  else if ((abs(esq_x_entrega - x) >= 50) && pedido_coletado_1 && (abs(y - y_entrega) >= 50)) {
     c20:	48 1b       	sub	r20, r24
     c22:	59 0b       	sbc	r21, r25
     c24:	42 33       	cpi	r20, 0x32	; 50
     c26:	51 05       	cpc	r21, r1
     c28:	bc f1       	brlt	.+110    	; 0xc98 <direcoes+0x55a>
     c2a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <pedido_coletado_1>
     c2e:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <pedido_coletado_1+0x1>
     c32:	89 2b       	or	r24, r25
     c34:	89 f1       	breq	.+98     	; 0xc98 <direcoes+0x55a>
     c36:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <y_entrega>
     c3a:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <y_entrega+0x1>
     c3e:	28 1b       	sub	r18, r24
     c40:	39 0b       	sbc	r19, r25
     c42:	c9 01       	movw	r24, r18
     c44:	99 23       	and	r25, r25
     c46:	24 f4       	brge	.+8      	; 0xc50 <direcoes+0x512>
     c48:	88 27       	eor	r24, r24
     c4a:	99 27       	eor	r25, r25
     c4c:	82 1b       	sub	r24, r18
     c4e:	93 0b       	sbc	r25, r19
     c50:	c2 97       	sbiw	r24, 0x32	; 50
    estados_1 = 3;
     c52:	14 f1       	brlt	.+68     	; 0xc98 <direcoes+0x55a>
     c54:	83 e0       	ldi	r24, 0x03	; 3

    if (entra_uma_vez_2) {
     c56:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <estados_1>
     c5a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <entra_uma_vez_2>
      entra_uma_vez_2 = 0;
     c5e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <entra_uma_vez_2+0x1>
     c62:	89 2b       	or	r24, r25
     c64:	c9 f0       	breq	.+50     	; 0xc98 <direcoes+0x55a>
      LCD_Clear();
     c66:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <entra_uma_vez_2+0x1>
      if (y_entrega > y) {
     c6a:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <entra_uma_vez_2>
     c6e:	99 d3       	rcall	.+1842   	; 0x13a2 <LCD_Clear>
     c70:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <y_entrega>
     c74:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <y_entrega+0x1>
     c78:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
        LCD_String("Vire a esquerda");
     c7c:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
     c80:	82 17       	cp	r24, r18
     c82:	93 07       	cpc	r25, r19
      } else {
        LCD_String("Vire a direita");
     c84:	20 f4       	brcc	.+8      	; 0xc8e <direcoes+0x550>
     c86:	80 e6       	ldi	r24, 0x60	; 96
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	64 d3       	rcall	.+1736   	; 0x1354 <LCD_String>
      }
      Timer1(2);
     c8c:	03 c0       	rjmp	.+6      	; 0xc94 <direcoes+0x556>
     c8e:	80 e7       	ldi	r24, 0x70	; 112
    }
  }

  if (pedido_coletado) {
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	60 d3       	rcall	.+1728   	; 0x1354 <LCD_String>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	09 d6       	rcall	.+3090   	; 0x18aa <Timer1>
     c98:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <pedido_coletado>
    pedido_coletado = 0;
     c9c:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <pedido_coletado+0x1>
    comeco = get_elapsed_time_ms();
     ca0:	89 2b       	or	r24, r25
     ca2:	a1 f0       	breq	.+40     	; 0xccc <direcoes+0x58e>
     ca4:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <pedido_coletado+0x1>
     ca8:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <pedido_coletado>
     cac:	44 d6       	rcall	.+3208   	; 0x1936 <get_elapsed_time_ms>

    LCD_Clear();
     cae:	3c d7       	rcall	.+3704   	; 0x1b28 <__fixsfsi>
     cb0:	70 93 ba 03 	sts	0x03BA, r23	; 0x8003ba <comeco+0x1>
    LCD_String("Pedido coletado!");
     cb4:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <comeco>
    enviamov(1);
     cb8:	74 d3       	rcall	.+1768   	; 0x13a2 <LCD_Clear>
     cba:	8f e7       	ldi	r24, 0x7F	; 127
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	4a d3       	rcall	.+1684   	; 0x1354 <LCD_String>
    Timer1(1);
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	cd db       	rcall	.-2150   	; 0x460 <enviamov>
     cc6:	81 e0       	ldi	r24, 0x01	; 1
  } else if (pedido_entregue) {
     cc8:	f0 d5       	rcall	.+3040   	; 0x18aa <Timer1>
     cca:	41 c0       	rjmp	.+130    	; 0xd4e <direcoes+0x610>
     ccc:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <pedido_entregue>
     cd0:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <pedido_entregue+0x1>
    pedido_entregue = 0;
     cd4:	89 2b       	or	r24, r25
     cd6:	09 f4       	brne	.+2      	; 0xcda <direcoes+0x59c>
     cd8:	3a c0       	rjmp	.+116    	; 0xd4e <direcoes+0x610>

    pos_x_y();
     cda:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <pedido_entregue+0x1>
    char tarifa_f[8];
    float tempo_corrida_ms = get_elapsed_time_ms() - comeco;
     cde:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <pedido_entregue>
     ce2:	ed db       	rcall	.-2086   	; 0x4be <pos_x_y>
     ce4:	28 d6       	rcall	.+3152   	; 0x1936 <get_elapsed_time_ms>
    float tempo_corrida = tempo_corrida_ms / 1000.0f;
     ce6:	6b 01       	movw	r12, r22
     ce8:	7c 01       	movw	r14, r24
     cea:	60 91 b9 03 	lds	r22, 0x03B9	; 0x8003b9 <comeco>
     cee:	70 91 ba 03 	lds	r23, 0x03BA	; 0x8003ba <comeco+0x1>
     cf2:	07 2e       	mov	r0, r23
     cf4:	00 0c       	add	r0, r0
     cf6:	88 0b       	sbc	r24, r24
     cf8:	99 0b       	sbc	r25, r25
     cfa:	49 d7       	rcall	.+3730   	; 0x1b8e <__floatsisf>
     cfc:	9b 01       	movw	r18, r22
     cfe:	ac 01       	movw	r20, r24
     d00:	c7 01       	movw	r24, r14
     d02:	b6 01       	movw	r22, r12
     d04:	40 d6       	rcall	.+3200   	; 0x1986 <__subsf3>
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	4a e7       	ldi	r20, 0x7A	; 122
     d0c:	54 e4       	ldi	r21, 0x44	; 68
     d0e:	a4 d6       	rcall	.+3400   	; 0x1a58 <__divsf3>
     d10:	6b 01       	movw	r12, r22
     d12:	7c 01       	movw	r14, r24
     d14:	46 d3       	rcall	.+1676   	; 0x13a2 <LCD_Clear>

    LCD_Clear();
     d16:	80 e9       	ldi	r24, 0x90	; 144
     d18:	92 e0       	ldi	r25, 0x02	; 2
    LCD_String("Pedido entregue!");
     d1a:	1c d3       	rcall	.+1592   	; 0x1354 <LCD_String>
     d1c:	b7 01       	movw	r22, r14
     d1e:	a6 01       	movw	r20, r12
     d20:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <dist_total>
    float tarifa_final_1 = tarifa_final(dist_total, tempo_corrida);
     d24:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <dist_total+0x1>
     d28:	9b d4       	rcall	.+2358   	; 0x1660 <tarifa_final>
     d2a:	6b 01       	movw	r12, r22
     d2c:	7c 01       	movw	r14, r24
     d2e:	80 ec       	ldi	r24, 0xC0	; 192
     d30:	e7 d2       	rcall	.+1486   	; 0x1300 <LCD_Command>
     d32:	8e 01       	movw	r16, r28
     d34:	0a 5f       	subi	r16, 0xFA	; 250
    LCD_Command(0xC0);
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	22 e0       	ldi	r18, 0x02	; 2
     d3a:	45 e0       	ldi	r20, 0x05	; 5
    dtostrf(tarifa_final_1, 5, 2, tarifa_f);
     d3c:	c7 01       	movw	r24, r14
     d3e:	b6 01       	movw	r22, r12
     d40:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <dtostrf>
     d44:	81 ea       	ldi	r24, 0xA1	; 161
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	05 d3       	rcall	.+1546   	; 0x1354 <LCD_String>
     d4a:	c8 01       	movw	r24, r16
     d4c:	03 d3       	rcall	.+1542   	; 0x1354 <LCD_String>
    LCD_String("Recebido:R$");
     d4e:	2d 96       	adiw	r28, 0x0d	; 13
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
    LCD_String(tarifa_f);
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	df 91       	pop	r29
  }
}
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	08 95       	ret

00000d6c <valida_coleta>:
     d6c:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <aceita_pedido>
     d70:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <aceita_pedido+0x1>
     d74:	89 2b       	or	r24, r25
     d76:	a1 f0       	breq	.+40     	; 0xda0 <valida_coleta+0x34>
     d78:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <aceita_pedido+0x1>

void valida_coleta() {
  if (aceita_pedido) {
    aceita_pedido = 0;
     d7c:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <aceita_pedido>

    LCD_Clear();
     d80:	10 d3       	rcall	.+1568   	; 0x13a2 <LCD_Clear>
    LCD_String("Realize a coleta");
     d82:	8d ea       	ldi	r24, 0xAD	; 173
     d84:	92 e0       	ldi	r25, 0x02	; 2

    pos_x_y();
     d86:	e6 d2       	rcall	.+1484   	; 0x1354 <LCD_String>

    Timer1(1);
     d88:	9a db       	rcall	.-2252   	; 0x4be <pos_x_y>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8e d5       	rcall	.+2844   	; 0x18aa <Timer1>
    direcoes(y, y_coleta);
     d8e:	60 91 b1 03 	lds	r22, 0x03B1	; 0x8003b1 <y_coleta>
     d92:	70 91 b2 03 	lds	r23, 0x03B2	; 0x8003b2 <y_coleta+0x1>
     d96:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
     d9a:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
     d9e:	cf cc       	rjmp	.-1634   	; 0x73e <direcoes>
     da0:	08 95       	ret

00000da2 <negar_coleta>:
  }
}

void negar_coleta() {
  if (aceita_pedido) {
     da2:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <aceita_pedido>
     da6:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <aceita_pedido+0x1>
     daa:	89 2b       	or	r24, r25
     dac:	51 f0       	breq	.+20     	; 0xdc2 <negar_coleta+0x20>
    LCD_Clear();
     dae:	f9 d2       	rcall	.+1522   	; 0x13a2 <LCD_Clear>
    LCD_String("Sem sucesso");
     db0:	8e eb       	ldi	r24, 0xBE	; 190
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	cf d2       	rcall	.+1438   	; 0x1354 <LCD_String>
    Timer1(2);
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	78 d5       	rcall	.+2800   	; 0x18aa <Timer1>
    LCD_Clear();
     dba:	f3 d2       	rcall	.+1510   	; 0x13a2 <LCD_Clear>
    LCD_String("Aguarde...");
     dbc:	8a ec       	ldi	r24, 0xCA	; 202
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	c9 c2       	rjmp	.+1426   	; 0x1354 <LCD_String>
     dc2:	08 95       	ret

00000dc4 <cliente_novo>:
     dc4:	0f 93       	push	r16
  }
}

void cliente_novo() {
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	28 97       	sbiw	r28, 0x08	; 8
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
  char tarifa[8];

  envia2bytes('U', 'E');
     ddc:	65 e4       	ldi	r22, 0x45	; 69
     dde:	85 e5       	ldi	r24, 0x55	; 85
     de0:	07 db       	rcall	.-2546   	; 0x3f0 <envia2bytes>
  pos_x_y();
     de2:	6d db       	rcall	.-2342   	; 0x4be <pos_x_y>
  LCD_Clear();
     de4:	de d2       	rcall	.+1468   	; 0x13a2 <LCD_Clear>

  LCD_String("Novo pedido: ");
     de6:	85 ed       	ldi	r24, 0xD5	; 213
     de8:	92 e0       	ldi	r25, 0x02	; 2
  Timer1(2);
     dea:	b4 d2       	rcall	.+1384   	; 0x1354 <LCD_String>
     dec:	82 e0       	ldi	r24, 0x02	; 2
  LCD_Clear();
     dee:	5d d5       	rcall	.+2746   	; 0x18aa <Timer1>
     df0:	d8 d2       	rcall	.+1456   	; 0x13a2 <LCD_Clear>
  LCD_String("R$ ");
     df2:	83 ee       	ldi	r24, 0xE3	; 227
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	ae d2       	rcall	.+1372   	; 0x1354 <LCD_String>
     df8:	20 91 af 03 	lds	r18, 0x03AF	; 0x8003af <x_entrega>
  dist_total = abs(x_entrega - x_coleta) + abs(y_entrega - y_coleta);
     dfc:	30 91 b0 03 	lds	r19, 0x03B0	; 0x8003b0 <x_entrega+0x1>
     e00:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <x_coleta>
     e04:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <x_coleta+0x1>
     e08:	28 1b       	sub	r18, r24
     e0a:	39 0b       	sbc	r19, r25
     e0c:	a9 01       	movw	r20, r18
     e0e:	22 f4       	brpl	.+8      	; 0xe18 <cliente_novo+0x54>
     e10:	44 27       	eor	r20, r20
     e12:	55 27       	eor	r21, r21
     e14:	42 1b       	sub	r20, r18
     e16:	53 0b       	sbc	r21, r19
     e18:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <y_entrega>
     e1c:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <y_entrega+0x1>
     e20:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <y_coleta>
     e24:	90 91 b2 03 	lds	r25, 0x03B2	; 0x8003b2 <y_coleta+0x1>
     e28:	28 1b       	sub	r18, r24
     e2a:	39 0b       	sbc	r19, r25
     e2c:	c9 01       	movw	r24, r18
     e2e:	99 23       	and	r25, r25
     e30:	24 f4       	brge	.+8      	; 0xe3a <cliente_novo+0x76>
     e32:	88 27       	eor	r24, r24
     e34:	99 27       	eor	r25, r25
     e36:	82 1b       	sub	r24, r18
     e38:	93 0b       	sbc	r25, r19
     e3a:	84 0f       	add	r24, r20
     e3c:	95 1f       	adc	r25, r21
     e3e:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <dist_total+0x1>
     e42:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <dist_total>
  float tarifa_1 = tarifa_final(dist_total, 100);
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	68 ec       	ldi	r22, 0xC8	; 200
     e4c:	72 e4       	ldi	r23, 0x42	; 66
     e4e:	08 d4       	rcall	.+2064   	; 0x1660 <tarifa_final>
     e50:	8e 01       	movw	r16, r28
  dtostrf(tarifa_1, 5, 2, tarifa);
     e52:	0f 5f       	subi	r16, 0xFF	; 255
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	22 e0       	ldi	r18, 0x02	; 2
     e58:	45 e0       	ldi	r20, 0x05	; 5
     e5a:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <dtostrf>
  // sprintf(tarifa, "%d", tarifa_1);
  LCD_String(tarifa);
     e5e:	c8 01       	movw	r24, r16
  LCD_Command(0xC0);
     e60:	79 d2       	rcall	.+1266   	; 0x1354 <LCD_String>
     e62:	80 ec       	ldi	r24, 0xC0	; 192
     e64:	4d d2       	rcall	.+1178   	; 0x1300 <LCD_Command>
  LCD_String("Aceitar 1-S  2-N");
     e66:	87 ee       	ldi	r24, 0xE7	; 231
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	74 d2       	rcall	.+1256   	; 0x1354 <LCD_String>
     e6c:	01 e0       	ldi	r16, 0x01	; 1
  while ((tecla_pressionada != '1') && (tecla_pressionada != '2')) {
    tecla_pressionada = tecla();

    if (tecla_pressionada == '1') {
      envia3bytes('U', 'A', id_cliente);
      aceita_pedido = 1;
     e6e:	10 e0       	ldi	r17, 0x00	; 0
  // sprintf(tarifa, "%d", tarifa_1);
  LCD_String(tarifa);
  LCD_Command(0xC0);
  LCD_String("Aceitar 1-S  2-N");

  while ((tecla_pressionada != '1') && (tecla_pressionada != '2')) {
     e70:	1b c0       	rjmp	.+54     	; 0xea8 <cliente_novo+0xe4>
    tecla_pressionada = tecla();
     e72:	84 d4       	rcall	.+2312   	; 0x177c <tecla>
     e74:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <tecla_pressionada>
     e78:	81 33       	cpi	r24, 0x31	; 49

    if (tecla_pressionada == '1') {
     e7a:	51 f4       	brne	.+20     	; 0xe90 <cliente_novo+0xcc>
     e7c:	40 91 bc 03 	lds	r20, 0x03BC	; 0x8003bc <id_cliente>
      envia3bytes('U', 'A', id_cliente);
     e80:	61 e4       	ldi	r22, 0x41	; 65
     e82:	85 e5       	ldi	r24, 0x55	; 85
     e84:	cc da       	rcall	.-2664   	; 0x41e <envia3bytes>
      aceita_pedido = 1;
     e86:	10 93 83 03 	sts	0x0383, r17	; 0x800383 <aceita_pedido+0x1>
     e8a:	00 93 82 03 	sts	0x0382, r16	; 0x800382 <aceita_pedido>
    } else if (tecla_pressionada == '2') {
     e8e:	0c c0       	rjmp	.+24     	; 0xea8 <cliente_novo+0xe4>
      LCD_Clear();
     e90:	82 33       	cpi	r24, 0x32	; 50
     e92:	51 f4       	brne	.+20     	; 0xea8 <cliente_novo+0xe4>
      LCD_String("Pedido rejeitado");
     e94:	86 d2       	rcall	.+1292   	; 0x13a2 <LCD_Clear>
     e96:	88 ef       	ldi	r24, 0xF8	; 248
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	5c d2       	rcall	.+1208   	; 0x1354 <LCD_String>
      Timer1(2);
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	05 d5       	rcall	.+2570   	; 0x18aa <Timer1>
     ea0:	80 d2       	rcall	.+1280   	; 0x13a2 <LCD_Clear>
      LCD_Clear();
     ea2:	8a ec       	ldi	r24, 0xCA	; 202
     ea4:	92 e0       	ldi	r25, 0x02	; 2
      LCD_String("Aguarde...");
     ea6:	56 d2       	rcall	.+1196   	; 0x1354 <LCD_String>
     ea8:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <tecla_pressionada>
     eac:	81 53       	subi	r24, 0x31	; 49
  // sprintf(tarifa, "%d", tarifa_1);
  LCD_String(tarifa);
  LCD_Command(0xC0);
  LCD_String("Aceitar 1-S  2-N");

  while ((tecla_pressionada != '1') && (tecla_pressionada != '2')) {
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	00 f7       	brcc	.-64     	; 0xe72 <cliente_novo+0xae>
     eb2:	28 96       	adiw	r28, 0x08	; 8
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
      Timer1(2);
      LCD_Clear();
      LCD_String("Aguarde...");
    }
  }
}
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <__vector_25>:
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63

// ISR de recep��o serial
ISR(USART0_RX_vect) {
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	0b b6       	in	r0, 0x3b	; 59
     ed4:	0f 92       	push	r0
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
  unsigned char dado = UDR0;
     eee:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

  switch (estado) {
     ef2:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <estado>
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	87 30       	cpi	r24, 0x07	; 7
     efa:	91 05       	cpc	r25, r1
     efc:	08 f0       	brcs	.+2      	; 0xf00 <__vector_25+0x38>
     efe:	db c0       	rjmp	.+438    	; 0x10b6 <__vector_25+0x1ee>
     f00:	fc 01       	movw	r30, r24
     f02:	88 27       	eor	r24, r24
     f04:	e6 58       	subi	r30, 0x86	; 134
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	af c7       	rjmp	.+3934   	; 0x1e6a <__tablejump2__>
  case 0: // Espera 'S'
    if (dado == 'S') {
     f0c:	23 35       	cpi	r18, 0x53	; 83
     f0e:	09 f0       	breq	.+2      	; 0xf12 <__vector_25+0x4a>
     f10:	d4 c0       	rjmp	.+424    	; 0x10ba <__vector_25+0x1f2>
      estado = 1;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <estado>
     f18:	d0 c0       	rjmp	.+416    	; 0x10ba <__vector_25+0x1f2>
    }
    break;

  case 1: // Espera 'P'
    if (dado == 'P') {
     f1a:	20 35       	cpi	r18, 0x50	; 80
     f1c:	81 f4       	brne	.+32     	; 0xf3e <__vector_25+0x76>
      pedido_finalizado = 0;
     f1e:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <pedido_finalizado+0x1>
     f22:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <pedido_finalizado>
      recebe_pedido = 1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <recebe_pedido+0x1>
     f2e:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <recebe_pedido>
      estado = 2;
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <estado>
      contador = 0;
     f38:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <contador>
     f3c:	be c0       	rjmp	.+380    	; 0x10ba <__vector_25+0x1f2>
    } else if (dado == 'H') {
     f3e:	28 34       	cpi	r18, 0x48	; 72
     f40:	31 f4       	brne	.+12     	; 0xf4e <__vector_25+0x86>
      estado = 3;
     f42:	83 e0       	ldi	r24, 0x03	; 3
     f44:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <estado>
      contador_d = 0;
     f48:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <contador_d>
     f4c:	b6 c0       	rjmp	.+364    	; 0x10ba <__vector_25+0x1f2>
    } else if (dado == 'E') {
     f4e:	25 34       	cpi	r18, 0x45	; 69
     f50:	41 f4       	brne	.+16     	; 0xf62 <__vector_25+0x9a>
      estado = 4;
     f52:	84 e0       	ldi	r24, 0x04	; 4
     f54:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <estado>
      contador_c = 0;
     f58:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <contador_c>
      contador_e = 0;
     f5c:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <contador_e>
     f60:	ac c0       	rjmp	.+344    	; 0x10ba <__vector_25+0x1f2>
    } else if (dado == 'A') {
     f62:	21 34       	cpi	r18, 0x41	; 65
     f64:	21 f4       	brne	.+8      	; 0xf6e <__vector_25+0xa6>
      estado = 0;
     f66:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <estado>
      valida_coleta();
     f6a:	00 df       	rcall	.-512    	; 0xd6c <valida_coleta>
     f6c:	a6 c0       	rjmp	.+332    	; 0x10ba <__vector_25+0x1f2>
    } else if (dado == 'N') {
     f6e:	2e 34       	cpi	r18, 0x4E	; 78
     f70:	21 f4       	brne	.+8      	; 0xf7a <__vector_25+0xb2>
      estado = 0;
     f72:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <estado>
      negar_coleta();
     f76:	15 df       	rcall	.-470    	; 0xda2 <negar_coleta>
     f78:	a0 c0       	rjmp	.+320    	; 0x10ba <__vector_25+0x1f2>
    } else if (dado == 'M') {
     f7a:	2d 34       	cpi	r18, 0x4D	; 77
     f7c:	49 f4       	brne	.+18     	; 0xf90 <__vector_25+0xc8>
      estado = 0;
     f7e:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <estado>
      valida_posicao = 1;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__data_end+0x1>
     f8a:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__data_end>
     f8e:	95 c0       	rjmp	.+298    	; 0x10ba <__vector_25+0x1f2>
    } else if (dado == 'I') {
     f90:	29 34       	cpi	r18, 0x49	; 73
     f92:	49 f4       	brne	.+18     	; 0xfa6 <__vector_25+0xde>
      estado = 0;
     f94:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <estado>
      pedido_coletado_1 = 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <pedido_coletado_1+0x1>
     fa0:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <pedido_coletado_1>
     fa4:	8a c0       	rjmp	.+276    	; 0x10ba <__vector_25+0x1f2>
    } else if (dado == 'F') {
     fa6:	26 34       	cpi	r18, 0x46	; 70
     fa8:	79 f4       	brne	.+30     	; 0xfc8 <__vector_25+0x100>
      pedido_finalizado = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <pedido_finalizado+0x1>
     fb2:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <pedido_finalizado>
      entra_uma_vez_1 = 1;
     fb6:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <entra_uma_vez_1+0x1>
     fba:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <entra_uma_vez_1>
      entra_uma_vez_2 = 1;
     fbe:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <entra_uma_vez_2+0x1>
     fc2:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <entra_uma_vez_2>
     fc6:	79 c0       	rjmp	.+242    	; 0x10ba <__vector_25+0x1f2>
    } else {
      estado = 0;
     fc8:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <estado>
     fcc:	76 c0       	rjmp	.+236    	; 0x10ba <__vector_25+0x1f2>
    }
    break;

  case 2: // Lendo 4 bytes de dados
    if (contador < 2) {
     fce:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <contador>
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	30 f4       	brcc	.+12     	; 0xfe2 <__vector_25+0x11a>
      posx_entregador[contador] = dado;
     fd6:	e8 2f       	mov	r30, r24
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	ee 52       	subi	r30, 0x2E	; 46
     fdc:	fc 4f       	sbci	r31, 0xFC	; 252
     fde:	20 83       	st	Z, r18
     fe0:	05 c0       	rjmp	.+10     	; 0xfec <__vector_25+0x124>
    } else {
      posy_entregador[contador - 2] = dado;
     fe2:	e8 2f       	mov	r30, r24
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	ee 51       	subi	r30, 0x1E	; 30
     fe8:	fc 4f       	sbci	r31, 0xFC	; 252
     fea:	20 83       	st	Z, r18
    }
    contador++;
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <contador>

    if (contador >= 4) {
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <__vector_25+0x130>
     ff6:	61 c0       	rjmp	.+194    	; 0x10ba <__vector_25+0x1f2>
      msg_pronta = 1;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <msg_pronta+0x1>
    1000:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <msg_pronta>
      estado = 0; // volta a procurar nova mensagem
    1004:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <estado>
    1008:	58 c0       	rjmp	.+176    	; 0x10ba <__vector_25+0x1f2>
    }
    break;

  case 3: // Lendo data e hora
    if (contador_d < 2) {
    100a:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <contador_d>
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	30 f4       	brcc	.+12     	; 0x101e <__vector_25+0x156>
      data[contador_d] = dado;
    1012:	e8 2f       	mov	r30, r24
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	e5 52       	subi	r30, 0x25	; 37
    1018:	fc 4f       	sbci	r31, 0xFC	; 252
    101a:	20 83       	st	Z, r18
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <__vector_25+0x160>
    } else {
      hora[contador_d - 2] = dado;
    101e:	e8 2f       	mov	r30, r24
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	e2 53       	subi	r30, 0x32	; 50
    1024:	fc 4f       	sbci	r31, 0xFC	; 252
    1026:	20 83       	st	Z, r18
    }
    contador_d++;
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <contador_d>

    if (contador_d >= 4) {
    102e:	84 30       	cpi	r24, 0x04	; 4
    1030:	08 f4       	brcc	.+2      	; 0x1034 <__vector_25+0x16c>
    1032:	43 c0       	rjmp	.+134    	; 0x10ba <__vector_25+0x1f2>
      msg_data_hora = 1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <msg_data_hora+0x1>
    103c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <msg_data_hora>
      estado = 0; // volta a procurar nova mensagem
    1040:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <estado>
    1044:	3a c0       	rjmp	.+116    	; 0x10ba <__vector_25+0x1f2>
    }
    break;

  case 4: // Lendo id
    novo_cliente = 1;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <novo_cliente>
    id_cliente = dado;
    104c:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <id_cliente>
    estado = 5;
    1050:	85 e0       	ldi	r24, 0x05	; 5
    1052:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <estado>
    break;
    1056:	31 c0       	rjmp	.+98     	; 0x10ba <__vector_25+0x1f2>

  case 5: // Lendo posx, posy entrega
    if (contador_e < 2) {
    1058:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <contador_e>
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	30 f4       	brcc	.+12     	; 0x106c <__vector_25+0x1a4>
      posx_entrega[contador_e] = dado;
    1060:	e8 2f       	mov	r30, r24
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	e7 52       	subi	r30, 0x27	; 39
    1066:	fc 4f       	sbci	r31, 0xFC	; 252
    1068:	20 83       	st	Z, r18
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <__vector_25+0x1ae>
    } else {
      posy_entrega[contador_e - 2] = dado;
    106c:	e8 2f       	mov	r30, r24
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	e4 53       	subi	r30, 0x34	; 52
    1072:	fc 4f       	sbci	r31, 0xFC	; 252
    1074:	20 83       	st	Z, r18
    }
    contador_e++;
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <contador_e>

    if (contador_e >= 4) {
    107c:	84 30       	cpi	r24, 0x04	; 4
    107e:	e8 f0       	brcs	.+58     	; 0x10ba <__vector_25+0x1f2>
      estado = 6; // volta a procurar nova mensagem
    1080:	86 e0       	ldi	r24, 0x06	; 6
    1082:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <estado>
    1086:	19 c0       	rjmp	.+50     	; 0x10ba <__vector_25+0x1f2>
    }
    break;

  case 6: // Lendo posx, posy coleta
    if (contador_c < 2) {
    1088:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <contador_c>
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	30 f4       	brcc	.+12     	; 0x109c <__vector_25+0x1d4>
      posx_coleta[contador_c] = dado;
    1090:	e8 2f       	mov	r30, r24
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	e1 52       	subi	r30, 0x21	; 33
    1096:	fc 4f       	sbci	r31, 0xFC	; 252
    1098:	20 83       	st	Z, r18
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <__vector_25+0x1de>
    } else {
      posy_coleta[contador_c - 2] = dado;
    109c:	e8 2f       	mov	r30, r24
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	e5 52       	subi	r30, 0x25	; 37
    10a2:	fc 4f       	sbci	r31, 0xFC	; 252
    10a4:	20 83       	st	Z, r18
    }
    contador_c++;
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <contador_c>

    if (contador_c >= 4) {
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	28 f0       	brcs	.+10     	; 0x10ba <__vector_25+0x1f2>
      estado = 0;
    10b0:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <estado>
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <__vector_25+0x1f2>
    }
    break;

  default:
    estado = 0;
    10b6:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <estado>
  }
}
    10ba:	ff 91       	pop	r31
    10bc:	ef 91       	pop	r30
    10be:	bf 91       	pop	r27
    10c0:	af 91       	pop	r26
    10c2:	9f 91       	pop	r25
    10c4:	8f 91       	pop	r24
    10c6:	7f 91       	pop	r23
    10c8:	6f 91       	pop	r22
    10ca:	5f 91       	pop	r21
    10cc:	4f 91       	pop	r20
    10ce:	3f 91       	pop	r19
    10d0:	2f 91       	pop	r18
    10d2:	0f 90       	pop	r0
    10d4:	0b be       	out	0x3b, r0	; 59
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <operacao_loop>:

enum estado operacao_loop() {
    10e0:	7f 92       	push	r7
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	2a 97       	sbiw	r28, 0x0a	; 10
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
  char texto_1[10]; // buffer para armazenar o n�mero convertido
  enum estado estadoAtual = operacao;

  uart_init();
    110a:	cd d9       	rcall	.-3174   	; 0x4a6 <uart_init>
      msg_data_hora = 0;

      envia2bytes('U', 'H');

      LCD_Command(0xC0);
      sprintf(texto_1, "%d", data[0]);
    110c:	0f 2e       	mov	r0, r31
    110e:	fb ed       	ldi	r31, 0xDB	; 219
    1110:	af 2e       	mov	r10, r31
    1112:	f3 e0       	ldi	r31, 0x03	; 3
    1114:	bf 2e       	mov	r11, r31
    1116:	f0 2d       	mov	r31, r0
    1118:	0f 2e       	mov	r0, r31
    111a:	fb e5       	ldi	r31, 0x5B	; 91
    111c:	ef 2e       	mov	r14, r31
    111e:	f2 e0       	ldi	r31, 0x02	; 2
    1120:	ff 2e       	mov	r15, r31
    1122:	f0 2d       	mov	r31, r0
    1124:	8e 01       	movw	r16, r28
    1126:	0f 5f       	subi	r16, 0xFF	; 255
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
      LCD_String(texto_1);
      LCD_String("/");
      sprintf(texto_1, "%d", data[1]);
      LCD_String(texto_1);
      LCD_String("   ");
      sprintf(texto_1, "%d", hora[0]);
    112a:	0f 2e       	mov	r0, r31
    112c:	f0 ed       	ldi	r31, 0xD0	; 208
    112e:	cf 2e       	mov	r12, r31
    1130:	f3 e0       	ldi	r31, 0x03	; 3
    1132:	df 2e       	mov	r13, r31
    1134:	f0 2d       	mov	r31, r0
        enviamov(3);
        orientacao_motoqueiro = 'L';
        break;
      case '4':
        enviamov(4);
        orientacao_motoqueiro = 'O';
    1136:	0f 2e       	mov	r0, r31
    1138:	ff e4       	ldi	r31, 0x4F	; 79
    113a:	7f 2e       	mov	r7, r31
    113c:	f0 2d       	mov	r31, r0
      case '5':
        enviamov(1);
        break;
      case '6':
        enviamov(3);
        orientacao_motoqueiro = 'L';
    113e:	0f 2e       	mov	r0, r31
    1140:	fc e4       	ldi	r31, 0x4C	; 76
    1142:	8f 2e       	mov	r8, r31
    1144:	f0 2d       	mov	r31, r0
      tecla_pressionada = tecla();

      switch (tecla_pressionada) {
      case '2':
        enviamov(2);
        orientacao_motoqueiro = 'N';
    1146:	0f 2e       	mov	r0, r31
    1148:	fe e4       	ldi	r31, 0x4E	; 78
    114a:	9f 2e       	mov	r9, r31
    114c:	f0 2d       	mov	r31, r0

  uart_init();

  while (1) {

    if (novo_cliente) {
    114e:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <novo_cliente>
    1152:	88 23       	and	r24, r24
    1154:	19 f0       	breq	.+6      	; 0x115c <operacao_loop+0x7c>
      novo_cliente = 0;
    1156:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <novo_cliente>
      cliente_novo();
    115a:	34 de       	rcall	.-920    	; 0xdc4 <cliente_novo>
    }

    if (msg_pronta) {
    115c:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <msg_pronta>
    1160:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <msg_pronta+0x1>
    1164:	89 2b       	or	r24, r25
    1166:	c9 f1       	breq	.+114    	; 0x11da <operacao_loop+0xfa>
      msg_pronta = 0;
    1168:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <msg_pronta+0x1>
    116c:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <msg_pronta>

      envia2bytes('U', 'P');
    1170:	60 e5       	ldi	r22, 0x50	; 80
    1172:	85 e5       	ldi	r24, 0x55	; 85

      pos_x_y();
    1174:	3d d9       	rcall	.-3462   	; 0x3f0 <envia2bytes>
    1176:	a3 d9       	rcall	.-3258   	; 0x4be <pos_x_y>

      if (!pedido_coletado && !pedido_finalizado) {
    1178:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <pedido_coletado>
    117c:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <pedido_coletado+0x1>
    1180:	89 2b       	or	r24, r25
    1182:	81 f4       	brne	.+32     	; 0x11a4 <operacao_loop+0xc4>
    1184:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <pedido_finalizado>
    1188:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <pedido_finalizado+0x1>
    118c:	89 2b       	or	r24, r25
    118e:	51 f4       	brne	.+20     	; 0x11a4 <operacao_loop+0xc4>
        direcoes(y, y_coleta);
    1190:	60 91 b1 03 	lds	r22, 0x03B1	; 0x8003b1 <y_coleta>
    1194:	70 91 b2 03 	lds	r23, 0x03B2	; 0x8003b2 <y_coleta+0x1>
    1198:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
    119c:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
    11a0:	ce da       	rcall	.-2660   	; 0x73e <direcoes>
    11a2:	1b c0       	rjmp	.+54     	; 0x11da <operacao_loop+0xfa>
      } else if (!entra_uma_vez_1 && !pedido_entregue && !pedido_finalizado) {
    11a4:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <entra_uma_vez_1>
    11a8:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <entra_uma_vez_1+0x1>
    11ac:	89 2b       	or	r24, r25
    11ae:	a9 f4       	brne	.+42     	; 0x11da <operacao_loop+0xfa>
    11b0:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <pedido_entregue>
    11b4:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <pedido_entregue+0x1>
    11b8:	89 2b       	or	r24, r25
    11ba:	79 f4       	brne	.+30     	; 0x11da <operacao_loop+0xfa>
    11bc:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <pedido_finalizado>
    11c0:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <pedido_finalizado+0x1>
    11c4:	89 2b       	or	r24, r25
    11c6:	49 f4       	brne	.+18     	; 0x11da <operacao_loop+0xfa>
        direcoes(y, y_entrega);
    11c8:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <y_entrega>
    11cc:	70 91 ae 03 	lds	r23, 0x03AE	; 0x8003ae <y_entrega+0x1>
    11d0:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <y>
    11d4:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <y+0x1>
    11d8:	b2 da       	rcall	.-2716   	; 0x73e <direcoes>
      }
    }

    if (msg_data_hora) {
    11da:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <msg_data_hora>
    11de:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <msg_data_hora+0x1>
    11e2:	89 2b       	or	r24, r25
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <operacao_loop+0x108>
    11e6:	43 c0       	rjmp	.+134    	; 0x126e <operacao_loop+0x18e>
      msg_data_hora = 0;
    11e8:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <msg_data_hora+0x1>

      envia2bytes('U', 'H');
    11ec:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <msg_data_hora>
    11f0:	68 e4       	ldi	r22, 0x48	; 72
    11f2:	85 e5       	ldi	r24, 0x55	; 85

      LCD_Command(0xC0);
    11f4:	fd d8       	rcall	.-3590   	; 0x3f0 <envia2bytes>
    11f6:	80 ec       	ldi	r24, 0xC0	; 192
    11f8:	83 d0       	rcall	.+262    	; 0x1300 <LCD_Command>
      sprintf(texto_1, "%d", data[0]);
    11fa:	f5 01       	movw	r30, r10
    11fc:	80 81       	ld	r24, Z
    11fe:	1f 92       	push	r1
    1200:	8f 93       	push	r24
    1202:	ff 92       	push	r15
    1204:	ef 92       	push	r14
    1206:	1f 93       	push	r17
      LCD_String(texto_1);
    1208:	0f 93       	push	r16
    120a:	5f d6       	rcall	.+3262   	; 0x1eca <sprintf>
    120c:	c8 01       	movw	r24, r16
      LCD_String("/");
    120e:	a2 d0       	rcall	.+324    	; 0x1354 <LCD_String>
    1210:	89 e0       	ldi	r24, 0x09	; 9
    1212:	93 e0       	ldi	r25, 0x03	; 3
      sprintf(texto_1, "%d", data[1]);
    1214:	9f d0       	rcall	.+318    	; 0x1354 <LCD_String>
    1216:	f5 01       	movw	r30, r10
    1218:	81 81       	ldd	r24, Z+1	; 0x01
    121a:	1f 92       	push	r1
    121c:	8f 93       	push	r24
    121e:	ff 92       	push	r15
    1220:	ef 92       	push	r14
    1222:	1f 93       	push	r17
    1224:	0f 93       	push	r16
      LCD_String(texto_1);
    1226:	51 d6       	rcall	.+3234   	; 0x1eca <sprintf>
    1228:	c8 01       	movw	r24, r16
      LCD_String("   ");
    122a:	94 d0       	rcall	.+296    	; 0x1354 <LCD_String>
    122c:	8b e0       	ldi	r24, 0x0B	; 11
    122e:	93 e0       	ldi	r25, 0x03	; 3
      sprintf(texto_1, "%d", hora[0]);
    1230:	91 d0       	rcall	.+290    	; 0x1354 <LCD_String>
    1232:	f6 01       	movw	r30, r12
    1234:	80 81       	ld	r24, Z
    1236:	1f 92       	push	r1
    1238:	8f 93       	push	r24
    123a:	ff 92       	push	r15
    123c:	ef 92       	push	r14
    123e:	1f 93       	push	r17
    1240:	0f 93       	push	r16
      LCD_String(texto_1);
    1242:	43 d6       	rcall	.+3206   	; 0x1eca <sprintf>
    1244:	c8 01       	movw	r24, r16
      LCD_String(":");
    1246:	86 d0       	rcall	.+268    	; 0x1354 <LCD_String>
    1248:	8b e2       	ldi	r24, 0x2B	; 43
    124a:	93 e0       	ldi	r25, 0x03	; 3
      sprintf(texto_1, "%d", hora[1]);
    124c:	83 d0       	rcall	.+262    	; 0x1354 <LCD_String>
    124e:	f6 01       	movw	r30, r12
    1250:	81 81       	ldd	r24, Z+1	; 0x01
    1252:	1f 92       	push	r1
    1254:	8f 93       	push	r24
    1256:	ff 92       	push	r15
    1258:	ef 92       	push	r14
    125a:	1f 93       	push	r17
    125c:	0f 93       	push	r16
      LCD_String(texto_1);
    125e:	35 d6       	rcall	.+3178   	; 0x1eca <sprintf>
    1260:	c8 01       	movw	r24, r16
    1262:	78 d0       	rcall	.+240    	; 0x1354 <LCD_String>
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    }

    tecla_pressionada = tecla();
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	86 d2       	rcall	.+1292   	; 0x177c <tecla>
    1270:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <tecla_pressionada>
    estadoAtual = desligar_sistema(estadoAtual, tecla_pressionada);
    1274:	68 2f       	mov	r22, r24
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	98 d0       	rcall	.+304    	; 0x13ac <desligar_sistema>
    127c:	82 30       	cpi	r24, 0x02	; 2
    if (estadoAtual != operacao) {
    127e:	91 05       	cpc	r25, r1
    1280:	59 f5       	brne	.+86     	; 0x12d8 <operacao_loop+0x1f8>
    1282:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <habilita_dir_teclado>
      return estadoAtual;
    }

    if (habilita_dir_teclado) {
    1286:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <habilita_dir_teclado+0x1>
    128a:	89 2b       	or	r24, r25
    128c:	09 f4       	brne	.+2      	; 0x1290 <operacao_loop+0x1b0>
    128e:	5f cf       	rjmp	.-322    	; 0x114e <operacao_loop+0x6e>
      tecla_pressionada = tecla();
    1290:	75 d2       	rcall	.+1258   	; 0x177c <tecla>
    1292:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <tecla_pressionada>

      switch (tecla_pressionada) {
    1296:	84 33       	cpi	r24, 0x34	; 52
    1298:	c9 f0       	breq	.+50     	; 0x12cc <operacao_loop+0x1ec>
    129a:	18 f4       	brcc	.+6      	; 0x12a2 <operacao_loop+0x1c2>
    129c:	82 33       	cpi	r24, 0x32	; 50
    129e:	31 f0       	breq	.+12     	; 0x12ac <operacao_loop+0x1cc>
    12a0:	56 cf       	rjmp	.-340    	; 0x114e <operacao_loop+0x6e>
    12a2:	85 33       	cpi	r24, 0x35	; 53
    12a4:	49 f0       	breq	.+18     	; 0x12b8 <operacao_loop+0x1d8>
    12a6:	86 33       	cpi	r24, 0x36	; 54
      case '2':
        enviamov(2);
    12a8:	59 f0       	breq	.+22     	; 0x12c0 <operacao_loop+0x1e0>
    12aa:	51 cf       	rjmp	.-350    	; 0x114e <operacao_loop+0x6e>
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	90 e0       	ldi	r25, 0x00	; 0
        orientacao_motoqueiro = 'N';
    12b0:	d7 d8       	rcall	.-3666   	; 0x460 <enviamov>
    12b2:	90 92 24 02 	sts	0x0224, r9	; 0x800224 <orientacao_motoqueiro>
        break;
      case '5':
        enviamov(1);
    12b6:	4b cf       	rjmp	.-362    	; 0x114e <operacao_loop+0x6e>
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	d1 d8       	rcall	.-3678   	; 0x460 <enviamov>
        break;
    12be:	47 cf       	rjmp	.-370    	; 0x114e <operacao_loop+0x6e>
      case '6':
        enviamov(3);
    12c0:	83 e0       	ldi	r24, 0x03	; 3
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	cd d8       	rcall	.-3686   	; 0x460 <enviamov>
    12c6:	80 92 24 02 	sts	0x0224, r8	; 0x800224 <orientacao_motoqueiro>
        orientacao_motoqueiro = 'L';
    12ca:	41 cf       	rjmp	.-382    	; 0x114e <operacao_loop+0x6e>
        break;
    12cc:	84 e0       	ldi	r24, 0x04	; 4
      case '4':
        enviamov(4);
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	c7 d8       	rcall	.-3698   	; 0x460 <enviamov>
    12d2:	70 92 24 02 	sts	0x0224, r7	; 0x800224 <orientacao_motoqueiro>
        orientacao_motoqueiro = 'O';
    12d6:	3b cf       	rjmp	.-394    	; 0x114e <operacao_loop+0x6e>
    12d8:	2a 96       	adiw	r28, 0x0a	; 10
        break;
    12da:	0f b6       	in	r0, 0x3f	; 63
      }
    }
  }
}
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	bf 90       	pop	r11
    12f6:	af 90       	pop	r10
    12f8:	9f 90       	pop	r9
    12fa:	8f 90       	pop	r8
    12fc:	7f 90       	pop	r7
    12fe:	08 95       	ret

00001300 <LCD_Command>:
#define RS PF2
#define RW PF1
#define EN PF3

void LCD_Command(unsigned char cmnd) {
  LCD_Data_Port = cmnd;
    1300:	82 b9       	out	0x02, r24	; 2
  LCD_Command_Port &= ~(1 << RS);
    1302:	8a 98       	cbi	0x11, 2	; 17
  LCD_Command_Port &= ~(1 << RW);
    1304:	89 98       	cbi	0x11, 1	; 17
  LCD_Command_Port |= (1 << EN);
    1306:	8b 9a       	sbi	0x11, 3	; 17
  Timer1_us(1);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	ab d2       	rcall	.+1366   	; 0x1862 <Timer1_us>
  LCD_Command_Port &= ~(1 << EN);
    130c:	8b 98       	cbi	0x11, 3	; 17
  Timer1_ms(3);
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	ba c2       	rjmp	.+1396   	; 0x1886 <Timer1_ms>
    1312:	08 95       	ret

00001314 <LCD_Char>:
}

void LCD_Char(unsigned char char_data) // Escreve caracteres
{
  LCD_Data_Port = char_data;
    1314:	82 b9       	out	0x02, r24	; 2
  LCD_Command_Port |= (1 << RS);  // RS = 1
    1316:	8a 9a       	sbi	0x11, 2	; 17
  LCD_Command_Port &= ~(1 << RW); // RW = 0, escrita
    1318:	89 98       	cbi	0x11, 1	; 17
  LCD_Command_Port |= (1 << EN);  // Habilita Enable
    131a:	8b 9a       	sbi	0x11, 3	; 17
  Timer1_us(1);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	a1 d2       	rcall	.+1346   	; 0x1862 <Timer1_us>
  LCD_Command_Port &= ~(1 << EN); // Desabilita Enable
    1320:	8b 98       	cbi	0x11, 3	; 17
  Timer1_ms(1);
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	b0 c2       	rjmp	.+1376   	; 0x1886 <Timer1_ms>
    1326:	08 95       	ret

00001328 <LCD_Init>:
}

void LCD_Init(void) // Inicializa display
{
  LCD_Command_Dir = 0xFF; // Definindo as portas como saida
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	80 bb       	out	0x10, r24	; 16
  LCD_Data_Dir = 0xFF;
    132c:	81 b9       	out	0x01, r24	; 1
  LCD_Backlight_Dir |= (1 << LCD_Backlight_Pin);  // Define como saida
    132e:	84 9a       	sbi	0x10, 4	; 16
  LCD_Backlight_Port |= (1 << LCD_Backlight_Pin); // Liga o backlight
    1330:	8c 9a       	sbi	0x11, 4	; 17

  Timer1_ms(20);
    1332:	84 e1       	ldi	r24, 0x14	; 20
    1334:	a8 d2       	rcall	.+1360   	; 0x1886 <Timer1_ms>
  LCD_Command(0x38); // Inicializa no modo 8bits
    1336:	88 e3       	ldi	r24, 0x38	; 56
    1338:	e3 df       	rcall	.-58     	; 0x1300 <LCD_Command>
  LCD_Command(0x0C); // Cursor ON/OFF
    133a:	8c e0       	ldi	r24, 0x0C	; 12
    133c:	e1 df       	rcall	.-62     	; 0x1300 <LCD_Command>
  LCD_Command(0x06); // Habilita autoincremento
    133e:	86 e0       	ldi	r24, 0x06	; 6
    1340:	df df       	rcall	.-66     	; 0x1300 <LCD_Command>
  LCD_Command(0x01); // Limpa o display
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	dd df       	rcall	.-70     	; 0x1300 <LCD_Command>
    1346:	80 e8       	ldi	r24, 0x80	; 128
  LCD_Command(0x80); // Seta cursor para posicao (0, 0)
    1348:	db cf       	rjmp	.-74     	; 0x1300 <LCD_Command>
    134a:	08 95       	ret

0000134c <LCD_Off>:
    134c:	8c 98       	cbi	0x11, 4	; 17
    134e:	88 e0       	ldi	r24, 0x08	; 8
}

void LCD_Off() {
  LCD_Backlight_Port &= ~(1 << LCD_Backlight_Pin); // Desliga o backlight
  LCD_Command(0x08);                               // Opcional: Display OFF (sem apagar dados)
    1350:	d7 cf       	rjmp	.-82     	; 0x1300 <LCD_Command>
    1352:	08 95       	ret

00001354 <LCD_String>:
}

void LCD_String(char *str) // Funcao que ira escrever no display
{
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	ec 01       	movw	r28, r24
  int i;
  for (i = 0; str[i] != 0; i++) // Envia sequencia de caracteres
    135a:	88 81       	ld	r24, Y
    135c:	88 23       	and	r24, r24
    135e:	29 f0       	breq	.+10     	; 0x136a <LCD_String+0x16>
    1360:	21 96       	adiw	r28, 0x01	; 1
  {
    LCD_Char(str[i]);
    1362:	d8 df       	rcall	.-80     	; 0x1314 <LCD_Char>
}

void LCD_String(char *str) // Funcao que ira escrever no display
{
  int i;
  for (i = 0; str[i] != 0; i++) // Envia sequencia de caracteres
    1364:	89 91       	ld	r24, Y+
    1366:	81 11       	cpse	r24, r1
    1368:	fc cf       	rjmp	.-8      	; 0x1362 <LCD_String+0xe>
  {
    LCD_Char(str[i]);
  }
}
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str) // Envia uma string para uma posicao especifica
{
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	ea 01       	movw	r28, r20
  if (row == 0 && pos < 16)
    1376:	81 11       	cpse	r24, r1
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <LCD_String_xy+0x18>
    137a:	60 31       	cpi	r22, 0x10	; 16
    137c:	68 f4       	brcc	.+26     	; 0x1398 <LCD_String_xy+0x28>
    LCD_Command((pos & 0x0F) | 0x80); // se linha 0, soma a posicao (pos) ao valor 0, sem alterar os primeiros 4 bits
    137e:	86 2f       	mov	r24, r22
    1380:	8f 70       	andi	r24, 0x0F	; 15
    1382:	80 68       	ori	r24, 0x80	; 128
    1384:	bd df       	rcall	.-134    	; 0x1300 <LCD_Command>
    1386:	08 c0       	rjmp	.+16     	; 0x1398 <LCD_String_xy+0x28>
  else if (row == 1 && pos < 16)
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	31 f4       	brne	.+12     	; 0x1398 <LCD_String_xy+0x28>
    138c:	60 31       	cpi	r22, 0x10	; 16
    138e:	20 f4       	brcc	.+8      	; 0x1398 <LCD_String_xy+0x28>
    LCD_Command((pos & 0x0F) | 0xC0);
    1390:	86 2f       	mov	r24, r22
    1392:	8f 70       	andi	r24, 0x0F	; 15
    1394:	80 6c       	ori	r24, 0xC0	; 192
    1396:	b4 df       	rcall	.-152    	; 0x1300 <LCD_Command>
  LCD_String(str);
    1398:	ce 01       	movw	r24, r28
    139a:	dc df       	rcall	.-72     	; 0x1354 <LCD_String>
    139c:	df 91       	pop	r29
}
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <LCD_Clear>:
    13a2:	81 e0       	ldi	r24, 0x01	; 1

void LCD_Clear() {
  LCD_Command(0x01);
    13a4:	ad df       	rcall	.-166    	; 0x1300 <LCD_Command>
  LCD_Command(0x80);
    13a6:	80 e8       	ldi	r24, 0x80	; 128
    13a8:	ab cf       	rjmp	.-170    	; 0x1300 <LCD_Command>
    13aa:	08 95       	ret

000013ac <desligar_sistema>:
#include "display.h"
#include "estados.h"
#include "timer0_1.h"
#include "timer2.h"

enum estado desligar_sistema(enum estado estadoAtual, char teclaPressionada) {
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
  static float inicio = 0;
  if (teclaPressionada == '*') {
    13b0:	6a 32       	cpi	r22, 0x2A	; 42
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <desligar_sistema+0xa>
    13b4:	3d c0       	rjmp	.+122    	; 0x1430 <desligar_sistema+0x84>
    13b6:	c9 2f       	mov	r28, r25
    13b8:	d8 2f       	mov	r29, r24
    if (inicio == 0) {
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <inicio.1597>
    13c4:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <inicio.1597+0x1>
    13c8:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <inicio.1597+0x2>
    13cc:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <inicio.1597+0x3>
    13d0:	3f d3       	rcall	.+1662   	; 0x1a50 <__cmpsf2>
    13d2:	81 11       	cpse	r24, r1
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <desligar_sistema+0x3c>
      // Começa a contar o tempo no primeiro instante da pressão
      inicio = get_elapsed_time_ms();
    13d6:	af d2       	rcall	.+1374   	; 0x1936 <get_elapsed_time_ms>
    13d8:	60 93 bd 03 	sts	0x03BD, r22	; 0x8003bd <inicio.1597>
    13dc:	70 93 be 03 	sts	0x03BE, r23	; 0x8003be <inicio.1597+0x1>
    13e0:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <inicio.1597+0x2>
    13e4:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <inicio.1597+0x3>
    }

    // Verifica há quanto tempo está pressionada
    float tempoPressionado = get_elapsed_time_ms() - inicio;
    13e8:	a6 d2       	rcall	.+1356   	; 0x1936 <get_elapsed_time_ms>
    13ea:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <inicio.1597>
    if (tempoPressionado >= 4000) {
    13ee:	30 91 be 03 	lds	r19, 0x03BE	; 0x8003be <inicio.1597+0x1>
    13f2:	40 91 bf 03 	lds	r20, 0x03BF	; 0x8003bf <inicio.1597+0x2>
    13f6:	50 91 c0 03 	lds	r21, 0x03C0	; 0x8003c0 <inicio.1597+0x3>
    13fa:	c5 d2       	rcall	.+1418   	; 0x1986 <__subsf3>
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	55 e4       	ldi	r21, 0x45	; 69
    1404:	74 d4       	rcall	.+2280   	; 0x1cee <__gesf2>
    1406:	88 23       	and	r24, r24
    1408:	e4 f0       	brlt	.+56     	; 0x1442 <desligar_sistema+0x96>
      LCD_Clear();
    140a:	cb df       	rcall	.-106    	; 0x13a2 <LCD_Clear>
      LCD_String("Desligando...");
    140c:	8f e0       	ldi	r24, 0x0F	; 15
    140e:	93 e0       	ldi	r25, 0x03	; 3
    1410:	a1 df       	rcall	.-190    	; 0x1354 <LCD_String>
      Timer1(2);
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	4a d2       	rcall	.+1172   	; 0x18aa <Timer1>
    1416:	c5 df       	rcall	.-118    	; 0x13a2 <LCD_Clear>
      LCD_Clear();
    1418:	99 df       	rcall	.-206    	; 0x134c <LCD_Off>
    141a:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <inicio.1597>
      LCD_Off();
    141e:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <inicio.1597+0x1>
      inicio = 0; // Reseta o contador
    1422:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <inicio.1597+0x2>
    1426:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <inicio.1597+0x3>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0b c0       	rjmp	.+22     	; 0x1446 <desligar_sistema+0x9a>
      return desligado;
    1430:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <inicio.1597>
    1434:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <inicio.1597+0x1>
    }

  } else {
    // Soltou a tecla: reseta o contador
    inicio = 0;
    1438:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <inicio.1597+0x2>
    143c:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <inicio.1597+0x3>
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <desligar_sistema+0x9a>
    1442:	8d 2f       	mov	r24, r29
    1444:	9c 2f       	mov	r25, r28
    1446:	df 91       	pop	r29
  }

  return estadoAtual;
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <desligado_loop>:
char senha_op2[5] = "8741";                          // Senha do operador 2
char operador_atual = 0; // Variável para armazenar qual operador está logado (0 - nenhum, 1 - op1, 2 - op2)

void desligado_loop() {
  static float inicio = 0;
  if (teclaPressionada == '#') {
    144c:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <teclaPressionada>
    1450:	83 32       	cpi	r24, 0x23	; 35
    1452:	c1 f5       	brne	.+112    	; 0x14c4 <desligado_loop+0x78>
    if (inicio == 0) {
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	60 91 c3 03 	lds	r22, 0x03C3	; 0x8003c3 <inicio.1772>
    145e:	70 91 c4 03 	lds	r23, 0x03C4	; 0x8003c4 <inicio.1772+0x1>
    1462:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <inicio.1772+0x2>
    1466:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <inicio.1772+0x3>
    146a:	f2 d2       	rcall	.+1508   	; 0x1a50 <__cmpsf2>
    146c:	81 11       	cpse	r24, r1
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <desligado_loop+0x36>
      // Começa a contar o tempo no primeiro instante da pressão
      inicio = get_elapsed_time_ms();
    1470:	62 d2       	rcall	.+1220   	; 0x1936 <get_elapsed_time_ms>
    1472:	60 93 c3 03 	sts	0x03C3, r22	; 0x8003c3 <inicio.1772>
    1476:	70 93 c4 03 	sts	0x03C4, r23	; 0x8003c4 <inicio.1772+0x1>
    147a:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <inicio.1772+0x2>
    147e:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <inicio.1772+0x3>
    }

    // Verifica há quanto tempo está pressionada
    float tempoPressionado = get_elapsed_time_ms() - inicio;
    1482:	59 d2       	rcall	.+1202   	; 0x1936 <get_elapsed_time_ms>
    1484:	20 91 c3 03 	lds	r18, 0x03C3	; 0x8003c3 <inicio.1772>
    if (tempoPressionado >= 3000) {
    1488:	30 91 c4 03 	lds	r19, 0x03C4	; 0x8003c4 <inicio.1772+0x1>
    148c:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <inicio.1772+0x2>
    1490:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <inicio.1772+0x3>
    1494:	78 d2       	rcall	.+1264   	; 0x1986 <__subsf3>
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e8       	ldi	r19, 0x80	; 128
    149a:	4b e3       	ldi	r20, 0x3B	; 59
    149c:	55 e4       	ldi	r21, 0x45	; 69
    149e:	27 d4       	rcall	.+2126   	; 0x1cee <__gesf2>
    14a0:	88 23       	and	r24, r24
    14a2:	c4 f0       	brlt	.+48     	; 0x14d4 <desligado_loop+0x88>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
      estadoAtual = bloqueado;
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <estadoAtual+0x1>
    14ac:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <estadoAtual>
      LCD_Init(); // Liga o DISPLAY
    14b0:	3b df       	rcall	.-394    	; 0x1328 <LCD_Init>
    14b2:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <inicio.1772>
      inicio = 0; // Reseta o contador
    14b6:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <inicio.1772+0x1>
    14ba:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <inicio.1772+0x2>
    14be:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <inicio.1772+0x3>
    14c2:	08 95       	ret
    14c4:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <inicio.1772>
    }

  } else {
    // Soltou a tecla: reseta o contador
    inicio = 0;
    14c8:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <inicio.1772+0x1>
    14cc:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <inicio.1772+0x2>
    14d0:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <inicio.1772+0x3>
    14d4:	08 95       	ret

000014d6 <bloqueado_loop>:
    14d6:	cf 93       	push	r28
  }
}

void bloqueado_loop() {
    14d8:	df 93       	push	r29
  // Senha operador1: “3258” pode mudar configurações do sistema
  // Senha operador2: “8741”
  static int digitos = 0;
  static uint8_t primeira_vez = 1;

  if (primeira_vez) {
    14da:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <primeira_vez.1777>
    14de:	88 23       	and	r24, r24
    14e0:	21 f0       	breq	.+8      	; 0x14ea <bloqueado_loop+0x14>
    LCD_Clear();
    14e2:	5f df       	rcall	.-322    	; 0x13a2 <LCD_Clear>
    LCD_String("Digite a senha:");
    14e4:	8d e1       	ldi	r24, 0x1D	; 29
    14e6:	93 e0       	ldi	r25, 0x03	; 3
    14e8:	35 df       	rcall	.-406    	; 0x1354 <LCD_String>
    // primeira_vez = 0;
  }

  for (int i = 0; i < digitos; i++) {
    14ea:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <digitos.1776>
    14ee:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <digitos.1776+0x1>
    14f2:	18 16       	cp	r1, r24
    14f4:	19 06       	cpc	r1, r25
    14f6:	7c f4       	brge	.+30     	; 0x1516 <bloqueado_loop+0x40>
    14f8:	c0 e0       	ldi	r28, 0x00	; 0
    14fa:	d0 e0       	ldi	r29, 0x00	; 0
    LCD_String_xy(1, i, "*"); // Para cada dígito, mascara com * na tela
    14fc:	4d e2       	ldi	r20, 0x2D	; 45
    14fe:	53 e0       	ldi	r21, 0x03	; 3
    1500:	6c 2f       	mov	r22, r28
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	35 df       	rcall	.-406    	; 0x1370 <LCD_String_xy>
    LCD_Clear();
    LCD_String("Digite a senha:");
    // primeira_vez = 0;
  }

  for (int i = 0; i < digitos; i++) {
    1506:	21 96       	adiw	r28, 0x01	; 1
    1508:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <digitos.1776>
    150c:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <digitos.1776+0x1>
    1510:	c8 17       	cp	r28, r24
    1512:	d9 07       	cpc	r29, r25
    1514:	9c f3       	brlt	.-26     	; 0x14fc <bloqueado_loop+0x26>
    LCD_String_xy(1, i, "*"); // Para cada dígito, mascara com * na tela
  }

  // Laço for para inserir a senha; a senha digitada é armazenada até terminar os 4 dígitos
  if (teclaPressionada != 'f' && teclaPressionada != '#' && teclaPressionada != '*' && digitos < 4) {
    1516:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <teclaPressionada>
    151a:	26 36       	cpi	r18, 0x66	; 102
    151c:	91 f0       	breq	.+36     	; 0x1542 <bloqueado_loop+0x6c>
    151e:	23 32       	cpi	r18, 0x23	; 35
    1520:	81 f0       	breq	.+32     	; 0x1542 <bloqueado_loop+0x6c>
    1522:	2a 32       	cpi	r18, 0x2A	; 42
    1524:	71 f0       	breq	.+28     	; 0x1542 <bloqueado_loop+0x6c>
    1526:	84 30       	cpi	r24, 0x04	; 4
    1528:	91 05       	cpc	r25, r1
    152a:	5c f4       	brge	.+22     	; 0x1542 <bloqueado_loop+0x6c>
    senha_digitada[digitos] = teclaPressionada;
    152c:	fc 01       	movw	r30, r24
    152e:	eb 5c       	subi	r30, 0xCB	; 203
    1530:	fd 4f       	sbci	r31, 0xFD	; 253
    1532:	20 83       	st	Z, r18
    digitos++;
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <digitos.1776+0x1>
    153a:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <digitos.1776>
    Timer1_ms(100);
    153e:	84 e6       	ldi	r24, 0x64	; 100
    1540:	a2 d1       	rcall	.+836    	; 0x1886 <Timer1_ms>
  }

  // Faz a verificação dos digitos, retorna se ainda não foram digitados os 4 dígitos
  if (digitos < 4) {
    1542:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <digitos.1776>
    1546:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <digitos.1776+0x1>
    154a:	04 97       	sbiw	r24, 0x04	; 4
    154c:	0c f4       	brge	.+2      	; 0x1550 <bloqueado_loop+0x7a>
    return;
  }

  LCD_Clear();
    154e:	65 c0       	rjmp	.+202    	; 0x161a <bloqueado_loop+0x144>
  if (strcmp(senha_digitada, senha_op1) == 0) // Verifica se a senha digitada é a senha do operador 1
    1550:	28 df       	rcall	.-432    	; 0x13a2 <LCD_Clear>
    1552:	60 e3       	ldi	r22, 0x30	; 48
    1554:	72 e0       	ldi	r23, 0x02	; 2
    1556:	85 e3       	ldi	r24, 0x35	; 53
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	ae d4       	rcall	.+2396   	; 0x1eb8 <strcmp>
    155c:	89 2b       	or	r24, r25
    155e:	21 f4       	brne	.+8      	; 0x1568 <bloqueado_loop+0x92>
  {
    operador_atual = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <operador_atual>
  } else if (strcmp(senha_digitada, senha_op2) == 0) // Verifica se a senha digitada é a senha do operador 2
    1566:	28 c0       	rjmp	.+80     	; 0x15b8 <bloqueado_loop+0xe2>
    1568:	6b e2       	ldi	r22, 0x2B	; 43
    156a:	72 e0       	ldi	r23, 0x02	; 2
    156c:	85 e3       	ldi	r24, 0x35	; 53
    156e:	92 e0       	ldi	r25, 0x02	; 2
    1570:	a3 d4       	rcall	.+2374   	; 0x1eb8 <strcmp>
    1572:	89 2b       	or	r24, r25
  {
    operador_atual = 2;
    1574:	21 f4       	brne	.+8      	; 0x157e <bloqueado_loop+0xa8>
    1576:	82 e0       	ldi	r24, 0x02	; 2
  } else {
    LCD_Clear();
    1578:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <operador_atual>
    LCD_String("Acesso invalido");
    157c:	1d c0       	rjmp	.+58     	; 0x15b8 <bloqueado_loop+0xe2>
    157e:	11 df       	rcall	.-478    	; 0x13a2 <LCD_Clear>
    Timer1(2);
    1580:	8f e2       	ldi	r24, 0x2F	; 47
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	e7 de       	rcall	.-562    	; 0x1354 <LCD_String>
    LCD_Clear();
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	90 d1       	rcall	.+800    	; 0x18aa <Timer1>
    LCD_String("Tente novamente");
    158a:	0b df       	rcall	.-490    	; 0x13a2 <LCD_Clear>
    158c:	8f e3       	ldi	r24, 0x3F	; 63
    158e:	93 e0       	ldi	r25, 0x03	; 3
    1590:	e1 de       	rcall	.-574    	; 0x1354 <LCD_String>
    Timer1(2);
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	8a d1       	rcall	.+788    	; 0x18aa <Timer1>
    1596:	05 df       	rcall	.-502    	; 0x13a2 <LCD_Clear>
    LCD_Clear();
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <primeira_vez.1777>

    primeira_vez = 1;
    159e:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <digitos.1776+0x1>
    digitos = 0; // Reseta o contador de dígitos para nova tentativa
    15a2:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <digitos.1776>
    // Limpa o vetor de senha digitada para uma que possa ser inserida uma senha válida
    senha_digitada[0] = 'F';
    15a6:	e5 e3       	ldi	r30, 0x35	; 53
    15a8:	f2 e0       	ldi	r31, 0x02	; 2
    senha_digitada[1] = 'F';
    senha_digitada[2] = 'F';
    15aa:	86 e4       	ldi	r24, 0x46	; 70
    senha_digitada[3] = 'F';
    senha_digitada[4] = '\0';
    return;
    15ac:	80 83       	st	Z, r24
  }

  LCD_Clear();
    15ae:	81 83       	std	Z+1, r24	; 0x01
    15b0:	82 83       	std	Z+2, r24	; 0x02
  LCD_String("Desbloqueando");
    15b2:	83 83       	std	Z+3, r24	; 0x03
    15b4:	14 82       	std	Z+4, r1	; 0x04
    15b6:	31 c0       	rjmp	.+98     	; 0x161a <bloqueado_loop+0x144>
  Timer1(2);
    15b8:	f4 de       	rcall	.-536    	; 0x13a2 <LCD_Clear>
    15ba:	8f e4       	ldi	r24, 0x4F	; 79
    15bc:	93 e0       	ldi	r25, 0x03	; 3
  LCD_Clear();
    15be:	ca de       	rcall	.-620    	; 0x1354 <LCD_String>
    15c0:	82 e0       	ldi	r24, 0x02	; 2
  LCD_String("Uber DeLEats");
    15c2:	73 d1       	rcall	.+742    	; 0x18aa <Timer1>
    15c4:	ee de       	rcall	.-548    	; 0x13a2 <LCD_Clear>
  Timer1(2);
    15c6:	8d e5       	ldi	r24, 0x5D	; 93
    15c8:	93 e0       	ldi	r25, 0x03	; 3
    15ca:	c4 de       	rcall	.-632    	; 0x1354 <LCD_String>

  LCD_Clear();
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	6d d1       	rcall	.+730    	; 0x18aa <Timer1>
  if (operador_atual == 1) // Se for a senha do operador 1
    15d0:	e8 de       	rcall	.-560    	; 0x13a2 <LCD_Clear>
    15d2:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <operador_atual>
    15d6:	81 30       	cpi	r24, 0x01	; 1
  {
    LCD_String("Operador 1");
    15d8:	21 f4       	brne	.+8      	; 0x15e2 <bloqueado_loop+0x10c>
    15da:	8a e6       	ldi	r24, 0x6A	; 106
    15dc:	93 e0       	ldi	r25, 0x03	; 3
    15de:	ba de       	rcall	.-652    	; 0x1354 <LCD_String>
    15e0:	05 c0       	rjmp	.+10     	; 0x15ec <bloqueado_loop+0x116>
  } else if (operador_atual == 2) // Se for a senha do operador 2
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	19 f4       	brne	.+6      	; 0x15ec <bloqueado_loop+0x116>
  {
    LCD_String("Operador 2");
    15e6:	85 e7       	ldi	r24, 0x75	; 117
    15e8:	93 e0       	ldi	r25, 0x03	; 3
    15ea:	b4 de       	rcall	.-664    	; 0x1354 <LCD_String>
    15ec:	81 e0       	ldi	r24, 0x01	; 1
  }
  Timer1(1);
    15ee:	5d d1       	rcall	.+698    	; 0x18aa <Timer1>
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <primeira_vez.1777>

  // Limpa variáveis para próxima utilização
  primeira_vez = 1;
    15f6:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <digitos.1776+0x1>
  digitos = 0; // Reseta o contador de dígitos para nova tentativa
    15fa:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <digitos.1776>
    15fe:	e5 e3       	ldi	r30, 0x35	; 53
    1600:	f2 e0       	ldi	r31, 0x02	; 2
  // Limpa o vetor de senha digitada para uma que possa ser inserida uma senha válida
  senha_digitada[0] = 'F';
    1602:	86 e4       	ldi	r24, 0x46	; 70
    1604:	80 83       	st	Z, r24
    1606:	81 83       	std	Z+1, r24	; 0x01
    1608:	82 83       	std	Z+2, r24	; 0x02
  senha_digitada[1] = 'F';
    160a:	83 83       	std	Z+3, r24	; 0x03
  senha_digitada[2] = 'F';
    160c:	14 82       	std	Z+4, r1	; 0x04
  senha_digitada[3] = 'F';
    160e:	82 e0       	ldi	r24, 0x02	; 2
  senha_digitada[4] = '\0';
    1610:	90 e0       	ldi	r25, 0x00	; 0
  estadoAtual = operacao; // Atualiza para sistema desbloqueado
    1612:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <estadoAtual+0x1>
    1616:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <estadoAtual>
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
}
    161e:	08 95       	ret

00001620 <main>:
    1620:	69 d0       	rcall	.+210    	; 0x16f4 <teclado_init>
    1622:	58 d1       	rcall	.+688    	; 0x18d4 <timer2_init>
int main() {
  teclado_init();
  timer2_init();

  while (1) {
    teclaPressionada = tecla();
    1624:	ab d0       	rcall	.+342    	; 0x177c <tecla>
    1626:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <teclaPressionada>
    162a:	68 2f       	mov	r22, r24
    estadoAtual = desligar_sistema(estadoAtual, teclaPressionada);
    162c:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <estadoAtual>
    1630:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <estadoAtual+0x1>
    1634:	bb de       	rcall	.-650    	; 0x13ac <desligar_sistema>
    1636:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <estadoAtual+0x1>
    163a:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <estadoAtual>
    163e:	81 30       	cpi	r24, 0x01	; 1

    switch (estadoAtual) {
    1640:	91 05       	cpc	r25, r1
    1642:	31 f0       	breq	.+12     	; 0x1650 <main+0x30>
    1644:	18 f0       	brcs	.+6      	; 0x164c <main+0x2c>
    1646:	02 97       	sbiw	r24, 0x02	; 2
    1648:	29 f0       	breq	.+10     	; 0x1654 <main+0x34>
    case desligado:
      desligado_loop();
    164a:	ec cf       	rjmp	.-40     	; 0x1624 <main+0x4>
      break;
    164c:	ff de       	rcall	.-514    	; 0x144c <desligado_loop>
    case bloqueado:
      bloqueado_loop();
    164e:	ea cf       	rjmp	.-44     	; 0x1624 <main+0x4>
    1650:	42 df       	rcall	.-380    	; 0x14d6 <bloqueado_loop>
      break;
    1652:	e8 cf       	rjmp	.-48     	; 0x1624 <main+0x4>
    case operacao:
      estadoAtual = operacao_loop();
    1654:	45 dd       	rcall	.-1398   	; 0x10e0 <operacao_loop>
    1656:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <estadoAtual+0x1>
    165a:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <estadoAtual>
    165e:	e2 cf       	rjmp	.-60     	; 0x1624 <main+0x4>

00001660 <tarifa_final>:
      break;
    1660:	8f 92       	push	r8
  float valor_distancia = (0.4f * (float)distancia_m) / 1000.0f;
  float valor_previsto = tarifa_base + valor_distancia;
  return valor_previsto;
}

float tarifa_final(int distancia_m, float duracao_s) {
    1662:	9f 92       	push	r9
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	4a 01       	movw	r8, r20
    1672:	5b 01       	movw	r10, r22
 */

float tarifa_estimativa(int distancia_m) {
  float tarifa_base = 2.0f;
  float valor_distancia = (0.4f * (float)distancia_m) / 1000.0f;
  float valor_previsto = tarifa_base + valor_distancia;
    1674:	bc 01       	movw	r22, r24
    1676:	99 0f       	add	r25, r25
    1678:	88 0b       	sbc	r24, r24
    167a:	99 0b       	sbc	r25, r25
    167c:	88 d2       	rcall	.+1296   	; 0x1b8e <__floatsisf>
    167e:	2d ec       	ldi	r18, 0xCD	; 205
    1680:	3c ec       	ldi	r19, 0xCC	; 204
    1682:	4c ec       	ldi	r20, 0xCC	; 204
    1684:	5e e3       	ldi	r21, 0x3E	; 62
    1686:	37 d3       	rcall	.+1646   	; 0x1cf6 <__mulsf3>
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	4a e7       	ldi	r20, 0x7A	; 122
    168e:	54 e4       	ldi	r21, 0x44	; 68
    1690:	e3 d1       	rcall	.+966    	; 0x1a58 <__divsf3>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e4       	ldi	r21, 0x40	; 64
    169a:	76 d1       	rcall	.+748    	; 0x1988 <__addsf3>
    169c:	6b 01       	movw	r12, r22
    169e:	7c 01       	movw	r14, r24
  return valor_previsto;
}

float tarifa_final(int distancia_m, float duracao_s) {
  float valor_final = tarifa_estimativa(distancia_m);
  if (duracao_s >= 0 && duracao_s < 180) { // menor que 3 minutos
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	c5 01       	movw	r24, r10
    16a8:	b4 01       	movw	r22, r8
    16aa:	21 d3       	rcall	.+1602   	; 0x1cee <__gesf2>
    16ac:	88 23       	and	r24, r24
    16ae:	94 f0       	brlt	.+36     	; 0x16d4 <tarifa_final+0x74>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	44 e3       	ldi	r20, 0x34	; 52
    16b6:	53 e4       	ldi	r21, 0x43	; 67
    16b8:	c5 01       	movw	r24, r10
    16ba:	b4 01       	movw	r22, r8
    16bc:	c9 d1       	rcall	.+914    	; 0x1a50 <__cmpsf2>
    16be:	88 23       	and	r24, r24
    16c0:	4c f4       	brge	.+18     	; 0x16d4 <tarifa_final+0x74>
    valor_final += 1.5f;
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 ec       	ldi	r20, 0xC0	; 192
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	c7 01       	movw	r24, r14
    16cc:	b6 01       	movw	r22, r12
    16ce:	5c d1       	rcall	.+696    	; 0x1988 <__addsf3>
    16d0:	6b 01       	movw	r12, r22
    16d2:	7c 01       	movw	r14, r24
  }
  return valor_final;
    16d4:	c7 01       	movw	r24, r14
    16d6:	b6 01       	movw	r22, r12
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	df 90       	pop	r13
    16de:	cf 90       	pop	r12
    16e0:	bf 90       	pop	r11
    16e2:	af 90       	pop	r10
    16e4:	9f 90       	pop	r9
    16e6:	8f 90       	pop	r8
    16e8:	08 95       	ret

000016ea <atraso_debounce>:

// int BOUNCE = 6; // número de leituras estáveis para considerar a tecla pressionada
int BOUNCE = 6; // número de leituras estáveis para considerar a tecla pressionada

void atraso_debounce() {
  while ((TIFR0 & (1 << 0)) == 0); // enquanto a flag de interrup��o do timer 0 n�o for 1
    16ea:	a8 9b       	sbis	0x15, 0	; 21
    16ec:	fe cf       	rjmp	.-4      	; 0x16ea <atraso_debounce>
  TCNT0 = 0;
    16ee:	16 bc       	out	0x26, r1	; 38
  TIFR0 |= (1 << 0); // zera a flag
    16f0:	a8 9a       	sbi	0x15, 0	; 21
    16f2:	08 95       	ret

000016f4 <teclado_init>:
}

// Inicializar teclado
void teclado_init() {
  TCCR0A = 0; // configur���o do timer zero para debounce
    16f4:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 4;
    16f6:	84 e0       	ldi	r24, 0x04	; 4
    16f8:	85 bd       	out	0x25, r24	; 37
  TCNT0 = 0;
    16fa:	16 bc       	out	0x26, r1	; 38

  DDRK &= ~(1 << 7 | 1 << 6 | 1 << 5 | 1 << 4); // define PORTK como metade entrada (colunas)
    16fc:	e7 e0       	ldi	r30, 0x07	; 7
    16fe:	f1 e0       	ldi	r31, 0x01	; 1
    1700:	80 81       	ld	r24, Z
    1702:	8f 70       	andi	r24, 0x0F	; 15
    1704:	80 83       	st	Z, r24
  DDRK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);  // define PORTK como sa�da (linhas)
    1706:	80 81       	ld	r24, Z
    1708:	8f 60       	ori	r24, 0x0F	; 15
    170a:	80 83       	st	Z, r24
  PORTK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
    170c:	e8 e0       	ldi	r30, 0x08	; 8
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	80 81       	ld	r24, Z
    1712:	8f 60       	ori	r24, 0x0F	; 15
    1714:	80 83       	st	Z, r24

  PINK |= (1 << 0 | 1 << 1 | 1 << 2 | 1 << 3); // habilita pull-up nos pinos
    1716:	e6 e0       	ldi	r30, 0x06	; 6
    1718:	f1 e0       	ldi	r31, 0x01	; 1
    171a:	80 81       	ld	r24, Z
    171c:	8f 60       	ori	r24, 0x0F	; 15
    171e:	80 83       	st	Z, r24
    1720:	08 95       	ret

00001722 <le_coluna>:
}

// Fun��o de debounce para leitura do teclado, a fun��o recebe como argumento a
// coluna da matriz de contato
char le_coluna(char pino) {
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
    172c:	8c 5f       	subi	r24, 0xFC	; 252
    172e:	91 e0       	ldi	r25, 0x01	; 1
    1730:	f9 2e       	mov	r15, r25
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <le_coluna+0x14>
    1734:	ff 0c       	add	r15, r15
    1736:	8a 95       	dec	r24
    1738:	ea f7       	brpl	.-6      	; 0x1734 <le_coluna+0x12>
}

// Fun��o de debounce para leitura do teclado, a fun��o recebe como argumento a
// coluna da matriz de contato
char le_coluna(char pino) {
  char count = 0, key_last = 0, key_now = 0;
    173a:	d0 e0       	ldi	r29, 0x00	; 0
    173c:	c0 e0       	ldi	r28, 0x00	; 0

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
    173e:	06 e0       	ldi	r16, 0x06	; 6
    1740:	11 e0       	ldi	r17, 0x01	; 1
// coluna da matriz de contato
char le_coluna(char pino) {
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();
    1742:	d3 df       	rcall	.-90     	; 0x16ea <atraso_debounce>

    key_now = PINK & (1 << (pino + 4));
    1744:	f8 01       	movw	r30, r16
    1746:	90 81       	ld	r25, Z
    1748:	9f 21       	and	r25, r15

    if (key_now == key_last) {
    174a:	d9 13       	cpse	r29, r25
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <le_coluna+0x30>
      count++;
    174e:	cf 5f       	subi	r28, 0xFF	; 255
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <le_coluna+0x32>
    } else {
      count = 0;
    1752:	c0 e0       	ldi	r28, 0x00	; 0
  char count = 0, key_last = 0, key_now = 0;

  while (1) {
    atraso_debounce();

    key_now = PINK & (1 << (pino + 4));
    1754:	d9 2f       	mov	r29, r25
      count++;
    } else {
      count = 0;
    }

    if (count == BOUNCE) {
    1756:	2c 2f       	mov	r18, r28
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <BOUNCE>
    175e:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <BOUNCE+0x1>
    1762:	24 17       	cp	r18, r20
    1764:	35 07       	cpc	r19, r21
    1766:	69 f7       	brne	.-38     	; 0x1742 <le_coluna+0x20>
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	91 11       	cpse	r25, r1
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <le_coluna+0x4e>
    176e:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    } else {
      key_last = key_now;
    }
  }
}
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	08 95       	ret

0000177c <tecla>:

// Retorna tecla pressionada
char tecla() {
    177c:	af 92       	push	r10
    177e:	bf 92       	push	r11
    1780:	cf 92       	push	r12
    1782:	df 92       	push	r13
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	60 97       	sbiw	r28, 0x10	; 16
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};
    17a0:	80 e1       	ldi	r24, 0x10	; 16
    17a2:	ec e3       	ldi	r30, 0x3C	; 60
    17a4:	f2 e0       	ldi	r31, 0x02	; 2
    17a6:	de 01       	movw	r26, r28
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	01 90       	ld	r0, Z+
    17ac:	0d 92       	st	X+, r0
    17ae:	8a 95       	dec	r24
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <tecla+0x2e>

  for (linha = 0; linha < 4; linha++) {
    17b2:	e1 2c       	mov	r14, r1
    17b4:	f1 2c       	mov	r15, r1
    PORTK |= 0x0F;
    17b6:	68 94       	set
    17b8:	cc 24       	eor	r12, r12
    17ba:	c3 f8       	bld	r12, 3
    17bc:	dd 24       	eor	r13, r13
    17be:	d3 94       	inc	r13
    PORTK &= ~(1 << linha); // Itera as colunas do teclado
    17c0:	aa 24       	eor	r10, r10
    17c2:	a3 94       	inc	r10
    17c4:	b1 2c       	mov	r11, r1
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};

  for (linha = 0; linha < 4; linha++) {
    PORTK |= 0x0F;
    17c6:	f6 01       	movw	r30, r12
    17c8:	80 81       	ld	r24, Z
    17ca:	8f 60       	ori	r24, 0x0F	; 15
    17cc:	80 83       	st	Z, r24
    PORTK &= ~(1 << linha); // Itera as colunas do teclado
    17ce:	90 81       	ld	r25, Z
    17d0:	95 01       	movw	r18, r10
    17d2:	0e 2c       	mov	r0, r14
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <tecla+0x5e>
    17d6:	22 0f       	add	r18, r18
    17d8:	33 1f       	adc	r19, r19
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <tecla+0x5a>
    17de:	82 2f       	mov	r24, r18
    17e0:	80 95       	com	r24
    17e2:	89 23       	and	r24, r25
    17e4:	80 83       	st	Z, r24

    for (coluna = 0; coluna < 3; coluna++) {
    17e6:	00 e0       	ldi	r16, 0x00	; 0
    17e8:	10 e0       	ldi	r17, 0x00	; 0
      if (!le_coluna(coluna)) {
    17ea:	80 2f       	mov	r24, r16
    17ec:	9a df       	rcall	.-204    	; 0x1722 <le_coluna>
    17ee:	81 11       	cpse	r24, r1
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <tecla+0x94>
        // while(!le_coluna(coluna));
        return teclado[linha][coluna];
    17f2:	ee 0c       	add	r14, r14
    17f4:	ff 1c       	adc	r15, r15
    17f6:	ee 0c       	add	r14, r14
    17f8:	ff 1c       	adc	r15, r15
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	8c 0f       	add	r24, r28
    1800:	9d 1f       	adc	r25, r29
    1802:	e8 0e       	add	r14, r24
    1804:	f9 1e       	adc	r15, r25
    1806:	f7 01       	movw	r30, r14
    1808:	e0 0f       	add	r30, r16
    180a:	f1 1f       	adc	r31, r17
    180c:	80 81       	ld	r24, Z
    180e:	0d c0       	rjmp	.+26     	; 0x182a <tecla+0xae>

  for (linha = 0; linha < 4; linha++) {
    PORTK |= 0x0F;
    PORTK &= ~(1 << linha); // Itera as colunas do teclado

    for (coluna = 0; coluna < 3; coluna++) {
    1810:	0f 5f       	subi	r16, 0xFF	; 255
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
    1814:	03 30       	cpi	r16, 0x03	; 3
    1816:	11 05       	cpc	r17, r1
    1818:	41 f7       	brne	.-48     	; 0x17ea <tecla+0x6e>
char tecla() {
  int linha = 0, coluna = 0;

  char teclado[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};

  for (linha = 0; linha < 4; linha++) {
    181a:	9f ef       	ldi	r25, 0xFF	; 255
    181c:	e9 1a       	sub	r14, r25
    181e:	f9 0a       	sbc	r15, r25
    1820:	e4 e0       	ldi	r30, 0x04	; 4
    1822:	ee 16       	cp	r14, r30
    1824:	f1 04       	cpc	r15, r1
    1826:	79 f6       	brne	.-98     	; 0x17c6 <tecla+0x4a>
        // while(!le_coluna(coluna));
        return teclado[linha][coluna];
      }
    }
  }
  return 'f'; // caso nenhuma tecla seja pressionada
    1828:	86 e6       	ldi	r24, 0x66	; 102
}
    182a:	60 96       	adiw	r28, 0x10	; 16
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	bf 90       	pop	r11
    1848:	af 90       	pop	r10
    184a:	08 95       	ret

0000184c <config_timer1>:
//   while ((TIFR0 & (1 << 1)) == 0); // Contagens at� o flag "zerar"
//   TIFR0 = (1 << 1);
// }

void config_timer1(unsigned char p) {
  TCCR1A = 0;
    184c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
  TCCR1B = p;
    1850:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
  TCNT1 = 0;
    1854:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    1858:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
  TIFR1 = (1 << 1);
    185c:	82 e0       	ldi	r24, 0x02	; 2
    185e:	86 bb       	out	0x16, r24	; 22
    1860:	08 95       	ret

00001862 <Timer1_us>:
}

void Timer1_us(unsigned char tempo_final) {
    1862:	cf 93       	push	r28
    1864:	c8 2f       	mov	r28, r24
  config_timer1(10);
    1866:	8a e0       	ldi	r24, 0x0A	; 10
    1868:	f1 df       	rcall	.-30     	; 0x184c <config_timer1>
  OCR1A = tempo_final * 2; // Tempo final da contagem   *2
    186a:	8c 2f       	mov	r24, r28
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1876:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
  while ((TIFR1 & (1 << 1)) == 0);
    187a:	b1 9b       	sbis	0x16, 1	; 22
    187c:	fe cf       	rjmp	.-4      	; 0x187a <Timer1_us+0x18>
  TIFR1 = (1 << 1);
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	86 bb       	out	0x16, r24	; 22
}
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <Timer1_ms>:

void Timer1_ms(unsigned char tempo_final) {
    1886:	cf 93       	push	r28
    1888:	c8 2f       	mov	r28, r24
  config_timer1(12);
    188a:	8c e0       	ldi	r24, 0x0C	; 12
    188c:	df df       	rcall	.-66     	; 0x184c <config_timer1>
  OCR1A = tempo_final * 63; // Tempo final da contagem   *62.5
    188e:	2f e3       	ldi	r18, 0x3F	; 63
    1890:	c2 9f       	mul	r28, r18
    1892:	c0 01       	movw	r24, r0
    1894:	11 24       	eor	r1, r1
    1896:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    189a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
  while ((TIFR1 & (1 << 1)) == 0);
    189e:	b1 9b       	sbis	0x16, 1	; 22
    18a0:	fe cf       	rjmp	.-4      	; 0x189e <Timer1_ms+0x18>
  TIFR1 = (1 << 1);
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	86 bb       	out	0x16, r24	; 22
}
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <Timer1>:
//
void Timer1(unsigned char tempo_final) {
    18aa:	cf 93       	push	r28
    18ac:	c8 2f       	mov	r28, r24
  config_timer1(13);
    18ae:	8d e0       	ldi	r24, 0x0D	; 13
    18b0:	cd df       	rcall	.-102    	; 0x184c <config_timer1>
  OCR1A = tempo_final * 15625; // Tempo final da contagem *15625
    18b2:	29 e0       	ldi	r18, 0x09	; 9
    18b4:	3d e3       	ldi	r19, 0x3D	; 61
    18b6:	c2 9f       	mul	r28, r18
    18b8:	c0 01       	movw	r24, r0
    18ba:	c3 9f       	mul	r28, r19
    18bc:	90 0d       	add	r25, r0
    18be:	11 24       	eor	r1, r1
    18c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    18c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
  while ((TIFR1 & (1 << 1)) == 0);
    18c8:	b1 9b       	sbis	0x16, 1	; 22
    18ca:	fe cf       	rjmp	.-4      	; 0x18c8 <Timer1+0x1e>
  TIFR1 = (1 << 1);
    18cc:	82 e0       	ldi	r24, 0x02	; 2
    18ce:	86 bb       	out	0x16, r24	; 22
}
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <timer2_init>:
#include "timer2.h"

volatile unsigned long overflow_count = 0;

void timer2_init() {
  TCCR2A = 0x00;                      // Modo normal
    18d4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
  TCCR2B = (1 << CS22) | (1 << CS21); // Prescaler = 256
    18d8:	86 e0       	ldi	r24, 0x06	; 6
    18da:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
  TCNT2 = 0;                          // Zera contador
    18de:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
  TIMSK2 = (1 << TOIE2);              // Habilita interrupção de overflow
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
  sei();                              // Habilita interrupções globais
    18e8:	78 94       	sei
    18ea:	08 95       	ret

000018ec <__vector_15>:
}

ISR(TIMER2_OVF_vect) { overflow_count++; }
    18ec:	1f 92       	push	r1
    18ee:	0f 92       	push	r0
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	0f 92       	push	r0
    18f4:	11 24       	eor	r1, r1
    18f6:	8f 93       	push	r24
    18f8:	9f 93       	push	r25
    18fa:	af 93       	push	r26
    18fc:	bf 93       	push	r27
    18fe:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <overflow_count>
    1902:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <overflow_count+0x1>
    1906:	a0 91 cc 03 	lds	r26, 0x03CC	; 0x8003cc <overflow_count+0x2>
    190a:	b0 91 cd 03 	lds	r27, 0x03CD	; 0x8003cd <overflow_count+0x3>
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	a1 1d       	adc	r26, r1
    1912:	b1 1d       	adc	r27, r1
    1914:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <overflow_count>
    1918:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <overflow_count+0x1>
    191c:	a0 93 cc 03 	sts	0x03CC, r26	; 0x8003cc <overflow_count+0x2>
    1920:	b0 93 cd 03 	sts	0x03CD, r27	; 0x8003cd <overflow_count+0x3>
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	0f 90       	pop	r0
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	0f 90       	pop	r0
    1932:	1f 90       	pop	r1
    1934:	18 95       	reti

00001936 <get_elapsed_time_ms>:
float get_elapsed_time_ms() {
  unsigned long total_ticks;
  float elapsed_time_ms;

  // Protege leitura
  unsigned int sreg = SREG;
    1936:	3f b7       	in	r19, 0x3f	; 63
  cli();
    1938:	f8 94       	cli
  total_ticks = (overflow_count * 256UL) + TCNT2;
    193a:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <overflow_count>
    193e:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <overflow_count+0x1>
    1942:	a0 91 cc 03 	lds	r26, 0x03CC	; 0x8003cc <overflow_count+0x2>
    1946:	b0 91 cd 03 	lds	r27, 0x03CD	; 0x8003cd <overflow_count+0x3>
    194a:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
  SREG = sreg;
    194e:	3f bf       	out	0x3f, r19	; 63

  // Cada tick = (prescaler / F_CPU) segundos
  // => tempo(ms) = ticks * prescaler * 1000 / F_CPU
  elapsed_time_ms = (total_ticks * 256.0 * 1000.0) / F_CPU;

  return elapsed_time_ms;
    1950:	ba 2f       	mov	r27, r26
    1952:	a9 2f       	mov	r26, r25
    1954:	98 2f       	mov	r25, r24
    1956:	88 27       	eor	r24, r24
    1958:	bc 01       	movw	r22, r24
    195a:	cd 01       	movw	r24, r26
    195c:	62 0f       	add	r22, r18
    195e:	71 1d       	adc	r23, r1
    1960:	81 1d       	adc	r24, r1
    1962:	91 1d       	adc	r25, r1
    1964:	12 d1       	rcall	.+548    	; 0x1b8a <__floatunsisf>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	53 e4       	ldi	r21, 0x43	; 67
    196e:	c3 d1       	rcall	.+902    	; 0x1cf6 <__mulsf3>
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a e7       	ldi	r20, 0x7A	; 122
    1976:	54 e4       	ldi	r21, 0x44	; 68
    1978:	be d1       	rcall	.+892    	; 0x1cf6 <__mulsf3>
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	34 e2       	ldi	r19, 0x24	; 36
    197e:	44 e7       	ldi	r20, 0x74	; 116
    1980:	5b e4       	ldi	r21, 0x4B	; 75
    1982:	6a c0       	rjmp	.+212    	; 0x1a58 <__divsf3>
}
    1984:	08 95       	ret

00001986 <__subsf3>:
    1986:	50 58       	subi	r21, 0x80	; 128

00001988 <__addsf3>:
    1988:	bb 27       	eor	r27, r27
    198a:	aa 27       	eor	r26, r26
    198c:	0e d0       	rcall	.+28     	; 0x19aa <__addsf3x>
    198e:	75 c1       	rjmp	.+746    	; 0x1c7a <__fp_round>
    1990:	66 d1       	rcall	.+716    	; 0x1c5e <__fp_pscA>
    1992:	30 f0       	brcs	.+12     	; 0x19a0 <__addsf3+0x18>
    1994:	6b d1       	rcall	.+726    	; 0x1c6c <__fp_pscB>
    1996:	20 f0       	brcs	.+8      	; 0x19a0 <__addsf3+0x18>
    1998:	31 f4       	brne	.+12     	; 0x19a6 <__addsf3+0x1e>
    199a:	9f 3f       	cpi	r25, 0xFF	; 255
    199c:	11 f4       	brne	.+4      	; 0x19a2 <__addsf3+0x1a>
    199e:	1e f4       	brtc	.+6      	; 0x19a6 <__addsf3+0x1e>
    19a0:	5b c1       	rjmp	.+694    	; 0x1c58 <__fp_nan>
    19a2:	0e f4       	brtc	.+2      	; 0x19a6 <__addsf3+0x1e>
    19a4:	e0 95       	com	r30
    19a6:	e7 fb       	bst	r30, 7
    19a8:	51 c1       	rjmp	.+674    	; 0x1c4c <__fp_inf>

000019aa <__addsf3x>:
    19aa:	e9 2f       	mov	r30, r25
    19ac:	77 d1       	rcall	.+750    	; 0x1c9c <__fp_split3>
    19ae:	80 f3       	brcs	.-32     	; 0x1990 <__addsf3+0x8>
    19b0:	ba 17       	cp	r27, r26
    19b2:	62 07       	cpc	r22, r18
    19b4:	73 07       	cpc	r23, r19
    19b6:	84 07       	cpc	r24, r20
    19b8:	95 07       	cpc	r25, r21
    19ba:	18 f0       	brcs	.+6      	; 0x19c2 <__addsf3x+0x18>
    19bc:	71 f4       	brne	.+28     	; 0x19da <__addsf3x+0x30>
    19be:	9e f5       	brtc	.+102    	; 0x1a26 <__addsf3x+0x7c>
    19c0:	8f c1       	rjmp	.+798    	; 0x1ce0 <__fp_zero>
    19c2:	0e f4       	brtc	.+2      	; 0x19c6 <__addsf3x+0x1c>
    19c4:	e0 95       	com	r30
    19c6:	0b 2e       	mov	r0, r27
    19c8:	ba 2f       	mov	r27, r26
    19ca:	a0 2d       	mov	r26, r0
    19cc:	0b 01       	movw	r0, r22
    19ce:	b9 01       	movw	r22, r18
    19d0:	90 01       	movw	r18, r0
    19d2:	0c 01       	movw	r0, r24
    19d4:	ca 01       	movw	r24, r20
    19d6:	a0 01       	movw	r20, r0
    19d8:	11 24       	eor	r1, r1
    19da:	ff 27       	eor	r31, r31
    19dc:	59 1b       	sub	r21, r25
    19de:	99 f0       	breq	.+38     	; 0x1a06 <__addsf3x+0x5c>
    19e0:	59 3f       	cpi	r21, 0xF9	; 249
    19e2:	50 f4       	brcc	.+20     	; 0x19f8 <__addsf3x+0x4e>
    19e4:	50 3e       	cpi	r21, 0xE0	; 224
    19e6:	68 f1       	brcs	.+90     	; 0x1a42 <__addsf3x+0x98>
    19e8:	1a 16       	cp	r1, r26
    19ea:	f0 40       	sbci	r31, 0x00	; 0
    19ec:	a2 2f       	mov	r26, r18
    19ee:	23 2f       	mov	r18, r19
    19f0:	34 2f       	mov	r19, r20
    19f2:	44 27       	eor	r20, r20
    19f4:	58 5f       	subi	r21, 0xF8	; 248
    19f6:	f3 cf       	rjmp	.-26     	; 0x19de <__addsf3x+0x34>
    19f8:	46 95       	lsr	r20
    19fa:	37 95       	ror	r19
    19fc:	27 95       	ror	r18
    19fe:	a7 95       	ror	r26
    1a00:	f0 40       	sbci	r31, 0x00	; 0
    1a02:	53 95       	inc	r21
    1a04:	c9 f7       	brne	.-14     	; 0x19f8 <__addsf3x+0x4e>
    1a06:	7e f4       	brtc	.+30     	; 0x1a26 <__addsf3x+0x7c>
    1a08:	1f 16       	cp	r1, r31
    1a0a:	ba 0b       	sbc	r27, r26
    1a0c:	62 0b       	sbc	r22, r18
    1a0e:	73 0b       	sbc	r23, r19
    1a10:	84 0b       	sbc	r24, r20
    1a12:	ba f0       	brmi	.+46     	; 0x1a42 <__addsf3x+0x98>
    1a14:	91 50       	subi	r25, 0x01	; 1
    1a16:	a1 f0       	breq	.+40     	; 0x1a40 <__addsf3x+0x96>
    1a18:	ff 0f       	add	r31, r31
    1a1a:	bb 1f       	adc	r27, r27
    1a1c:	66 1f       	adc	r22, r22
    1a1e:	77 1f       	adc	r23, r23
    1a20:	88 1f       	adc	r24, r24
    1a22:	c2 f7       	brpl	.-16     	; 0x1a14 <__addsf3x+0x6a>
    1a24:	0e c0       	rjmp	.+28     	; 0x1a42 <__addsf3x+0x98>
    1a26:	ba 0f       	add	r27, r26
    1a28:	62 1f       	adc	r22, r18
    1a2a:	73 1f       	adc	r23, r19
    1a2c:	84 1f       	adc	r24, r20
    1a2e:	48 f4       	brcc	.+18     	; 0x1a42 <__addsf3x+0x98>
    1a30:	87 95       	ror	r24
    1a32:	77 95       	ror	r23
    1a34:	67 95       	ror	r22
    1a36:	b7 95       	ror	r27
    1a38:	f7 95       	ror	r31
    1a3a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a3c:	08 f0       	brcs	.+2      	; 0x1a40 <__addsf3x+0x96>
    1a3e:	b3 cf       	rjmp	.-154    	; 0x19a6 <__addsf3+0x1e>
    1a40:	93 95       	inc	r25
    1a42:	88 0f       	add	r24, r24
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <__addsf3x+0x9e>
    1a46:	99 27       	eor	r25, r25
    1a48:	ee 0f       	add	r30, r30
    1a4a:	97 95       	ror	r25
    1a4c:	87 95       	ror	r24
    1a4e:	08 95       	ret

00001a50 <__cmpsf2>:
    1a50:	d9 d0       	rcall	.+434    	; 0x1c04 <__fp_cmp>
    1a52:	08 f4       	brcc	.+2      	; 0x1a56 <__cmpsf2+0x6>
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	08 95       	ret

00001a58 <__divsf3>:
    1a58:	0c d0       	rcall	.+24     	; 0x1a72 <__divsf3x>
    1a5a:	0f c1       	rjmp	.+542    	; 0x1c7a <__fp_round>
    1a5c:	07 d1       	rcall	.+526    	; 0x1c6c <__fp_pscB>
    1a5e:	40 f0       	brcs	.+16     	; 0x1a70 <__divsf3+0x18>
    1a60:	fe d0       	rcall	.+508    	; 0x1c5e <__fp_pscA>
    1a62:	30 f0       	brcs	.+12     	; 0x1a70 <__divsf3+0x18>
    1a64:	21 f4       	brne	.+8      	; 0x1a6e <__divsf3+0x16>
    1a66:	5f 3f       	cpi	r21, 0xFF	; 255
    1a68:	19 f0       	breq	.+6      	; 0x1a70 <__divsf3+0x18>
    1a6a:	f0 c0       	rjmp	.+480    	; 0x1c4c <__fp_inf>
    1a6c:	51 11       	cpse	r21, r1
    1a6e:	39 c1       	rjmp	.+626    	; 0x1ce2 <__fp_szero>
    1a70:	f3 c0       	rjmp	.+486    	; 0x1c58 <__fp_nan>

00001a72 <__divsf3x>:
    1a72:	14 d1       	rcall	.+552    	; 0x1c9c <__fp_split3>
    1a74:	98 f3       	brcs	.-26     	; 0x1a5c <__divsf3+0x4>

00001a76 <__divsf3_pse>:
    1a76:	99 23       	and	r25, r25
    1a78:	c9 f3       	breq	.-14     	; 0x1a6c <__divsf3+0x14>
    1a7a:	55 23       	and	r21, r21
    1a7c:	b1 f3       	breq	.-20     	; 0x1a6a <__divsf3+0x12>
    1a7e:	95 1b       	sub	r25, r21
    1a80:	55 0b       	sbc	r21, r21
    1a82:	bb 27       	eor	r27, r27
    1a84:	aa 27       	eor	r26, r26
    1a86:	62 17       	cp	r22, r18
    1a88:	73 07       	cpc	r23, r19
    1a8a:	84 07       	cpc	r24, r20
    1a8c:	38 f0       	brcs	.+14     	; 0x1a9c <__divsf3_pse+0x26>
    1a8e:	9f 5f       	subi	r25, 0xFF	; 255
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	22 0f       	add	r18, r18
    1a94:	33 1f       	adc	r19, r19
    1a96:	44 1f       	adc	r20, r20
    1a98:	aa 1f       	adc	r26, r26
    1a9a:	a9 f3       	breq	.-22     	; 0x1a86 <__divsf3_pse+0x10>
    1a9c:	33 d0       	rcall	.+102    	; 0x1b04 <__divsf3_pse+0x8e>
    1a9e:	0e 2e       	mov	r0, r30
    1aa0:	3a f0       	brmi	.+14     	; 0x1ab0 <__divsf3_pse+0x3a>
    1aa2:	e0 e8       	ldi	r30, 0x80	; 128
    1aa4:	30 d0       	rcall	.+96     	; 0x1b06 <__divsf3_pse+0x90>
    1aa6:	91 50       	subi	r25, 0x01	; 1
    1aa8:	50 40       	sbci	r21, 0x00	; 0
    1aaa:	e6 95       	lsr	r30
    1aac:	00 1c       	adc	r0, r0
    1aae:	ca f7       	brpl	.-14     	; 0x1aa2 <__divsf3_pse+0x2c>
    1ab0:	29 d0       	rcall	.+82     	; 0x1b04 <__divsf3_pse+0x8e>
    1ab2:	fe 2f       	mov	r31, r30
    1ab4:	27 d0       	rcall	.+78     	; 0x1b04 <__divsf3_pse+0x8e>
    1ab6:	66 0f       	add	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	88 1f       	adc	r24, r24
    1abc:	bb 1f       	adc	r27, r27
    1abe:	26 17       	cp	r18, r22
    1ac0:	37 07       	cpc	r19, r23
    1ac2:	48 07       	cpc	r20, r24
    1ac4:	ab 07       	cpc	r26, r27
    1ac6:	b0 e8       	ldi	r27, 0x80	; 128
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <__divsf3_pse+0x56>
    1aca:	bb 0b       	sbc	r27, r27
    1acc:	80 2d       	mov	r24, r0
    1ace:	bf 01       	movw	r22, r30
    1ad0:	ff 27       	eor	r31, r31
    1ad2:	93 58       	subi	r25, 0x83	; 131
    1ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad6:	2a f0       	brmi	.+10     	; 0x1ae2 <__divsf3_pse+0x6c>
    1ad8:	9e 3f       	cpi	r25, 0xFE	; 254
    1ada:	51 05       	cpc	r21, r1
    1adc:	68 f0       	brcs	.+26     	; 0x1af8 <__divsf3_pse+0x82>
    1ade:	b6 c0       	rjmp	.+364    	; 0x1c4c <__fp_inf>
    1ae0:	00 c1       	rjmp	.+512    	; 0x1ce2 <__fp_szero>
    1ae2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae4:	ec f3       	brlt	.-6      	; 0x1ae0 <__divsf3_pse+0x6a>
    1ae6:	98 3e       	cpi	r25, 0xE8	; 232
    1ae8:	dc f3       	brlt	.-10     	; 0x1ae0 <__divsf3_pse+0x6a>
    1aea:	86 95       	lsr	r24
    1aec:	77 95       	ror	r23
    1aee:	67 95       	ror	r22
    1af0:	b7 95       	ror	r27
    1af2:	f7 95       	ror	r31
    1af4:	9f 5f       	subi	r25, 0xFF	; 255
    1af6:	c9 f7       	brne	.-14     	; 0x1aea <__divsf3_pse+0x74>
    1af8:	88 0f       	add	r24, r24
    1afa:	91 1d       	adc	r25, r1
    1afc:	96 95       	lsr	r25
    1afe:	87 95       	ror	r24
    1b00:	97 f9       	bld	r25, 7
    1b02:	08 95       	ret
    1b04:	e1 e0       	ldi	r30, 0x01	; 1
    1b06:	66 0f       	add	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	88 1f       	adc	r24, r24
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	62 17       	cp	r22, r18
    1b10:	73 07       	cpc	r23, r19
    1b12:	84 07       	cpc	r24, r20
    1b14:	ba 07       	cpc	r27, r26
    1b16:	20 f0       	brcs	.+8      	; 0x1b20 <__divsf3_pse+0xaa>
    1b18:	62 1b       	sub	r22, r18
    1b1a:	73 0b       	sbc	r23, r19
    1b1c:	84 0b       	sbc	r24, r20
    1b1e:	ba 0b       	sbc	r27, r26
    1b20:	ee 1f       	adc	r30, r30
    1b22:	88 f7       	brcc	.-30     	; 0x1b06 <__divsf3_pse+0x90>
    1b24:	e0 95       	com	r30
    1b26:	08 95       	ret

00001b28 <__fixsfsi>:
    1b28:	04 d0       	rcall	.+8      	; 0x1b32 <__fixunssfsi>
    1b2a:	68 94       	set
    1b2c:	b1 11       	cpse	r27, r1
    1b2e:	d9 c0       	rjmp	.+434    	; 0x1ce2 <__fp_szero>
    1b30:	08 95       	ret

00001b32 <__fixunssfsi>:
    1b32:	bc d0       	rcall	.+376    	; 0x1cac <__fp_splitA>
    1b34:	88 f0       	brcs	.+34     	; 0x1b58 <__fixunssfsi+0x26>
    1b36:	9f 57       	subi	r25, 0x7F	; 127
    1b38:	90 f0       	brcs	.+36     	; 0x1b5e <__fixunssfsi+0x2c>
    1b3a:	b9 2f       	mov	r27, r25
    1b3c:	99 27       	eor	r25, r25
    1b3e:	b7 51       	subi	r27, 0x17	; 23
    1b40:	a0 f0       	brcs	.+40     	; 0x1b6a <__fixunssfsi+0x38>
    1b42:	d1 f0       	breq	.+52     	; 0x1b78 <__fixunssfsi+0x46>
    1b44:	66 0f       	add	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	88 1f       	adc	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	1a f0       	brmi	.+6      	; 0x1b54 <__fixunssfsi+0x22>
    1b4e:	ba 95       	dec	r27
    1b50:	c9 f7       	brne	.-14     	; 0x1b44 <__fixunssfsi+0x12>
    1b52:	12 c0       	rjmp	.+36     	; 0x1b78 <__fixunssfsi+0x46>
    1b54:	b1 30       	cpi	r27, 0x01	; 1
    1b56:	81 f0       	breq	.+32     	; 0x1b78 <__fixunssfsi+0x46>
    1b58:	c3 d0       	rcall	.+390    	; 0x1ce0 <__fp_zero>
    1b5a:	b1 e0       	ldi	r27, 0x01	; 1
    1b5c:	08 95       	ret
    1b5e:	c0 c0       	rjmp	.+384    	; 0x1ce0 <__fp_zero>
    1b60:	67 2f       	mov	r22, r23
    1b62:	78 2f       	mov	r23, r24
    1b64:	88 27       	eor	r24, r24
    1b66:	b8 5f       	subi	r27, 0xF8	; 248
    1b68:	39 f0       	breq	.+14     	; 0x1b78 <__fixunssfsi+0x46>
    1b6a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b6c:	cc f3       	brlt	.-14     	; 0x1b60 <__fixunssfsi+0x2e>
    1b6e:	86 95       	lsr	r24
    1b70:	77 95       	ror	r23
    1b72:	67 95       	ror	r22
    1b74:	b3 95       	inc	r27
    1b76:	d9 f7       	brne	.-10     	; 0x1b6e <__fixunssfsi+0x3c>
    1b78:	3e f4       	brtc	.+14     	; 0x1b88 <__fixunssfsi+0x56>
    1b7a:	90 95       	com	r25
    1b7c:	80 95       	com	r24
    1b7e:	70 95       	com	r23
    1b80:	61 95       	neg	r22
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	8f 4f       	sbci	r24, 0xFF	; 255
    1b86:	9f 4f       	sbci	r25, 0xFF	; 255
    1b88:	08 95       	ret

00001b8a <__floatunsisf>:
    1b8a:	e8 94       	clt
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <__floatsisf+0x12>

00001b8e <__floatsisf>:
    1b8e:	97 fb       	bst	r25, 7
    1b90:	3e f4       	brtc	.+14     	; 0x1ba0 <__floatsisf+0x12>
    1b92:	90 95       	com	r25
    1b94:	80 95       	com	r24
    1b96:	70 95       	com	r23
    1b98:	61 95       	neg	r22
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	99 23       	and	r25, r25
    1ba2:	a9 f0       	breq	.+42     	; 0x1bce <__floatsisf+0x40>
    1ba4:	f9 2f       	mov	r31, r25
    1ba6:	96 e9       	ldi	r25, 0x96	; 150
    1ba8:	bb 27       	eor	r27, r27
    1baa:	93 95       	inc	r25
    1bac:	f6 95       	lsr	r31
    1bae:	87 95       	ror	r24
    1bb0:	77 95       	ror	r23
    1bb2:	67 95       	ror	r22
    1bb4:	b7 95       	ror	r27
    1bb6:	f1 11       	cpse	r31, r1
    1bb8:	f8 cf       	rjmp	.-16     	; 0x1baa <__floatsisf+0x1c>
    1bba:	fa f4       	brpl	.+62     	; 0x1bfa <__floatsisf+0x6c>
    1bbc:	bb 0f       	add	r27, r27
    1bbe:	11 f4       	brne	.+4      	; 0x1bc4 <__floatsisf+0x36>
    1bc0:	60 ff       	sbrs	r22, 0
    1bc2:	1b c0       	rjmp	.+54     	; 0x1bfa <__floatsisf+0x6c>
    1bc4:	6f 5f       	subi	r22, 0xFF	; 255
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	16 c0       	rjmp	.+44     	; 0x1bfa <__floatsisf+0x6c>
    1bce:	88 23       	and	r24, r24
    1bd0:	11 f0       	breq	.+4      	; 0x1bd6 <__floatsisf+0x48>
    1bd2:	96 e9       	ldi	r25, 0x96	; 150
    1bd4:	11 c0       	rjmp	.+34     	; 0x1bf8 <__floatsisf+0x6a>
    1bd6:	77 23       	and	r23, r23
    1bd8:	21 f0       	breq	.+8      	; 0x1be2 <__floatsisf+0x54>
    1bda:	9e e8       	ldi	r25, 0x8E	; 142
    1bdc:	87 2f       	mov	r24, r23
    1bde:	76 2f       	mov	r23, r22
    1be0:	05 c0       	rjmp	.+10     	; 0x1bec <__floatsisf+0x5e>
    1be2:	66 23       	and	r22, r22
    1be4:	71 f0       	breq	.+28     	; 0x1c02 <__floatsisf+0x74>
    1be6:	96 e8       	ldi	r25, 0x86	; 134
    1be8:	86 2f       	mov	r24, r22
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	2a f0       	brmi	.+10     	; 0x1bfa <__floatsisf+0x6c>
    1bf0:	9a 95       	dec	r25
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	da f7       	brpl	.-10     	; 0x1bf0 <__floatsisf+0x62>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	96 95       	lsr	r25
    1bfe:	87 95       	ror	r24
    1c00:	97 f9       	bld	r25, 7
    1c02:	08 95       	ret

00001c04 <__fp_cmp>:
    1c04:	99 0f       	add	r25, r25
    1c06:	00 08       	sbc	r0, r0
    1c08:	55 0f       	add	r21, r21
    1c0a:	aa 0b       	sbc	r26, r26
    1c0c:	e0 e8       	ldi	r30, 0x80	; 128
    1c0e:	fe ef       	ldi	r31, 0xFE	; 254
    1c10:	16 16       	cp	r1, r22
    1c12:	17 06       	cpc	r1, r23
    1c14:	e8 07       	cpc	r30, r24
    1c16:	f9 07       	cpc	r31, r25
    1c18:	c0 f0       	brcs	.+48     	; 0x1c4a <__fp_cmp+0x46>
    1c1a:	12 16       	cp	r1, r18
    1c1c:	13 06       	cpc	r1, r19
    1c1e:	e4 07       	cpc	r30, r20
    1c20:	f5 07       	cpc	r31, r21
    1c22:	98 f0       	brcs	.+38     	; 0x1c4a <__fp_cmp+0x46>
    1c24:	62 1b       	sub	r22, r18
    1c26:	73 0b       	sbc	r23, r19
    1c28:	84 0b       	sbc	r24, r20
    1c2a:	95 0b       	sbc	r25, r21
    1c2c:	39 f4       	brne	.+14     	; 0x1c3c <__fp_cmp+0x38>
    1c2e:	0a 26       	eor	r0, r26
    1c30:	61 f0       	breq	.+24     	; 0x1c4a <__fp_cmp+0x46>
    1c32:	23 2b       	or	r18, r19
    1c34:	24 2b       	or	r18, r20
    1c36:	25 2b       	or	r18, r21
    1c38:	21 f4       	brne	.+8      	; 0x1c42 <__fp_cmp+0x3e>
    1c3a:	08 95       	ret
    1c3c:	0a 26       	eor	r0, r26
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <__fp_cmp+0x3e>
    1c40:	a1 40       	sbci	r26, 0x01	; 1
    1c42:	a6 95       	lsr	r26
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	81 1d       	adc	r24, r1
    1c48:	81 1d       	adc	r24, r1
    1c4a:	08 95       	ret

00001c4c <__fp_inf>:
    1c4c:	97 f9       	bld	r25, 7
    1c4e:	9f 67       	ori	r25, 0x7F	; 127
    1c50:	80 e8       	ldi	r24, 0x80	; 128
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	08 95       	ret

00001c58 <__fp_nan>:
    1c58:	9f ef       	ldi	r25, 0xFF	; 255
    1c5a:	80 ec       	ldi	r24, 0xC0	; 192
    1c5c:	08 95       	ret

00001c5e <__fp_pscA>:
    1c5e:	00 24       	eor	r0, r0
    1c60:	0a 94       	dec	r0
    1c62:	16 16       	cp	r1, r22
    1c64:	17 06       	cpc	r1, r23
    1c66:	18 06       	cpc	r1, r24
    1c68:	09 06       	cpc	r0, r25
    1c6a:	08 95       	ret

00001c6c <__fp_pscB>:
    1c6c:	00 24       	eor	r0, r0
    1c6e:	0a 94       	dec	r0
    1c70:	12 16       	cp	r1, r18
    1c72:	13 06       	cpc	r1, r19
    1c74:	14 06       	cpc	r1, r20
    1c76:	05 06       	cpc	r0, r21
    1c78:	08 95       	ret

00001c7a <__fp_round>:
    1c7a:	09 2e       	mov	r0, r25
    1c7c:	03 94       	inc	r0
    1c7e:	00 0c       	add	r0, r0
    1c80:	11 f4       	brne	.+4      	; 0x1c86 <__fp_round+0xc>
    1c82:	88 23       	and	r24, r24
    1c84:	52 f0       	brmi	.+20     	; 0x1c9a <__fp_round+0x20>
    1c86:	bb 0f       	add	r27, r27
    1c88:	40 f4       	brcc	.+16     	; 0x1c9a <__fp_round+0x20>
    1c8a:	bf 2b       	or	r27, r31
    1c8c:	11 f4       	brne	.+4      	; 0x1c92 <__fp_round+0x18>
    1c8e:	60 ff       	sbrs	r22, 0
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <__fp_round+0x20>
    1c92:	6f 5f       	subi	r22, 0xFF	; 255
    1c94:	7f 4f       	sbci	r23, 0xFF	; 255
    1c96:	8f 4f       	sbci	r24, 0xFF	; 255
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	08 95       	ret

00001c9c <__fp_split3>:
    1c9c:	57 fd       	sbrc	r21, 7
    1c9e:	90 58       	subi	r25, 0x80	; 128
    1ca0:	44 0f       	add	r20, r20
    1ca2:	55 1f       	adc	r21, r21
    1ca4:	59 f0       	breq	.+22     	; 0x1cbc <__fp_splitA+0x10>
    1ca6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca8:	71 f0       	breq	.+28     	; 0x1cc6 <__fp_splitA+0x1a>
    1caa:	47 95       	ror	r20

00001cac <__fp_splitA>:
    1cac:	88 0f       	add	r24, r24
    1cae:	97 fb       	bst	r25, 7
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	61 f0       	breq	.+24     	; 0x1ccc <__fp_splitA+0x20>
    1cb4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cb6:	79 f0       	breq	.+30     	; 0x1cd6 <__fp_splitA+0x2a>
    1cb8:	87 95       	ror	r24
    1cba:	08 95       	ret
    1cbc:	12 16       	cp	r1, r18
    1cbe:	13 06       	cpc	r1, r19
    1cc0:	14 06       	cpc	r1, r20
    1cc2:	55 1f       	adc	r21, r21
    1cc4:	f2 cf       	rjmp	.-28     	; 0x1caa <__fp_split3+0xe>
    1cc6:	46 95       	lsr	r20
    1cc8:	f1 df       	rcall	.-30     	; 0x1cac <__fp_splitA>
    1cca:	08 c0       	rjmp	.+16     	; 0x1cdc <__fp_splitA+0x30>
    1ccc:	16 16       	cp	r1, r22
    1cce:	17 06       	cpc	r1, r23
    1cd0:	18 06       	cpc	r1, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	f1 cf       	rjmp	.-30     	; 0x1cb8 <__fp_splitA+0xc>
    1cd6:	86 95       	lsr	r24
    1cd8:	71 05       	cpc	r23, r1
    1cda:	61 05       	cpc	r22, r1
    1cdc:	08 94       	sec
    1cde:	08 95       	ret

00001ce0 <__fp_zero>:
    1ce0:	e8 94       	clt

00001ce2 <__fp_szero>:
    1ce2:	bb 27       	eor	r27, r27
    1ce4:	66 27       	eor	r22, r22
    1ce6:	77 27       	eor	r23, r23
    1ce8:	cb 01       	movw	r24, r22
    1cea:	97 f9       	bld	r25, 7
    1cec:	08 95       	ret

00001cee <__gesf2>:
    1cee:	8a df       	rcall	.-236    	; 0x1c04 <__fp_cmp>
    1cf0:	08 f4       	brcc	.+2      	; 0x1cf4 <__gesf2+0x6>
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	08 95       	ret

00001cf6 <__mulsf3>:
    1cf6:	0b d0       	rcall	.+22     	; 0x1d0e <__mulsf3x>
    1cf8:	c0 cf       	rjmp	.-128    	; 0x1c7a <__fp_round>
    1cfa:	b1 df       	rcall	.-158    	; 0x1c5e <__fp_pscA>
    1cfc:	28 f0       	brcs	.+10     	; 0x1d08 <__mulsf3+0x12>
    1cfe:	b6 df       	rcall	.-148    	; 0x1c6c <__fp_pscB>
    1d00:	18 f0       	brcs	.+6      	; 0x1d08 <__mulsf3+0x12>
    1d02:	95 23       	and	r25, r21
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <__mulsf3+0x12>
    1d06:	a2 cf       	rjmp	.-188    	; 0x1c4c <__fp_inf>
    1d08:	a7 cf       	rjmp	.-178    	; 0x1c58 <__fp_nan>
    1d0a:	11 24       	eor	r1, r1
    1d0c:	ea cf       	rjmp	.-44     	; 0x1ce2 <__fp_szero>

00001d0e <__mulsf3x>:
    1d0e:	c6 df       	rcall	.-116    	; 0x1c9c <__fp_split3>
    1d10:	a0 f3       	brcs	.-24     	; 0x1cfa <__mulsf3+0x4>

00001d12 <__mulsf3_pse>:
    1d12:	95 9f       	mul	r25, r21
    1d14:	d1 f3       	breq	.-12     	; 0x1d0a <__mulsf3+0x14>
    1d16:	95 0f       	add	r25, r21
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	55 1f       	adc	r21, r21
    1d1c:	62 9f       	mul	r22, r18
    1d1e:	f0 01       	movw	r30, r0
    1d20:	72 9f       	mul	r23, r18
    1d22:	bb 27       	eor	r27, r27
    1d24:	f0 0d       	add	r31, r0
    1d26:	b1 1d       	adc	r27, r1
    1d28:	63 9f       	mul	r22, r19
    1d2a:	aa 27       	eor	r26, r26
    1d2c:	f0 0d       	add	r31, r0
    1d2e:	b1 1d       	adc	r27, r1
    1d30:	aa 1f       	adc	r26, r26
    1d32:	64 9f       	mul	r22, r20
    1d34:	66 27       	eor	r22, r22
    1d36:	b0 0d       	add	r27, r0
    1d38:	a1 1d       	adc	r26, r1
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	82 9f       	mul	r24, r18
    1d3e:	22 27       	eor	r18, r18
    1d40:	b0 0d       	add	r27, r0
    1d42:	a1 1d       	adc	r26, r1
    1d44:	62 1f       	adc	r22, r18
    1d46:	73 9f       	mul	r23, r19
    1d48:	b0 0d       	add	r27, r0
    1d4a:	a1 1d       	adc	r26, r1
    1d4c:	62 1f       	adc	r22, r18
    1d4e:	83 9f       	mul	r24, r19
    1d50:	a0 0d       	add	r26, r0
    1d52:	61 1d       	adc	r22, r1
    1d54:	22 1f       	adc	r18, r18
    1d56:	74 9f       	mul	r23, r20
    1d58:	33 27       	eor	r19, r19
    1d5a:	a0 0d       	add	r26, r0
    1d5c:	61 1d       	adc	r22, r1
    1d5e:	23 1f       	adc	r18, r19
    1d60:	84 9f       	mul	r24, r20
    1d62:	60 0d       	add	r22, r0
    1d64:	21 1d       	adc	r18, r1
    1d66:	82 2f       	mov	r24, r18
    1d68:	76 2f       	mov	r23, r22
    1d6a:	6a 2f       	mov	r22, r26
    1d6c:	11 24       	eor	r1, r1
    1d6e:	9f 57       	subi	r25, 0x7F	; 127
    1d70:	50 40       	sbci	r21, 0x00	; 0
    1d72:	8a f0       	brmi	.+34     	; 0x1d96 <__mulsf3_pse+0x84>
    1d74:	e1 f0       	breq	.+56     	; 0x1dae <__mulsf3_pse+0x9c>
    1d76:	88 23       	and	r24, r24
    1d78:	4a f0       	brmi	.+18     	; 0x1d8c <__mulsf3_pse+0x7a>
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	bb 1f       	adc	r27, r27
    1d80:	66 1f       	adc	r22, r22
    1d82:	77 1f       	adc	r23, r23
    1d84:	88 1f       	adc	r24, r24
    1d86:	91 50       	subi	r25, 0x01	; 1
    1d88:	50 40       	sbci	r21, 0x00	; 0
    1d8a:	a9 f7       	brne	.-22     	; 0x1d76 <__mulsf3_pse+0x64>
    1d8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d8e:	51 05       	cpc	r21, r1
    1d90:	70 f0       	brcs	.+28     	; 0x1dae <__mulsf3_pse+0x9c>
    1d92:	5c cf       	rjmp	.-328    	; 0x1c4c <__fp_inf>
    1d94:	a6 cf       	rjmp	.-180    	; 0x1ce2 <__fp_szero>
    1d96:	5f 3f       	cpi	r21, 0xFF	; 255
    1d98:	ec f3       	brlt	.-6      	; 0x1d94 <__mulsf3_pse+0x82>
    1d9a:	98 3e       	cpi	r25, 0xE8	; 232
    1d9c:	dc f3       	brlt	.-10     	; 0x1d94 <__mulsf3_pse+0x82>
    1d9e:	86 95       	lsr	r24
    1da0:	77 95       	ror	r23
    1da2:	67 95       	ror	r22
    1da4:	b7 95       	ror	r27
    1da6:	f7 95       	ror	r31
    1da8:	e7 95       	ror	r30
    1daa:	9f 5f       	subi	r25, 0xFF	; 255
    1dac:	c1 f7       	brne	.-16     	; 0x1d9e <__mulsf3_pse+0x8c>
    1dae:	fe 2b       	or	r31, r30
    1db0:	88 0f       	add	r24, r24
    1db2:	91 1d       	adc	r25, r1
    1db4:	96 95       	lsr	r25
    1db6:	87 95       	ror	r24
    1db8:	97 f9       	bld	r25, 7
    1dba:	08 95       	ret
    1dbc:	11 f4       	brne	.+4      	; 0x1dc2 <__mulsf3_pse+0xb0>
    1dbe:	0e f4       	brtc	.+2      	; 0x1dc2 <__mulsf3_pse+0xb0>
    1dc0:	4b cf       	rjmp	.-362    	; 0x1c58 <__fp_nan>
    1dc2:	3e c0       	rjmp	.+124    	; 0x1e40 <__fp_mpack>

00001dc4 <sqrt>:
    1dc4:	73 df       	rcall	.-282    	; 0x1cac <__fp_splitA>
    1dc6:	d0 f3       	brcs	.-12     	; 0x1dbc <__mulsf3_pse+0xaa>
    1dc8:	99 23       	and	r25, r25
    1dca:	d9 f3       	breq	.-10     	; 0x1dc2 <__mulsf3_pse+0xb0>
    1dcc:	ce f3       	brts	.-14     	; 0x1dc0 <__mulsf3_pse+0xae>
    1dce:	9f 57       	subi	r25, 0x7F	; 127
    1dd0:	55 0b       	sbc	r21, r21
    1dd2:	87 ff       	sbrs	r24, 7
    1dd4:	43 d0       	rcall	.+134    	; 0x1e5c <__fp_norm2>
    1dd6:	00 24       	eor	r0, r0
    1dd8:	a0 e6       	ldi	r26, 0x60	; 96
    1dda:	40 ea       	ldi	r20, 0xA0	; 160
    1ddc:	90 01       	movw	r18, r0
    1dde:	80 58       	subi	r24, 0x80	; 128
    1de0:	56 95       	lsr	r21
    1de2:	97 95       	ror	r25
    1de4:	28 f4       	brcc	.+10     	; 0x1df0 <sqrt+0x2c>
    1de6:	80 5c       	subi	r24, 0xC0	; 192
    1de8:	66 0f       	add	r22, r22
    1dea:	77 1f       	adc	r23, r23
    1dec:	88 1f       	adc	r24, r24
    1dee:	20 f0       	brcs	.+8      	; 0x1df8 <sqrt+0x34>
    1df0:	26 17       	cp	r18, r22
    1df2:	37 07       	cpc	r19, r23
    1df4:	48 07       	cpc	r20, r24
    1df6:	30 f4       	brcc	.+12     	; 0x1e04 <sqrt+0x40>
    1df8:	62 1b       	sub	r22, r18
    1dfa:	73 0b       	sbc	r23, r19
    1dfc:	84 0b       	sbc	r24, r20
    1dfe:	20 29       	or	r18, r0
    1e00:	31 29       	or	r19, r1
    1e02:	4a 2b       	or	r20, r26
    1e04:	a6 95       	lsr	r26
    1e06:	17 94       	ror	r1
    1e08:	07 94       	ror	r0
    1e0a:	20 25       	eor	r18, r0
    1e0c:	31 25       	eor	r19, r1
    1e0e:	4a 27       	eor	r20, r26
    1e10:	58 f7       	brcc	.-42     	; 0x1de8 <sqrt+0x24>
    1e12:	66 0f       	add	r22, r22
    1e14:	77 1f       	adc	r23, r23
    1e16:	88 1f       	adc	r24, r24
    1e18:	20 f0       	brcs	.+8      	; 0x1e22 <sqrt+0x5e>
    1e1a:	26 17       	cp	r18, r22
    1e1c:	37 07       	cpc	r19, r23
    1e1e:	48 07       	cpc	r20, r24
    1e20:	30 f4       	brcc	.+12     	; 0x1e2e <sqrt+0x6a>
    1e22:	62 0b       	sbc	r22, r18
    1e24:	73 0b       	sbc	r23, r19
    1e26:	84 0b       	sbc	r24, r20
    1e28:	20 0d       	add	r18, r0
    1e2a:	31 1d       	adc	r19, r1
    1e2c:	41 1d       	adc	r20, r1
    1e2e:	a0 95       	com	r26
    1e30:	81 f7       	brne	.-32     	; 0x1e12 <sqrt+0x4e>
    1e32:	b9 01       	movw	r22, r18
    1e34:	84 2f       	mov	r24, r20
    1e36:	91 58       	subi	r25, 0x81	; 129
    1e38:	88 0f       	add	r24, r24
    1e3a:	96 95       	lsr	r25
    1e3c:	87 95       	ror	r24
    1e3e:	08 95       	ret

00001e40 <__fp_mpack>:
    1e40:	9f 3f       	cpi	r25, 0xFF	; 255
    1e42:	31 f0       	breq	.+12     	; 0x1e50 <__fp_mpack_finite+0xc>

00001e44 <__fp_mpack_finite>:
    1e44:	91 50       	subi	r25, 0x01	; 1
    1e46:	20 f4       	brcc	.+8      	; 0x1e50 <__fp_mpack_finite+0xc>
    1e48:	87 95       	ror	r24
    1e4a:	77 95       	ror	r23
    1e4c:	67 95       	ror	r22
    1e4e:	b7 95       	ror	r27
    1e50:	88 0f       	add	r24, r24
    1e52:	91 1d       	adc	r25, r1
    1e54:	96 95       	lsr	r25
    1e56:	87 95       	ror	r24
    1e58:	97 f9       	bld	r25, 7
    1e5a:	08 95       	ret

00001e5c <__fp_norm2>:
    1e5c:	91 50       	subi	r25, 0x01	; 1
    1e5e:	50 40       	sbci	r21, 0x00	; 0
    1e60:	66 0f       	add	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	88 1f       	adc	r24, r24
    1e66:	d2 f7       	brpl	.-12     	; 0x1e5c <__fp_norm2>
    1e68:	08 95       	ret

00001e6a <__tablejump2__>:
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	88 1f       	adc	r24, r24
    1e70:	8b bf       	out	0x3b, r24	; 59
    1e72:	07 90       	elpm	r0, Z+
    1e74:	f6 91       	elpm	r31, Z
    1e76:	e0 2d       	mov	r30, r0
    1e78:	19 94       	eijmp

00001e7a <dtostrf>:
    1e7a:	ef 92       	push	r14
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	e8 01       	movw	r28, r16
    1e86:	47 fd       	sbrc	r20, 7
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <dtostrf+0x14>
    1e8a:	34 e0       	ldi	r19, 0x04	; 4
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <dtostrf+0x16>
    1e8e:	34 e1       	ldi	r19, 0x14	; 20
    1e90:	04 2e       	mov	r0, r20
    1e92:	00 0c       	add	r0, r0
    1e94:	55 0b       	sbc	r21, r21
    1e96:	57 ff       	sbrs	r21, 7
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <dtostrf+0x26>
    1e9a:	51 95       	neg	r21
    1e9c:	41 95       	neg	r20
    1e9e:	51 09       	sbc	r21, r1
    1ea0:	e3 2e       	mov	r14, r19
    1ea2:	02 2f       	mov	r16, r18
    1ea4:	24 2f       	mov	r18, r20
    1ea6:	ae 01       	movw	r20, r28
    1ea8:	3b d2       	rcall	.+1142   	; 0x2320 <dtoa_prf>
    1eaa:	ce 01       	movw	r24, r28
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	ef 90       	pop	r14
    1eb6:	08 95       	ret

00001eb8 <strcmp>:
    1eb8:	fb 01       	movw	r30, r22
    1eba:	dc 01       	movw	r26, r24
    1ebc:	8d 91       	ld	r24, X+
    1ebe:	01 90       	ld	r0, Z+
    1ec0:	80 19       	sub	r24, r0
    1ec2:	01 10       	cpse	r0, r1
    1ec4:	d9 f3       	breq	.-10     	; 0x1ebc <strcmp+0x4>
    1ec6:	99 0b       	sbc	r25, r25
    1ec8:	08 95       	ret

00001eca <sprintf>:
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	0e 89       	ldd	r16, Y+22	; 0x16
    1ee4:	1f 89       	ldd	r17, Y+23	; 0x17
    1ee6:	86 e0       	ldi	r24, 0x06	; 6
    1ee8:	8c 83       	std	Y+4, r24	; 0x04
    1eea:	1a 83       	std	Y+2, r17	; 0x02
    1eec:	09 83       	std	Y+1, r16	; 0x01
    1eee:	8f ef       	ldi	r24, 0xFF	; 255
    1ef0:	9f e7       	ldi	r25, 0x7F	; 127
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	ae 01       	movw	r20, r28
    1ef8:	46 5e       	subi	r20, 0xE6	; 230
    1efa:	5f 4f       	sbci	r21, 0xFF	; 255
    1efc:	68 8d       	ldd	r22, Y+24	; 0x18
    1efe:	79 8d       	ldd	r23, Y+25	; 0x19
    1f00:	ce 01       	movw	r24, r28
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	10 d0       	rcall	.+32     	; 0x1f26 <vfprintf>
    1f06:	ef 81       	ldd	r30, Y+7	; 0x07
    1f08:	f8 85       	ldd	r31, Y+8	; 0x08
    1f0a:	e0 0f       	add	r30, r16
    1f0c:	f1 1f       	adc	r31, r17
    1f0e:	10 82       	st	Z, r1
    1f10:	2e 96       	adiw	r28, 0x0e	; 14
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	08 95       	ret

00001f26 <vfprintf>:
    1f26:	2f 92       	push	r2
    1f28:	3f 92       	push	r3
    1f2a:	4f 92       	push	r4
    1f2c:	5f 92       	push	r5
    1f2e:	6f 92       	push	r6
    1f30:	7f 92       	push	r7
    1f32:	8f 92       	push	r8
    1f34:	9f 92       	push	r9
    1f36:	af 92       	push	r10
    1f38:	bf 92       	push	r11
    1f3a:	cf 92       	push	r12
    1f3c:	df 92       	push	r13
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	2b 97       	sbiw	r28, 0x0b	; 11
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	6c 01       	movw	r12, r24
    1f5c:	7b 01       	movw	r14, r22
    1f5e:	8a 01       	movw	r16, r20
    1f60:	fc 01       	movw	r30, r24
    1f62:	17 82       	std	Z+7, r1	; 0x07
    1f64:	16 82       	std	Z+6, r1	; 0x06
    1f66:	83 81       	ldd	r24, Z+3	; 0x03
    1f68:	81 ff       	sbrs	r24, 1
    1f6a:	bf c1       	rjmp	.+894    	; 0x22ea <__stack+0xeb>
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	3c 01       	movw	r6, r24
    1f72:	f6 01       	movw	r30, r12
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	f7 01       	movw	r30, r14
    1f78:	93 fd       	sbrc	r25, 3
    1f7a:	85 91       	lpm	r24, Z+
    1f7c:	93 ff       	sbrs	r25, 3
    1f7e:	81 91       	ld	r24, Z+
    1f80:	7f 01       	movw	r14, r30
    1f82:	88 23       	and	r24, r24
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <vfprintf+0x62>
    1f86:	ad c1       	rjmp	.+858    	; 0x22e2 <__stack+0xe3>
    1f88:	85 32       	cpi	r24, 0x25	; 37
    1f8a:	39 f4       	brne	.+14     	; 0x1f9a <vfprintf+0x74>
    1f8c:	93 fd       	sbrc	r25, 3
    1f8e:	85 91       	lpm	r24, Z+
    1f90:	93 ff       	sbrs	r25, 3
    1f92:	81 91       	ld	r24, Z+
    1f94:	7f 01       	movw	r14, r30
    1f96:	85 32       	cpi	r24, 0x25	; 37
    1f98:	21 f4       	brne	.+8      	; 0x1fa2 <vfprintf+0x7c>
    1f9a:	b6 01       	movw	r22, r12
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	24 d4       	rcall	.+2120   	; 0x27e8 <fputc>
    1fa0:	e8 cf       	rjmp	.-48     	; 0x1f72 <vfprintf+0x4c>
    1fa2:	91 2c       	mov	r9, r1
    1fa4:	21 2c       	mov	r2, r1
    1fa6:	31 2c       	mov	r3, r1
    1fa8:	ff e1       	ldi	r31, 0x1F	; 31
    1faa:	f3 15       	cp	r31, r3
    1fac:	d8 f0       	brcs	.+54     	; 0x1fe4 <vfprintf+0xbe>
    1fae:	8b 32       	cpi	r24, 0x2B	; 43
    1fb0:	79 f0       	breq	.+30     	; 0x1fd0 <vfprintf+0xaa>
    1fb2:	38 f4       	brcc	.+14     	; 0x1fc2 <vfprintf+0x9c>
    1fb4:	80 32       	cpi	r24, 0x20	; 32
    1fb6:	79 f0       	breq	.+30     	; 0x1fd6 <vfprintf+0xb0>
    1fb8:	83 32       	cpi	r24, 0x23	; 35
    1fba:	a1 f4       	brne	.+40     	; 0x1fe4 <vfprintf+0xbe>
    1fbc:	23 2d       	mov	r18, r3
    1fbe:	20 61       	ori	r18, 0x10	; 16
    1fc0:	1d c0       	rjmp	.+58     	; 0x1ffc <vfprintf+0xd6>
    1fc2:	8d 32       	cpi	r24, 0x2D	; 45
    1fc4:	61 f0       	breq	.+24     	; 0x1fde <vfprintf+0xb8>
    1fc6:	80 33       	cpi	r24, 0x30	; 48
    1fc8:	69 f4       	brne	.+26     	; 0x1fe4 <vfprintf+0xbe>
    1fca:	23 2d       	mov	r18, r3
    1fcc:	21 60       	ori	r18, 0x01	; 1
    1fce:	16 c0       	rjmp	.+44     	; 0x1ffc <vfprintf+0xd6>
    1fd0:	83 2d       	mov	r24, r3
    1fd2:	82 60       	ori	r24, 0x02	; 2
    1fd4:	38 2e       	mov	r3, r24
    1fd6:	e3 2d       	mov	r30, r3
    1fd8:	e4 60       	ori	r30, 0x04	; 4
    1fda:	3e 2e       	mov	r3, r30
    1fdc:	2a c0       	rjmp	.+84     	; 0x2032 <vfprintf+0x10c>
    1fde:	f3 2d       	mov	r31, r3
    1fe0:	f8 60       	ori	r31, 0x08	; 8
    1fe2:	1d c0       	rjmp	.+58     	; 0x201e <vfprintf+0xf8>
    1fe4:	37 fc       	sbrc	r3, 7
    1fe6:	2d c0       	rjmp	.+90     	; 0x2042 <vfprintf+0x11c>
    1fe8:	20 ed       	ldi	r18, 0xD0	; 208
    1fea:	28 0f       	add	r18, r24
    1fec:	2a 30       	cpi	r18, 0x0A	; 10
    1fee:	40 f0       	brcs	.+16     	; 0x2000 <vfprintf+0xda>
    1ff0:	8e 32       	cpi	r24, 0x2E	; 46
    1ff2:	b9 f4       	brne	.+46     	; 0x2022 <vfprintf+0xfc>
    1ff4:	36 fc       	sbrc	r3, 6
    1ff6:	75 c1       	rjmp	.+746    	; 0x22e2 <__stack+0xe3>
    1ff8:	23 2d       	mov	r18, r3
    1ffa:	20 64       	ori	r18, 0x40	; 64
    1ffc:	32 2e       	mov	r3, r18
    1ffe:	19 c0       	rjmp	.+50     	; 0x2032 <vfprintf+0x10c>
    2000:	36 fe       	sbrs	r3, 6
    2002:	06 c0       	rjmp	.+12     	; 0x2010 <vfprintf+0xea>
    2004:	8a e0       	ldi	r24, 0x0A	; 10
    2006:	98 9e       	mul	r9, r24
    2008:	20 0d       	add	r18, r0
    200a:	11 24       	eor	r1, r1
    200c:	92 2e       	mov	r9, r18
    200e:	11 c0       	rjmp	.+34     	; 0x2032 <vfprintf+0x10c>
    2010:	ea e0       	ldi	r30, 0x0A	; 10
    2012:	2e 9e       	mul	r2, r30
    2014:	20 0d       	add	r18, r0
    2016:	11 24       	eor	r1, r1
    2018:	22 2e       	mov	r2, r18
    201a:	f3 2d       	mov	r31, r3
    201c:	f0 62       	ori	r31, 0x20	; 32
    201e:	3f 2e       	mov	r3, r31
    2020:	08 c0       	rjmp	.+16     	; 0x2032 <vfprintf+0x10c>
    2022:	8c 36       	cpi	r24, 0x6C	; 108
    2024:	21 f4       	brne	.+8      	; 0x202e <vfprintf+0x108>
    2026:	83 2d       	mov	r24, r3
    2028:	80 68       	ori	r24, 0x80	; 128
    202a:	38 2e       	mov	r3, r24
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <vfprintf+0x10c>
    202e:	88 36       	cpi	r24, 0x68	; 104
    2030:	41 f4       	brne	.+16     	; 0x2042 <vfprintf+0x11c>
    2032:	f7 01       	movw	r30, r14
    2034:	93 fd       	sbrc	r25, 3
    2036:	85 91       	lpm	r24, Z+
    2038:	93 ff       	sbrs	r25, 3
    203a:	81 91       	ld	r24, Z+
    203c:	7f 01       	movw	r14, r30
    203e:	81 11       	cpse	r24, r1
    2040:	b3 cf       	rjmp	.-154    	; 0x1fa8 <vfprintf+0x82>
    2042:	98 2f       	mov	r25, r24
    2044:	9f 7d       	andi	r25, 0xDF	; 223
    2046:	95 54       	subi	r25, 0x45	; 69
    2048:	93 30       	cpi	r25, 0x03	; 3
    204a:	28 f4       	brcc	.+10     	; 0x2056 <vfprintf+0x130>
    204c:	0c 5f       	subi	r16, 0xFC	; 252
    204e:	1f 4f       	sbci	r17, 0xFF	; 255
    2050:	9f e3       	ldi	r25, 0x3F	; 63
    2052:	99 83       	std	Y+1, r25	; 0x01
    2054:	0d c0       	rjmp	.+26     	; 0x2070 <vfprintf+0x14a>
    2056:	83 36       	cpi	r24, 0x63	; 99
    2058:	31 f0       	breq	.+12     	; 0x2066 <vfprintf+0x140>
    205a:	83 37       	cpi	r24, 0x73	; 115
    205c:	71 f0       	breq	.+28     	; 0x207a <vfprintf+0x154>
    205e:	83 35       	cpi	r24, 0x53	; 83
    2060:	09 f0       	breq	.+2      	; 0x2064 <vfprintf+0x13e>
    2062:	55 c0       	rjmp	.+170    	; 0x210e <vfprintf+0x1e8>
    2064:	20 c0       	rjmp	.+64     	; 0x20a6 <vfprintf+0x180>
    2066:	f8 01       	movw	r30, r16
    2068:	80 81       	ld	r24, Z
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	0e 5f       	subi	r16, 0xFE	; 254
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	88 24       	eor	r8, r8
    2072:	83 94       	inc	r8
    2074:	91 2c       	mov	r9, r1
    2076:	53 01       	movw	r10, r6
    2078:	12 c0       	rjmp	.+36     	; 0x209e <vfprintf+0x178>
    207a:	28 01       	movw	r4, r16
    207c:	f2 e0       	ldi	r31, 0x02	; 2
    207e:	4f 0e       	add	r4, r31
    2080:	51 1c       	adc	r5, r1
    2082:	f8 01       	movw	r30, r16
    2084:	a0 80       	ld	r10, Z
    2086:	b1 80       	ldd	r11, Z+1	; 0x01
    2088:	36 fe       	sbrs	r3, 6
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <vfprintf+0x16c>
    208c:	69 2d       	mov	r22, r9
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <vfprintf+0x170>
    2092:	6f ef       	ldi	r22, 0xFF	; 255
    2094:	7f ef       	ldi	r23, 0xFF	; 255
    2096:	c5 01       	movw	r24, r10
    2098:	9c d3       	rcall	.+1848   	; 0x27d2 <strnlen>
    209a:	4c 01       	movw	r8, r24
    209c:	82 01       	movw	r16, r4
    209e:	f3 2d       	mov	r31, r3
    20a0:	ff 77       	andi	r31, 0x7F	; 127
    20a2:	3f 2e       	mov	r3, r31
    20a4:	15 c0       	rjmp	.+42     	; 0x20d0 <vfprintf+0x1aa>
    20a6:	28 01       	movw	r4, r16
    20a8:	22 e0       	ldi	r18, 0x02	; 2
    20aa:	42 0e       	add	r4, r18
    20ac:	51 1c       	adc	r5, r1
    20ae:	f8 01       	movw	r30, r16
    20b0:	a0 80       	ld	r10, Z
    20b2:	b1 80       	ldd	r11, Z+1	; 0x01
    20b4:	36 fe       	sbrs	r3, 6
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <vfprintf+0x198>
    20b8:	69 2d       	mov	r22, r9
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <vfprintf+0x19c>
    20be:	6f ef       	ldi	r22, 0xFF	; 255
    20c0:	7f ef       	ldi	r23, 0xFF	; 255
    20c2:	c5 01       	movw	r24, r10
    20c4:	7b d3       	rcall	.+1782   	; 0x27bc <strnlen_P>
    20c6:	4c 01       	movw	r8, r24
    20c8:	f3 2d       	mov	r31, r3
    20ca:	f0 68       	ori	r31, 0x80	; 128
    20cc:	3f 2e       	mov	r3, r31
    20ce:	82 01       	movw	r16, r4
    20d0:	33 fc       	sbrc	r3, 3
    20d2:	19 c0       	rjmp	.+50     	; 0x2106 <vfprintf+0x1e0>
    20d4:	82 2d       	mov	r24, r2
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	88 16       	cp	r8, r24
    20da:	99 06       	cpc	r9, r25
    20dc:	a0 f4       	brcc	.+40     	; 0x2106 <vfprintf+0x1e0>
    20de:	b6 01       	movw	r22, r12
    20e0:	80 e2       	ldi	r24, 0x20	; 32
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	81 d3       	rcall	.+1794   	; 0x27e8 <fputc>
    20e6:	2a 94       	dec	r2
    20e8:	f5 cf       	rjmp	.-22     	; 0x20d4 <vfprintf+0x1ae>
    20ea:	f5 01       	movw	r30, r10
    20ec:	37 fc       	sbrc	r3, 7
    20ee:	85 91       	lpm	r24, Z+
    20f0:	37 fe       	sbrs	r3, 7
    20f2:	81 91       	ld	r24, Z+
    20f4:	5f 01       	movw	r10, r30
    20f6:	b6 01       	movw	r22, r12
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	76 d3       	rcall	.+1772   	; 0x27e8 <fputc>
    20fc:	21 10       	cpse	r2, r1
    20fe:	2a 94       	dec	r2
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	82 1a       	sub	r8, r18
    2104:	91 08       	sbc	r9, r1
    2106:	81 14       	cp	r8, r1
    2108:	91 04       	cpc	r9, r1
    210a:	79 f7       	brne	.-34     	; 0x20ea <vfprintf+0x1c4>
    210c:	e1 c0       	rjmp	.+450    	; 0x22d0 <__stack+0xd1>
    210e:	84 36       	cpi	r24, 0x64	; 100
    2110:	11 f0       	breq	.+4      	; 0x2116 <vfprintf+0x1f0>
    2112:	89 36       	cpi	r24, 0x69	; 105
    2114:	39 f5       	brne	.+78     	; 0x2164 <vfprintf+0x23e>
    2116:	f8 01       	movw	r30, r16
    2118:	37 fe       	sbrs	r3, 7
    211a:	07 c0       	rjmp	.+14     	; 0x212a <vfprintf+0x204>
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	0c 5f       	subi	r16, 0xFC	; 252
    2126:	1f 4f       	sbci	r17, 0xFF	; 255
    2128:	08 c0       	rjmp	.+16     	; 0x213a <vfprintf+0x214>
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	07 2e       	mov	r0, r23
    2130:	00 0c       	add	r0, r0
    2132:	88 0b       	sbc	r24, r24
    2134:	99 0b       	sbc	r25, r25
    2136:	0e 5f       	subi	r16, 0xFE	; 254
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	f3 2d       	mov	r31, r3
    213c:	ff 76       	andi	r31, 0x6F	; 111
    213e:	3f 2e       	mov	r3, r31
    2140:	97 ff       	sbrs	r25, 7
    2142:	09 c0       	rjmp	.+18     	; 0x2156 <vfprintf+0x230>
    2144:	90 95       	com	r25
    2146:	80 95       	com	r24
    2148:	70 95       	com	r23
    214a:	61 95       	neg	r22
    214c:	7f 4f       	sbci	r23, 0xFF	; 255
    214e:	8f 4f       	sbci	r24, 0xFF	; 255
    2150:	9f 4f       	sbci	r25, 0xFF	; 255
    2152:	f0 68       	ori	r31, 0x80	; 128
    2154:	3f 2e       	mov	r3, r31
    2156:	2a e0       	ldi	r18, 0x0A	; 10
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	a3 01       	movw	r20, r6
    215c:	81 d3       	rcall	.+1794   	; 0x2860 <__ultoa_invert>
    215e:	88 2e       	mov	r8, r24
    2160:	86 18       	sub	r8, r6
    2162:	44 c0       	rjmp	.+136    	; 0x21ec <vfprintf+0x2c6>
    2164:	85 37       	cpi	r24, 0x75	; 117
    2166:	31 f4       	brne	.+12     	; 0x2174 <vfprintf+0x24e>
    2168:	23 2d       	mov	r18, r3
    216a:	2f 7e       	andi	r18, 0xEF	; 239
    216c:	b2 2e       	mov	r11, r18
    216e:	2a e0       	ldi	r18, 0x0A	; 10
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	25 c0       	rjmp	.+74     	; 0x21be <vfprintf+0x298>
    2174:	93 2d       	mov	r25, r3
    2176:	99 7f       	andi	r25, 0xF9	; 249
    2178:	b9 2e       	mov	r11, r25
    217a:	8f 36       	cpi	r24, 0x6F	; 111
    217c:	c1 f0       	breq	.+48     	; 0x21ae <vfprintf+0x288>
    217e:	18 f4       	brcc	.+6      	; 0x2186 <vfprintf+0x260>
    2180:	88 35       	cpi	r24, 0x58	; 88
    2182:	79 f0       	breq	.+30     	; 0x21a2 <vfprintf+0x27c>
    2184:	ae c0       	rjmp	.+348    	; 0x22e2 <__stack+0xe3>
    2186:	80 37       	cpi	r24, 0x70	; 112
    2188:	19 f0       	breq	.+6      	; 0x2190 <vfprintf+0x26a>
    218a:	88 37       	cpi	r24, 0x78	; 120
    218c:	21 f0       	breq	.+8      	; 0x2196 <vfprintf+0x270>
    218e:	a9 c0       	rjmp	.+338    	; 0x22e2 <__stack+0xe3>
    2190:	e9 2f       	mov	r30, r25
    2192:	e0 61       	ori	r30, 0x10	; 16
    2194:	be 2e       	mov	r11, r30
    2196:	b4 fe       	sbrs	r11, 4
    2198:	0d c0       	rjmp	.+26     	; 0x21b4 <vfprintf+0x28e>
    219a:	fb 2d       	mov	r31, r11
    219c:	f4 60       	ori	r31, 0x04	; 4
    219e:	bf 2e       	mov	r11, r31
    21a0:	09 c0       	rjmp	.+18     	; 0x21b4 <vfprintf+0x28e>
    21a2:	34 fe       	sbrs	r3, 4
    21a4:	0a c0       	rjmp	.+20     	; 0x21ba <vfprintf+0x294>
    21a6:	29 2f       	mov	r18, r25
    21a8:	26 60       	ori	r18, 0x06	; 6
    21aa:	b2 2e       	mov	r11, r18
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <vfprintf+0x294>
    21ae:	28 e0       	ldi	r18, 0x08	; 8
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <vfprintf+0x298>
    21b4:	20 e1       	ldi	r18, 0x10	; 16
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <vfprintf+0x298>
    21ba:	20 e1       	ldi	r18, 0x10	; 16
    21bc:	32 e0       	ldi	r19, 0x02	; 2
    21be:	f8 01       	movw	r30, r16
    21c0:	b7 fe       	sbrs	r11, 7
    21c2:	07 c0       	rjmp	.+14     	; 0x21d2 <vfprintf+0x2ac>
    21c4:	60 81       	ld	r22, Z
    21c6:	71 81       	ldd	r23, Z+1	; 0x01
    21c8:	82 81       	ldd	r24, Z+2	; 0x02
    21ca:	93 81       	ldd	r25, Z+3	; 0x03
    21cc:	0c 5f       	subi	r16, 0xFC	; 252
    21ce:	1f 4f       	sbci	r17, 0xFF	; 255
    21d0:	06 c0       	rjmp	.+12     	; 0x21de <vfprintf+0x2b8>
    21d2:	60 81       	ld	r22, Z
    21d4:	71 81       	ldd	r23, Z+1	; 0x01
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	0e 5f       	subi	r16, 0xFE	; 254
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	a3 01       	movw	r20, r6
    21e0:	3f d3       	rcall	.+1662   	; 0x2860 <__ultoa_invert>
    21e2:	88 2e       	mov	r8, r24
    21e4:	86 18       	sub	r8, r6
    21e6:	fb 2d       	mov	r31, r11
    21e8:	ff 77       	andi	r31, 0x7F	; 127
    21ea:	3f 2e       	mov	r3, r31
    21ec:	36 fe       	sbrs	r3, 6
    21ee:	0d c0       	rjmp	.+26     	; 0x220a <__stack+0xb>
    21f0:	23 2d       	mov	r18, r3
    21f2:	2e 7f       	andi	r18, 0xFE	; 254
    21f4:	a2 2e       	mov	r10, r18
    21f6:	89 14       	cp	r8, r9
    21f8:	58 f4       	brcc	.+22     	; 0x2210 <__stack+0x11>
    21fa:	34 fe       	sbrs	r3, 4
    21fc:	0b c0       	rjmp	.+22     	; 0x2214 <__stack+0x15>
    21fe:	32 fc       	sbrc	r3, 2
    2200:	09 c0       	rjmp	.+18     	; 0x2214 <__stack+0x15>
    2202:	83 2d       	mov	r24, r3
    2204:	8e 7e       	andi	r24, 0xEE	; 238
    2206:	a8 2e       	mov	r10, r24
    2208:	05 c0       	rjmp	.+10     	; 0x2214 <__stack+0x15>
    220a:	b8 2c       	mov	r11, r8
    220c:	a3 2c       	mov	r10, r3
    220e:	03 c0       	rjmp	.+6      	; 0x2216 <__stack+0x17>
    2210:	b8 2c       	mov	r11, r8
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <__stack+0x17>
    2214:	b9 2c       	mov	r11, r9
    2216:	a4 fe       	sbrs	r10, 4
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <__stack+0x39>
    221a:	fe 01       	movw	r30, r28
    221c:	e8 0d       	add	r30, r8
    221e:	f1 1d       	adc	r31, r1
    2220:	80 81       	ld	r24, Z
    2222:	80 33       	cpi	r24, 0x30	; 48
    2224:	21 f4       	brne	.+8      	; 0x222e <__stack+0x2f>
    2226:	9a 2d       	mov	r25, r10
    2228:	99 7e       	andi	r25, 0xE9	; 233
    222a:	a9 2e       	mov	r10, r25
    222c:	09 c0       	rjmp	.+18     	; 0x2240 <__stack+0x41>
    222e:	a2 fe       	sbrs	r10, 2
    2230:	06 c0       	rjmp	.+12     	; 0x223e <__stack+0x3f>
    2232:	b3 94       	inc	r11
    2234:	b3 94       	inc	r11
    2236:	04 c0       	rjmp	.+8      	; 0x2240 <__stack+0x41>
    2238:	8a 2d       	mov	r24, r10
    223a:	86 78       	andi	r24, 0x86	; 134
    223c:	09 f0       	breq	.+2      	; 0x2240 <__stack+0x41>
    223e:	b3 94       	inc	r11
    2240:	a3 fc       	sbrc	r10, 3
    2242:	10 c0       	rjmp	.+32     	; 0x2264 <__stack+0x65>
    2244:	a0 fe       	sbrs	r10, 0
    2246:	06 c0       	rjmp	.+12     	; 0x2254 <__stack+0x55>
    2248:	b2 14       	cp	r11, r2
    224a:	80 f4       	brcc	.+32     	; 0x226c <__stack+0x6d>
    224c:	28 0c       	add	r2, r8
    224e:	92 2c       	mov	r9, r2
    2250:	9b 18       	sub	r9, r11
    2252:	0d c0       	rjmp	.+26     	; 0x226e <__stack+0x6f>
    2254:	b2 14       	cp	r11, r2
    2256:	58 f4       	brcc	.+22     	; 0x226e <__stack+0x6f>
    2258:	b6 01       	movw	r22, r12
    225a:	80 e2       	ldi	r24, 0x20	; 32
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	c4 d2       	rcall	.+1416   	; 0x27e8 <fputc>
    2260:	b3 94       	inc	r11
    2262:	f8 cf       	rjmp	.-16     	; 0x2254 <__stack+0x55>
    2264:	b2 14       	cp	r11, r2
    2266:	18 f4       	brcc	.+6      	; 0x226e <__stack+0x6f>
    2268:	2b 18       	sub	r2, r11
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <__stack+0x71>
    226c:	98 2c       	mov	r9, r8
    226e:	21 2c       	mov	r2, r1
    2270:	a4 fe       	sbrs	r10, 4
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <__stack+0x93>
    2274:	b6 01       	movw	r22, r12
    2276:	80 e3       	ldi	r24, 0x30	; 48
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	b6 d2       	rcall	.+1388   	; 0x27e8 <fputc>
    227c:	a2 fe       	sbrs	r10, 2
    227e:	16 c0       	rjmp	.+44     	; 0x22ac <__stack+0xad>
    2280:	a1 fc       	sbrc	r10, 1
    2282:	03 c0       	rjmp	.+6      	; 0x228a <__stack+0x8b>
    2284:	88 e7       	ldi	r24, 0x78	; 120
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	02 c0       	rjmp	.+4      	; 0x228e <__stack+0x8f>
    228a:	88 e5       	ldi	r24, 0x58	; 88
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	b6 01       	movw	r22, r12
    2290:	0c c0       	rjmp	.+24     	; 0x22aa <__stack+0xab>
    2292:	8a 2d       	mov	r24, r10
    2294:	86 78       	andi	r24, 0x86	; 134
    2296:	51 f0       	breq	.+20     	; 0x22ac <__stack+0xad>
    2298:	a1 fe       	sbrs	r10, 1
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <__stack+0xa1>
    229c:	8b e2       	ldi	r24, 0x2B	; 43
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	80 e2       	ldi	r24, 0x20	; 32
    22a2:	a7 fc       	sbrc	r10, 7
    22a4:	8d e2       	ldi	r24, 0x2D	; 45
    22a6:	b6 01       	movw	r22, r12
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9e d2       	rcall	.+1340   	; 0x27e8 <fputc>
    22ac:	89 14       	cp	r8, r9
    22ae:	30 f4       	brcc	.+12     	; 0x22bc <__stack+0xbd>
    22b0:	b6 01       	movw	r22, r12
    22b2:	80 e3       	ldi	r24, 0x30	; 48
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	98 d2       	rcall	.+1328   	; 0x27e8 <fputc>
    22b8:	9a 94       	dec	r9
    22ba:	f8 cf       	rjmp	.-16     	; 0x22ac <__stack+0xad>
    22bc:	8a 94       	dec	r8
    22be:	f3 01       	movw	r30, r6
    22c0:	e8 0d       	add	r30, r8
    22c2:	f1 1d       	adc	r31, r1
    22c4:	80 81       	ld	r24, Z
    22c6:	b6 01       	movw	r22, r12
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	8e d2       	rcall	.+1308   	; 0x27e8 <fputc>
    22cc:	81 10       	cpse	r8, r1
    22ce:	f6 cf       	rjmp	.-20     	; 0x22bc <__stack+0xbd>
    22d0:	22 20       	and	r2, r2
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <__stack+0xd7>
    22d4:	4e ce       	rjmp	.-868    	; 0x1f72 <vfprintf+0x4c>
    22d6:	b6 01       	movw	r22, r12
    22d8:	80 e2       	ldi	r24, 0x20	; 32
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	85 d2       	rcall	.+1290   	; 0x27e8 <fputc>
    22de:	2a 94       	dec	r2
    22e0:	f7 cf       	rjmp	.-18     	; 0x22d0 <__stack+0xd1>
    22e2:	f6 01       	movw	r30, r12
    22e4:	86 81       	ldd	r24, Z+6	; 0x06
    22e6:	97 81       	ldd	r25, Z+7	; 0x07
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <__stack+0xef>
    22ea:	8f ef       	ldi	r24, 0xFF	; 255
    22ec:	9f ef       	ldi	r25, 0xFF	; 255
    22ee:	2b 96       	adiw	r28, 0x0b	; 11
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	df 90       	pop	r13
    2308:	cf 90       	pop	r12
    230a:	bf 90       	pop	r11
    230c:	af 90       	pop	r10
    230e:	9f 90       	pop	r9
    2310:	8f 90       	pop	r8
    2312:	7f 90       	pop	r7
    2314:	6f 90       	pop	r6
    2316:	5f 90       	pop	r5
    2318:	4f 90       	pop	r4
    231a:	3f 90       	pop	r3
    231c:	2f 90       	pop	r2
    231e:	08 95       	ret

00002320 <dtoa_prf>:
    2320:	8f 92       	push	r8
    2322:	9f 92       	push	r9
    2324:	af 92       	push	r10
    2326:	bf 92       	push	r11
    2328:	cf 92       	push	r12
    232a:	df 92       	push	r13
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	29 97       	sbiw	r28, 0x09	; 9
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	6a 01       	movw	r12, r20
    234a:	12 2f       	mov	r17, r18
    234c:	b0 2e       	mov	r11, r16
    234e:	2b e3       	ldi	r18, 0x3B	; 59
    2350:	20 17       	cp	r18, r16
    2352:	20 f0       	brcs	.+8      	; 0x235c <dtoa_prf+0x3c>
    2354:	ff 24       	eor	r15, r15
    2356:	f3 94       	inc	r15
    2358:	f0 0e       	add	r15, r16
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <dtoa_prf+0x40>
    235c:	2c e3       	ldi	r18, 0x3C	; 60
    235e:	f2 2e       	mov	r15, r18
    2360:	0f 2d       	mov	r16, r15
    2362:	27 e0       	ldi	r18, 0x07	; 7
    2364:	ae 01       	movw	r20, r28
    2366:	4f 5f       	subi	r20, 0xFF	; 255
    2368:	5f 4f       	sbci	r21, 0xFF	; 255
    236a:	50 d1       	rcall	.+672    	; 0x260c <__ftoa_engine>
    236c:	bc 01       	movw	r22, r24
    236e:	49 81       	ldd	r20, Y+1	; 0x01
    2370:	84 2f       	mov	r24, r20
    2372:	89 70       	andi	r24, 0x09	; 9
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	31 f0       	breq	.+12     	; 0x2384 <dtoa_prf+0x64>
    2378:	e1 fc       	sbrc	r14, 1
    237a:	06 c0       	rjmp	.+12     	; 0x2388 <dtoa_prf+0x68>
    237c:	e0 fe       	sbrs	r14, 0
    237e:	06 c0       	rjmp	.+12     	; 0x238c <dtoa_prf+0x6c>
    2380:	90 e2       	ldi	r25, 0x20	; 32
    2382:	05 c0       	rjmp	.+10     	; 0x238e <dtoa_prf+0x6e>
    2384:	9d e2       	ldi	r25, 0x2D	; 45
    2386:	03 c0       	rjmp	.+6      	; 0x238e <dtoa_prf+0x6e>
    2388:	9b e2       	ldi	r25, 0x2B	; 43
    238a:	01 c0       	rjmp	.+2      	; 0x238e <dtoa_prf+0x6e>
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	5e 2d       	mov	r21, r14
    2390:	50 71       	andi	r21, 0x10	; 16
    2392:	43 ff       	sbrs	r20, 3
    2394:	3c c0       	rjmp	.+120    	; 0x240e <dtoa_prf+0xee>
    2396:	91 11       	cpse	r25, r1
    2398:	02 c0       	rjmp	.+4      	; 0x239e <dtoa_prf+0x7e>
    239a:	83 e0       	ldi	r24, 0x03	; 3
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <dtoa_prf+0x80>
    239e:	84 e0       	ldi	r24, 0x04	; 4
    23a0:	81 17       	cp	r24, r17
    23a2:	18 f4       	brcc	.+6      	; 0x23aa <dtoa_prf+0x8a>
    23a4:	21 2f       	mov	r18, r17
    23a6:	28 1b       	sub	r18, r24
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <dtoa_prf+0x8c>
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	51 11       	cpse	r21, r1
    23ae:	0b c0       	rjmp	.+22     	; 0x23c6 <dtoa_prf+0xa6>
    23b0:	f6 01       	movw	r30, r12
    23b2:	82 2f       	mov	r24, r18
    23b4:	30 e2       	ldi	r19, 0x20	; 32
    23b6:	88 23       	and	r24, r24
    23b8:	19 f0       	breq	.+6      	; 0x23c0 <dtoa_prf+0xa0>
    23ba:	31 93       	st	Z+, r19
    23bc:	81 50       	subi	r24, 0x01	; 1
    23be:	fb cf       	rjmp	.-10     	; 0x23b6 <dtoa_prf+0x96>
    23c0:	c2 0e       	add	r12, r18
    23c2:	d1 1c       	adc	r13, r1
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	99 23       	and	r25, r25
    23c8:	29 f0       	breq	.+10     	; 0x23d4 <dtoa_prf+0xb4>
    23ca:	d6 01       	movw	r26, r12
    23cc:	9c 93       	st	X, r25
    23ce:	f6 01       	movw	r30, r12
    23d0:	31 96       	adiw	r30, 0x01	; 1
    23d2:	6f 01       	movw	r12, r30
    23d4:	c6 01       	movw	r24, r12
    23d6:	03 96       	adiw	r24, 0x03	; 3
    23d8:	e2 fe       	sbrs	r14, 2
    23da:	0a c0       	rjmp	.+20     	; 0x23f0 <dtoa_prf+0xd0>
    23dc:	3e e4       	ldi	r19, 0x4E	; 78
    23de:	d6 01       	movw	r26, r12
    23e0:	3c 93       	st	X, r19
    23e2:	41 e4       	ldi	r20, 0x41	; 65
    23e4:	11 96       	adiw	r26, 0x01	; 1
    23e6:	4c 93       	st	X, r20
    23e8:	11 97       	sbiw	r26, 0x01	; 1
    23ea:	12 96       	adiw	r26, 0x02	; 2
    23ec:	3c 93       	st	X, r19
    23ee:	06 c0       	rjmp	.+12     	; 0x23fc <dtoa_prf+0xdc>
    23f0:	3e e6       	ldi	r19, 0x6E	; 110
    23f2:	f6 01       	movw	r30, r12
    23f4:	30 83       	st	Z, r19
    23f6:	41 e6       	ldi	r20, 0x61	; 97
    23f8:	41 83       	std	Z+1, r20	; 0x01
    23fa:	32 83       	std	Z+2, r19	; 0x02
    23fc:	fc 01       	movw	r30, r24
    23fe:	32 2f       	mov	r19, r18
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	33 23       	and	r19, r19
    2404:	09 f4       	brne	.+2      	; 0x2408 <dtoa_prf+0xe8>
    2406:	42 c0       	rjmp	.+132    	; 0x248c <dtoa_prf+0x16c>
    2408:	41 93       	st	Z+, r20
    240a:	31 50       	subi	r19, 0x01	; 1
    240c:	fa cf       	rjmp	.-12     	; 0x2402 <dtoa_prf+0xe2>
    240e:	42 ff       	sbrs	r20, 2
    2410:	44 c0       	rjmp	.+136    	; 0x249a <dtoa_prf+0x17a>
    2412:	91 11       	cpse	r25, r1
    2414:	02 c0       	rjmp	.+4      	; 0x241a <dtoa_prf+0xfa>
    2416:	83 e0       	ldi	r24, 0x03	; 3
    2418:	01 c0       	rjmp	.+2      	; 0x241c <dtoa_prf+0xfc>
    241a:	84 e0       	ldi	r24, 0x04	; 4
    241c:	81 17       	cp	r24, r17
    241e:	18 f4       	brcc	.+6      	; 0x2426 <dtoa_prf+0x106>
    2420:	21 2f       	mov	r18, r17
    2422:	28 1b       	sub	r18, r24
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <dtoa_prf+0x108>
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	51 11       	cpse	r21, r1
    242a:	0b c0       	rjmp	.+22     	; 0x2442 <dtoa_prf+0x122>
    242c:	f6 01       	movw	r30, r12
    242e:	82 2f       	mov	r24, r18
    2430:	30 e2       	ldi	r19, 0x20	; 32
    2432:	88 23       	and	r24, r24
    2434:	19 f0       	breq	.+6      	; 0x243c <dtoa_prf+0x11c>
    2436:	31 93       	st	Z+, r19
    2438:	81 50       	subi	r24, 0x01	; 1
    243a:	fb cf       	rjmp	.-10     	; 0x2432 <dtoa_prf+0x112>
    243c:	c2 0e       	add	r12, r18
    243e:	d1 1c       	adc	r13, r1
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	99 23       	and	r25, r25
    2444:	29 f0       	breq	.+10     	; 0x2450 <dtoa_prf+0x130>
    2446:	d6 01       	movw	r26, r12
    2448:	9c 93       	st	X, r25
    244a:	f6 01       	movw	r30, r12
    244c:	31 96       	adiw	r30, 0x01	; 1
    244e:	6f 01       	movw	r12, r30
    2450:	c6 01       	movw	r24, r12
    2452:	03 96       	adiw	r24, 0x03	; 3
    2454:	e2 fe       	sbrs	r14, 2
    2456:	0b c0       	rjmp	.+22     	; 0x246e <dtoa_prf+0x14e>
    2458:	39 e4       	ldi	r19, 0x49	; 73
    245a:	d6 01       	movw	r26, r12
    245c:	3c 93       	st	X, r19
    245e:	3e e4       	ldi	r19, 0x4E	; 78
    2460:	11 96       	adiw	r26, 0x01	; 1
    2462:	3c 93       	st	X, r19
    2464:	11 97       	sbiw	r26, 0x01	; 1
    2466:	36 e4       	ldi	r19, 0x46	; 70
    2468:	12 96       	adiw	r26, 0x02	; 2
    246a:	3c 93       	st	X, r19
    246c:	07 c0       	rjmp	.+14     	; 0x247c <dtoa_prf+0x15c>
    246e:	39 e6       	ldi	r19, 0x69	; 105
    2470:	f6 01       	movw	r30, r12
    2472:	30 83       	st	Z, r19
    2474:	3e e6       	ldi	r19, 0x6E	; 110
    2476:	31 83       	std	Z+1, r19	; 0x01
    2478:	36 e6       	ldi	r19, 0x66	; 102
    247a:	32 83       	std	Z+2, r19	; 0x02
    247c:	fc 01       	movw	r30, r24
    247e:	32 2f       	mov	r19, r18
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	33 23       	and	r19, r19
    2484:	19 f0       	breq	.+6      	; 0x248c <dtoa_prf+0x16c>
    2486:	41 93       	st	Z+, r20
    2488:	31 50       	subi	r19, 0x01	; 1
    248a:	fb cf       	rjmp	.-10     	; 0x2482 <dtoa_prf+0x162>
    248c:	fc 01       	movw	r30, r24
    248e:	e2 0f       	add	r30, r18
    2490:	f1 1d       	adc	r31, r1
    2492:	10 82       	st	Z, r1
    2494:	8e ef       	ldi	r24, 0xFE	; 254
    2496:	9f ef       	ldi	r25, 0xFF	; 255
    2498:	a6 c0       	rjmp	.+332    	; 0x25e6 <dtoa_prf+0x2c6>
    249a:	21 e0       	ldi	r18, 0x01	; 1
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	91 11       	cpse	r25, r1
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <dtoa_prf+0x186>
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	16 16       	cp	r1, r22
    24a8:	17 06       	cpc	r1, r23
    24aa:	1c f4       	brge	.+6      	; 0x24b2 <dtoa_prf+0x192>
    24ac:	fb 01       	movw	r30, r22
    24ae:	31 96       	adiw	r30, 0x01	; 1
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <dtoa_prf+0x196>
    24b2:	e1 e0       	ldi	r30, 0x01	; 1
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	2e 0f       	add	r18, r30
    24b8:	3f 1f       	adc	r19, r31
    24ba:	bb 20       	and	r11, r11
    24bc:	21 f0       	breq	.+8      	; 0x24c6 <dtoa_prf+0x1a6>
    24be:	eb 2d       	mov	r30, r11
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	31 96       	adiw	r30, 0x01	; 1
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <dtoa_prf+0x1aa>
    24c6:	e0 e0       	ldi	r30, 0x00	; 0
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	2e 0f       	add	r18, r30
    24cc:	3f 1f       	adc	r19, r31
    24ce:	e1 2f       	mov	r30, r17
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	2e 17       	cp	r18, r30
    24d4:	3f 07       	cpc	r19, r31
    24d6:	1c f4       	brge	.+6      	; 0x24de <dtoa_prf+0x1be>
    24d8:	12 1b       	sub	r17, r18
    24da:	21 2f       	mov	r18, r17
    24dc:	01 c0       	rjmp	.+2      	; 0x24e0 <dtoa_prf+0x1c0>
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	8e 2d       	mov	r24, r14
    24e2:	88 71       	andi	r24, 0x18	; 24
    24e4:	59 f4       	brne	.+22     	; 0x24fc <dtoa_prf+0x1dc>
    24e6:	f6 01       	movw	r30, r12
    24e8:	82 2f       	mov	r24, r18
    24ea:	30 e2       	ldi	r19, 0x20	; 32
    24ec:	88 23       	and	r24, r24
    24ee:	19 f0       	breq	.+6      	; 0x24f6 <dtoa_prf+0x1d6>
    24f0:	31 93       	st	Z+, r19
    24f2:	81 50       	subi	r24, 0x01	; 1
    24f4:	fb cf       	rjmp	.-10     	; 0x24ec <dtoa_prf+0x1cc>
    24f6:	c2 0e       	add	r12, r18
    24f8:	d1 1c       	adc	r13, r1
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	99 23       	and	r25, r25
    24fe:	29 f0       	breq	.+10     	; 0x250a <dtoa_prf+0x1ea>
    2500:	d6 01       	movw	r26, r12
    2502:	9c 93       	st	X, r25
    2504:	f6 01       	movw	r30, r12
    2506:	31 96       	adiw	r30, 0x01	; 1
    2508:	6f 01       	movw	r12, r30
    250a:	51 11       	cpse	r21, r1
    250c:	0b c0       	rjmp	.+22     	; 0x2524 <dtoa_prf+0x204>
    250e:	f6 01       	movw	r30, r12
    2510:	82 2f       	mov	r24, r18
    2512:	90 e3       	ldi	r25, 0x30	; 48
    2514:	88 23       	and	r24, r24
    2516:	19 f0       	breq	.+6      	; 0x251e <dtoa_prf+0x1fe>
    2518:	91 93       	st	Z+, r25
    251a:	81 50       	subi	r24, 0x01	; 1
    251c:	fb cf       	rjmp	.-10     	; 0x2514 <dtoa_prf+0x1f4>
    251e:	c2 0e       	add	r12, r18
    2520:	d1 1c       	adc	r13, r1
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	0f 2d       	mov	r16, r15
    2526:	06 0f       	add	r16, r22
    2528:	9a 81       	ldd	r25, Y+2	; 0x02
    252a:	34 2f       	mov	r19, r20
    252c:	30 71       	andi	r19, 0x10	; 16
    252e:	44 ff       	sbrs	r20, 4
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <dtoa_prf+0x218>
    2532:	91 33       	cpi	r25, 0x31	; 49
    2534:	09 f4       	brne	.+2      	; 0x2538 <dtoa_prf+0x218>
    2536:	01 50       	subi	r16, 0x01	; 1
    2538:	10 16       	cp	r1, r16
    253a:	24 f4       	brge	.+8      	; 0x2544 <dtoa_prf+0x224>
    253c:	09 30       	cpi	r16, 0x09	; 9
    253e:	18 f0       	brcs	.+6      	; 0x2546 <dtoa_prf+0x226>
    2540:	08 e0       	ldi	r16, 0x08	; 8
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <dtoa_prf+0x226>
    2544:	01 e0       	ldi	r16, 0x01	; 1
    2546:	ab 01       	movw	r20, r22
    2548:	77 ff       	sbrs	r23, 7
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <dtoa_prf+0x230>
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	fb 01       	movw	r30, r22
    2552:	e4 1b       	sub	r30, r20
    2554:	f5 0b       	sbc	r31, r21
    2556:	a1 e0       	ldi	r26, 0x01	; 1
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	ac 0f       	add	r26, r28
    255c:	bd 1f       	adc	r27, r29
    255e:	ea 0f       	add	r30, r26
    2560:	fb 1f       	adc	r31, r27
    2562:	8e e2       	ldi	r24, 0x2E	; 46
    2564:	a8 2e       	mov	r10, r24
    2566:	4b 01       	movw	r8, r22
    2568:	80 1a       	sub	r8, r16
    256a:	91 08       	sbc	r9, r1
    256c:	0b 2d       	mov	r16, r11
    256e:	10 e0       	ldi	r17, 0x00	; 0
    2570:	11 95       	neg	r17
    2572:	01 95       	neg	r16
    2574:	11 09       	sbc	r17, r1
    2576:	4f 3f       	cpi	r20, 0xFF	; 255
    2578:	bf ef       	ldi	r27, 0xFF	; 255
    257a:	5b 07       	cpc	r21, r27
    257c:	21 f4       	brne	.+8      	; 0x2586 <dtoa_prf+0x266>
    257e:	d6 01       	movw	r26, r12
    2580:	ac 92       	st	X, r10
    2582:	11 96       	adiw	r26, 0x01	; 1
    2584:	6d 01       	movw	r12, r26
    2586:	64 17       	cp	r22, r20
    2588:	75 07       	cpc	r23, r21
    258a:	2c f0       	brlt	.+10     	; 0x2596 <dtoa_prf+0x276>
    258c:	84 16       	cp	r8, r20
    258e:	95 06       	cpc	r9, r21
    2590:	14 f4       	brge	.+4      	; 0x2596 <dtoa_prf+0x276>
    2592:	81 81       	ldd	r24, Z+1	; 0x01
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <dtoa_prf+0x278>
    2596:	80 e3       	ldi	r24, 0x30	; 48
    2598:	41 50       	subi	r20, 0x01	; 1
    259a:	51 09       	sbc	r21, r1
    259c:	31 96       	adiw	r30, 0x01	; 1
    259e:	d6 01       	movw	r26, r12
    25a0:	11 96       	adiw	r26, 0x01	; 1
    25a2:	7d 01       	movw	r14, r26
    25a4:	40 17       	cp	r20, r16
    25a6:	51 07       	cpc	r21, r17
    25a8:	24 f0       	brlt	.+8      	; 0x25b2 <dtoa_prf+0x292>
    25aa:	d6 01       	movw	r26, r12
    25ac:	8c 93       	st	X, r24
    25ae:	67 01       	movw	r12, r14
    25b0:	e2 cf       	rjmp	.-60     	; 0x2576 <dtoa_prf+0x256>
    25b2:	64 17       	cp	r22, r20
    25b4:	75 07       	cpc	r23, r21
    25b6:	39 f4       	brne	.+14     	; 0x25c6 <dtoa_prf+0x2a6>
    25b8:	96 33       	cpi	r25, 0x36	; 54
    25ba:	20 f4       	brcc	.+8      	; 0x25c4 <dtoa_prf+0x2a4>
    25bc:	95 33       	cpi	r25, 0x35	; 53
    25be:	19 f4       	brne	.+6      	; 0x25c6 <dtoa_prf+0x2a6>
    25c0:	31 11       	cpse	r19, r1
    25c2:	01 c0       	rjmp	.+2      	; 0x25c6 <dtoa_prf+0x2a6>
    25c4:	81 e3       	ldi	r24, 0x31	; 49
    25c6:	f6 01       	movw	r30, r12
    25c8:	80 83       	st	Z, r24
    25ca:	f7 01       	movw	r30, r14
    25cc:	82 2f       	mov	r24, r18
    25ce:	90 e2       	ldi	r25, 0x20	; 32
    25d0:	88 23       	and	r24, r24
    25d2:	19 f0       	breq	.+6      	; 0x25da <dtoa_prf+0x2ba>
    25d4:	91 93       	st	Z+, r25
    25d6:	81 50       	subi	r24, 0x01	; 1
    25d8:	fb cf       	rjmp	.-10     	; 0x25d0 <dtoa_prf+0x2b0>
    25da:	f7 01       	movw	r30, r14
    25dc:	e2 0f       	add	r30, r18
    25de:	f1 1d       	adc	r31, r1
    25e0:	10 82       	st	Z, r1
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	29 96       	adiw	r28, 0x09	; 9
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	ff 90       	pop	r15
    25fc:	ef 90       	pop	r14
    25fe:	df 90       	pop	r13
    2600:	cf 90       	pop	r12
    2602:	bf 90       	pop	r11
    2604:	af 90       	pop	r10
    2606:	9f 90       	pop	r9
    2608:	8f 90       	pop	r8
    260a:	08 95       	ret

0000260c <__ftoa_engine>:
    260c:	28 30       	cpi	r18, 0x08	; 8
    260e:	08 f0       	brcs	.+2      	; 0x2612 <__ftoa_engine+0x6>
    2610:	27 e0       	ldi	r18, 0x07	; 7
    2612:	33 27       	eor	r19, r19
    2614:	da 01       	movw	r26, r20
    2616:	99 0f       	add	r25, r25
    2618:	31 1d       	adc	r19, r1
    261a:	87 fd       	sbrc	r24, 7
    261c:	91 60       	ori	r25, 0x01	; 1
    261e:	00 96       	adiw	r24, 0x00	; 0
    2620:	61 05       	cpc	r22, r1
    2622:	71 05       	cpc	r23, r1
    2624:	39 f4       	brne	.+14     	; 0x2634 <__ftoa_engine+0x28>
    2626:	32 60       	ori	r19, 0x02	; 2
    2628:	2e 5f       	subi	r18, 0xFE	; 254
    262a:	3d 93       	st	X+, r19
    262c:	30 e3       	ldi	r19, 0x30	; 48
    262e:	2a 95       	dec	r18
    2630:	e1 f7       	brne	.-8      	; 0x262a <__ftoa_engine+0x1e>
    2632:	08 95       	ret
    2634:	9f 3f       	cpi	r25, 0xFF	; 255
    2636:	30 f0       	brcs	.+12     	; 0x2644 <__ftoa_engine+0x38>
    2638:	80 38       	cpi	r24, 0x80	; 128
    263a:	71 05       	cpc	r23, r1
    263c:	61 05       	cpc	r22, r1
    263e:	09 f0       	breq	.+2      	; 0x2642 <__ftoa_engine+0x36>
    2640:	3c 5f       	subi	r19, 0xFC	; 252
    2642:	3c 5f       	subi	r19, 0xFC	; 252
    2644:	3d 93       	st	X+, r19
    2646:	91 30       	cpi	r25, 0x01	; 1
    2648:	08 f0       	brcs	.+2      	; 0x264c <__ftoa_engine+0x40>
    264a:	80 68       	ori	r24, 0x80	; 128
    264c:	91 1d       	adc	r25, r1
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	1f 93       	push	r17
    2654:	0f 93       	push	r16
    2656:	ff 92       	push	r15
    2658:	ef 92       	push	r14
    265a:	19 2f       	mov	r17, r25
    265c:	98 7f       	andi	r25, 0xF8	; 248
    265e:	96 95       	lsr	r25
    2660:	e9 2f       	mov	r30, r25
    2662:	96 95       	lsr	r25
    2664:	96 95       	lsr	r25
    2666:	e9 0f       	add	r30, r25
    2668:	ff 27       	eor	r31, r31
    266a:	e4 5a       	subi	r30, 0xA4	; 164
    266c:	fe 4f       	sbci	r31, 0xFE	; 254
    266e:	99 27       	eor	r25, r25
    2670:	33 27       	eor	r19, r19
    2672:	ee 24       	eor	r14, r14
    2674:	ff 24       	eor	r15, r15
    2676:	a7 01       	movw	r20, r14
    2678:	e7 01       	movw	r28, r14
    267a:	05 90       	lpm	r0, Z+
    267c:	08 94       	sec
    267e:	07 94       	ror	r0
    2680:	28 f4       	brcc	.+10     	; 0x268c <__ftoa_engine+0x80>
    2682:	36 0f       	add	r19, r22
    2684:	e7 1e       	adc	r14, r23
    2686:	f8 1e       	adc	r15, r24
    2688:	49 1f       	adc	r20, r25
    268a:	51 1d       	adc	r21, r1
    268c:	66 0f       	add	r22, r22
    268e:	77 1f       	adc	r23, r23
    2690:	88 1f       	adc	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	06 94       	lsr	r0
    2696:	a1 f7       	brne	.-24     	; 0x2680 <__ftoa_engine+0x74>
    2698:	05 90       	lpm	r0, Z+
    269a:	07 94       	ror	r0
    269c:	28 f4       	brcc	.+10     	; 0x26a8 <__ftoa_engine+0x9c>
    269e:	e7 0e       	add	r14, r23
    26a0:	f8 1e       	adc	r15, r24
    26a2:	49 1f       	adc	r20, r25
    26a4:	56 1f       	adc	r21, r22
    26a6:	c1 1d       	adc	r28, r1
    26a8:	77 0f       	add	r23, r23
    26aa:	88 1f       	adc	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	66 1f       	adc	r22, r22
    26b0:	06 94       	lsr	r0
    26b2:	a1 f7       	brne	.-24     	; 0x269c <__ftoa_engine+0x90>
    26b4:	05 90       	lpm	r0, Z+
    26b6:	07 94       	ror	r0
    26b8:	28 f4       	brcc	.+10     	; 0x26c4 <__ftoa_engine+0xb8>
    26ba:	f8 0e       	add	r15, r24
    26bc:	49 1f       	adc	r20, r25
    26be:	56 1f       	adc	r21, r22
    26c0:	c7 1f       	adc	r28, r23
    26c2:	d1 1d       	adc	r29, r1
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	66 1f       	adc	r22, r22
    26ca:	77 1f       	adc	r23, r23
    26cc:	06 94       	lsr	r0
    26ce:	a1 f7       	brne	.-24     	; 0x26b8 <__ftoa_engine+0xac>
    26d0:	05 90       	lpm	r0, Z+
    26d2:	07 94       	ror	r0
    26d4:	20 f4       	brcc	.+8      	; 0x26de <__ftoa_engine+0xd2>
    26d6:	49 0f       	add	r20, r25
    26d8:	56 1f       	adc	r21, r22
    26da:	c7 1f       	adc	r28, r23
    26dc:	d8 1f       	adc	r29, r24
    26de:	99 0f       	add	r25, r25
    26e0:	66 1f       	adc	r22, r22
    26e2:	77 1f       	adc	r23, r23
    26e4:	88 1f       	adc	r24, r24
    26e6:	06 94       	lsr	r0
    26e8:	a9 f7       	brne	.-22     	; 0x26d4 <__ftoa_engine+0xc8>
    26ea:	84 91       	lpm	r24, Z
    26ec:	10 95       	com	r17
    26ee:	17 70       	andi	r17, 0x07	; 7
    26f0:	41 f0       	breq	.+16     	; 0x2702 <__ftoa_engine+0xf6>
    26f2:	d6 95       	lsr	r29
    26f4:	c7 95       	ror	r28
    26f6:	57 95       	ror	r21
    26f8:	47 95       	ror	r20
    26fa:	f7 94       	ror	r15
    26fc:	e7 94       	ror	r14
    26fe:	1a 95       	dec	r17
    2700:	c1 f7       	brne	.-16     	; 0x26f2 <__ftoa_engine+0xe6>
    2702:	e2 e0       	ldi	r30, 0x02	; 2
    2704:	f1 e0       	ldi	r31, 0x01	; 1
    2706:	68 94       	set
    2708:	15 90       	lpm	r1, Z+
    270a:	15 91       	lpm	r17, Z+
    270c:	35 91       	lpm	r19, Z+
    270e:	65 91       	lpm	r22, Z+
    2710:	95 91       	lpm	r25, Z+
    2712:	05 90       	lpm	r0, Z+
    2714:	7f e2       	ldi	r23, 0x2F	; 47
    2716:	73 95       	inc	r23
    2718:	e1 18       	sub	r14, r1
    271a:	f1 0a       	sbc	r15, r17
    271c:	43 0b       	sbc	r20, r19
    271e:	56 0b       	sbc	r21, r22
    2720:	c9 0b       	sbc	r28, r25
    2722:	d0 09       	sbc	r29, r0
    2724:	c0 f7       	brcc	.-16     	; 0x2716 <__ftoa_engine+0x10a>
    2726:	e1 0c       	add	r14, r1
    2728:	f1 1e       	adc	r15, r17
    272a:	43 1f       	adc	r20, r19
    272c:	56 1f       	adc	r21, r22
    272e:	c9 1f       	adc	r28, r25
    2730:	d0 1d       	adc	r29, r0
    2732:	7e f4       	brtc	.+30     	; 0x2752 <__ftoa_engine+0x146>
    2734:	70 33       	cpi	r23, 0x30	; 48
    2736:	11 f4       	brne	.+4      	; 0x273c <__ftoa_engine+0x130>
    2738:	8a 95       	dec	r24
    273a:	e6 cf       	rjmp	.-52     	; 0x2708 <__ftoa_engine+0xfc>
    273c:	e8 94       	clt
    273e:	01 50       	subi	r16, 0x01	; 1
    2740:	30 f0       	brcs	.+12     	; 0x274e <__ftoa_engine+0x142>
    2742:	08 0f       	add	r16, r24
    2744:	0a f4       	brpl	.+2      	; 0x2748 <__ftoa_engine+0x13c>
    2746:	00 27       	eor	r16, r16
    2748:	02 17       	cp	r16, r18
    274a:	08 f4       	brcc	.+2      	; 0x274e <__ftoa_engine+0x142>
    274c:	20 2f       	mov	r18, r16
    274e:	23 95       	inc	r18
    2750:	02 2f       	mov	r16, r18
    2752:	7a 33       	cpi	r23, 0x3A	; 58
    2754:	28 f0       	brcs	.+10     	; 0x2760 <__ftoa_engine+0x154>
    2756:	79 e3       	ldi	r23, 0x39	; 57
    2758:	7d 93       	st	X+, r23
    275a:	2a 95       	dec	r18
    275c:	e9 f7       	brne	.-6      	; 0x2758 <__ftoa_engine+0x14c>
    275e:	10 c0       	rjmp	.+32     	; 0x2780 <__ftoa_engine+0x174>
    2760:	7d 93       	st	X+, r23
    2762:	2a 95       	dec	r18
    2764:	89 f6       	brne	.-94     	; 0x2708 <__ftoa_engine+0xfc>
    2766:	06 94       	lsr	r0
    2768:	97 95       	ror	r25
    276a:	67 95       	ror	r22
    276c:	37 95       	ror	r19
    276e:	17 95       	ror	r17
    2770:	17 94       	ror	r1
    2772:	e1 18       	sub	r14, r1
    2774:	f1 0a       	sbc	r15, r17
    2776:	43 0b       	sbc	r20, r19
    2778:	56 0b       	sbc	r21, r22
    277a:	c9 0b       	sbc	r28, r25
    277c:	d0 09       	sbc	r29, r0
    277e:	98 f0       	brcs	.+38     	; 0x27a6 <__ftoa_engine+0x19a>
    2780:	23 95       	inc	r18
    2782:	7e 91       	ld	r23, -X
    2784:	73 95       	inc	r23
    2786:	7a 33       	cpi	r23, 0x3A	; 58
    2788:	08 f0       	brcs	.+2      	; 0x278c <__ftoa_engine+0x180>
    278a:	70 e3       	ldi	r23, 0x30	; 48
    278c:	7c 93       	st	X, r23
    278e:	20 13       	cpse	r18, r16
    2790:	b8 f7       	brcc	.-18     	; 0x2780 <__ftoa_engine+0x174>
    2792:	7e 91       	ld	r23, -X
    2794:	70 61       	ori	r23, 0x10	; 16
    2796:	7d 93       	st	X+, r23
    2798:	30 f0       	brcs	.+12     	; 0x27a6 <__ftoa_engine+0x19a>
    279a:	83 95       	inc	r24
    279c:	71 e3       	ldi	r23, 0x31	; 49
    279e:	7d 93       	st	X+, r23
    27a0:	70 e3       	ldi	r23, 0x30	; 48
    27a2:	2a 95       	dec	r18
    27a4:	e1 f7       	brne	.-8      	; 0x279e <__ftoa_engine+0x192>
    27a6:	11 24       	eor	r1, r1
    27a8:	ef 90       	pop	r14
    27aa:	ff 90       	pop	r15
    27ac:	0f 91       	pop	r16
    27ae:	1f 91       	pop	r17
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	99 27       	eor	r25, r25
    27b6:	87 fd       	sbrc	r24, 7
    27b8:	90 95       	com	r25
    27ba:	08 95       	ret

000027bc <strnlen_P>:
    27bc:	fc 01       	movw	r30, r24
    27be:	05 90       	lpm	r0, Z+
    27c0:	61 50       	subi	r22, 0x01	; 1
    27c2:	70 40       	sbci	r23, 0x00	; 0
    27c4:	01 10       	cpse	r0, r1
    27c6:	d8 f7       	brcc	.-10     	; 0x27be <strnlen_P+0x2>
    27c8:	80 95       	com	r24
    27ca:	90 95       	com	r25
    27cc:	8e 0f       	add	r24, r30
    27ce:	9f 1f       	adc	r25, r31
    27d0:	08 95       	ret

000027d2 <strnlen>:
    27d2:	fc 01       	movw	r30, r24
    27d4:	61 50       	subi	r22, 0x01	; 1
    27d6:	70 40       	sbci	r23, 0x00	; 0
    27d8:	01 90       	ld	r0, Z+
    27da:	01 10       	cpse	r0, r1
    27dc:	d8 f7       	brcc	.-10     	; 0x27d4 <strnlen+0x2>
    27de:	80 95       	com	r24
    27e0:	90 95       	com	r25
    27e2:	8e 0f       	add	r24, r30
    27e4:	9f 1f       	adc	r25, r31
    27e6:	08 95       	ret

000027e8 <fputc>:
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	fb 01       	movw	r30, r22
    27f2:	23 81       	ldd	r18, Z+3	; 0x03
    27f4:	21 fd       	sbrc	r18, 1
    27f6:	03 c0       	rjmp	.+6      	; 0x27fe <fputc+0x16>
    27f8:	8f ef       	ldi	r24, 0xFF	; 255
    27fa:	9f ef       	ldi	r25, 0xFF	; 255
    27fc:	2c c0       	rjmp	.+88     	; 0x2856 <fputc+0x6e>
    27fe:	22 ff       	sbrs	r18, 2
    2800:	16 c0       	rjmp	.+44     	; 0x282e <fputc+0x46>
    2802:	46 81       	ldd	r20, Z+6	; 0x06
    2804:	57 81       	ldd	r21, Z+7	; 0x07
    2806:	24 81       	ldd	r18, Z+4	; 0x04
    2808:	35 81       	ldd	r19, Z+5	; 0x05
    280a:	42 17       	cp	r20, r18
    280c:	53 07       	cpc	r21, r19
    280e:	44 f4       	brge	.+16     	; 0x2820 <fputc+0x38>
    2810:	a0 81       	ld	r26, Z
    2812:	b1 81       	ldd	r27, Z+1	; 0x01
    2814:	9d 01       	movw	r18, r26
    2816:	2f 5f       	subi	r18, 0xFF	; 255
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	31 83       	std	Z+1, r19	; 0x01
    281c:	20 83       	st	Z, r18
    281e:	8c 93       	st	X, r24
    2820:	26 81       	ldd	r18, Z+6	; 0x06
    2822:	37 81       	ldd	r19, Z+7	; 0x07
    2824:	2f 5f       	subi	r18, 0xFF	; 255
    2826:	3f 4f       	sbci	r19, 0xFF	; 255
    2828:	37 83       	std	Z+7, r19	; 0x07
    282a:	26 83       	std	Z+6, r18	; 0x06
    282c:	14 c0       	rjmp	.+40     	; 0x2856 <fputc+0x6e>
    282e:	8b 01       	movw	r16, r22
    2830:	ec 01       	movw	r28, r24
    2832:	fb 01       	movw	r30, r22
    2834:	00 84       	ldd	r0, Z+8	; 0x08
    2836:	f1 85       	ldd	r31, Z+9	; 0x09
    2838:	e0 2d       	mov	r30, r0
    283a:	19 95       	eicall
    283c:	89 2b       	or	r24, r25
    283e:	e1 f6       	brne	.-72     	; 0x27f8 <fputc+0x10>
    2840:	d8 01       	movw	r26, r16
    2842:	16 96       	adiw	r26, 0x06	; 6
    2844:	8d 91       	ld	r24, X+
    2846:	9c 91       	ld	r25, X
    2848:	17 97       	sbiw	r26, 0x07	; 7
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	17 96       	adiw	r26, 0x07	; 7
    284e:	9c 93       	st	X, r25
    2850:	8e 93       	st	-X, r24
    2852:	16 97       	sbiw	r26, 0x06	; 6
    2854:	ce 01       	movw	r24, r28
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	08 95       	ret

00002860 <__ultoa_invert>:
    2860:	fa 01       	movw	r30, r20
    2862:	aa 27       	eor	r26, r26
    2864:	28 30       	cpi	r18, 0x08	; 8
    2866:	51 f1       	breq	.+84     	; 0x28bc <__ultoa_invert+0x5c>
    2868:	20 31       	cpi	r18, 0x10	; 16
    286a:	81 f1       	breq	.+96     	; 0x28cc <__ultoa_invert+0x6c>
    286c:	e8 94       	clt
    286e:	6f 93       	push	r22
    2870:	6e 7f       	andi	r22, 0xFE	; 254
    2872:	6e 5f       	subi	r22, 0xFE	; 254
    2874:	7f 4f       	sbci	r23, 0xFF	; 255
    2876:	8f 4f       	sbci	r24, 0xFF	; 255
    2878:	9f 4f       	sbci	r25, 0xFF	; 255
    287a:	af 4f       	sbci	r26, 0xFF	; 255
    287c:	b1 e0       	ldi	r27, 0x01	; 1
    287e:	3e d0       	rcall	.+124    	; 0x28fc <__ultoa_invert+0x9c>
    2880:	b4 e0       	ldi	r27, 0x04	; 4
    2882:	3c d0       	rcall	.+120    	; 0x28fc <__ultoa_invert+0x9c>
    2884:	67 0f       	add	r22, r23
    2886:	78 1f       	adc	r23, r24
    2888:	89 1f       	adc	r24, r25
    288a:	9a 1f       	adc	r25, r26
    288c:	a1 1d       	adc	r26, r1
    288e:	68 0f       	add	r22, r24
    2890:	79 1f       	adc	r23, r25
    2892:	8a 1f       	adc	r24, r26
    2894:	91 1d       	adc	r25, r1
    2896:	a1 1d       	adc	r26, r1
    2898:	6a 0f       	add	r22, r26
    289a:	71 1d       	adc	r23, r1
    289c:	81 1d       	adc	r24, r1
    289e:	91 1d       	adc	r25, r1
    28a0:	a1 1d       	adc	r26, r1
    28a2:	20 d0       	rcall	.+64     	; 0x28e4 <__ultoa_invert+0x84>
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <__ultoa_invert+0x48>
    28a6:	68 94       	set
    28a8:	3f 91       	pop	r19
    28aa:	2a e0       	ldi	r18, 0x0A	; 10
    28ac:	26 9f       	mul	r18, r22
    28ae:	11 24       	eor	r1, r1
    28b0:	30 19       	sub	r19, r0
    28b2:	30 5d       	subi	r19, 0xD0	; 208
    28b4:	31 93       	st	Z+, r19
    28b6:	de f6       	brtc	.-74     	; 0x286e <__ultoa_invert+0xe>
    28b8:	cf 01       	movw	r24, r30
    28ba:	08 95       	ret
    28bc:	46 2f       	mov	r20, r22
    28be:	47 70       	andi	r20, 0x07	; 7
    28c0:	40 5d       	subi	r20, 0xD0	; 208
    28c2:	41 93       	st	Z+, r20
    28c4:	b3 e0       	ldi	r27, 0x03	; 3
    28c6:	0f d0       	rcall	.+30     	; 0x28e6 <__ultoa_invert+0x86>
    28c8:	c9 f7       	brne	.-14     	; 0x28bc <__ultoa_invert+0x5c>
    28ca:	f6 cf       	rjmp	.-20     	; 0x28b8 <__ultoa_invert+0x58>
    28cc:	46 2f       	mov	r20, r22
    28ce:	4f 70       	andi	r20, 0x0F	; 15
    28d0:	40 5d       	subi	r20, 0xD0	; 208
    28d2:	4a 33       	cpi	r20, 0x3A	; 58
    28d4:	18 f0       	brcs	.+6      	; 0x28dc <__ultoa_invert+0x7c>
    28d6:	49 5d       	subi	r20, 0xD9	; 217
    28d8:	31 fd       	sbrc	r19, 1
    28da:	40 52       	subi	r20, 0x20	; 32
    28dc:	41 93       	st	Z+, r20
    28de:	02 d0       	rcall	.+4      	; 0x28e4 <__ultoa_invert+0x84>
    28e0:	a9 f7       	brne	.-22     	; 0x28cc <__ultoa_invert+0x6c>
    28e2:	ea cf       	rjmp	.-44     	; 0x28b8 <__ultoa_invert+0x58>
    28e4:	b4 e0       	ldi	r27, 0x04	; 4
    28e6:	a6 95       	lsr	r26
    28e8:	97 95       	ror	r25
    28ea:	87 95       	ror	r24
    28ec:	77 95       	ror	r23
    28ee:	67 95       	ror	r22
    28f0:	ba 95       	dec	r27
    28f2:	c9 f7       	brne	.-14     	; 0x28e6 <__ultoa_invert+0x86>
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	61 05       	cpc	r22, r1
    28f8:	71 05       	cpc	r23, r1
    28fa:	08 95       	ret
    28fc:	9b 01       	movw	r18, r22
    28fe:	ac 01       	movw	r20, r24
    2900:	0a 2e       	mov	r0, r26
    2902:	06 94       	lsr	r0
    2904:	57 95       	ror	r21
    2906:	47 95       	ror	r20
    2908:	37 95       	ror	r19
    290a:	27 95       	ror	r18
    290c:	ba 95       	dec	r27
    290e:	c9 f7       	brne	.-14     	; 0x2902 <__ultoa_invert+0xa2>
    2910:	62 0f       	add	r22, r18
    2912:	73 1f       	adc	r23, r19
    2914:	84 1f       	adc	r24, r20
    2916:	95 1f       	adc	r25, r21
    2918:	a0 1d       	adc	r26, r0
    291a:	08 95       	ret

0000291c <_exit>:
    291c:	f8 94       	cli

0000291e <__stop_program>:
    291e:	ff cf       	rjmp	.-2      	; 0x291e <__stop_program>
